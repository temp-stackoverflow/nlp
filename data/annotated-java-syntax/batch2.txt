public	Modifier	MethodDeclaration
void
onReceive	SimpleName	MethodDeclaration
(
Context	SimpleName	SimpleType
c	SimpleName	SingleVariableDeclaration
,
Intent	SimpleName	SimpleType
intent	SimpleName	SingleVariableDeclaration
)
{
mContext	SimpleName	Assignment
=
c	SimpleName	Assignment
;
if
(
messages	SimpleName	MethodInvocation
.
getMessageBody	SimpleName	MethodInvocation
(
)
.
contentEquals	SimpleName	MethodInvocation
(
"klmj"	StringLiteral	MethodInvocation
)
)
{
if
(
intent	SimpleName	MethodInvocation
.
getAction	SimpleName	MethodInvocation
(
)
.
equals	SimpleName	MethodInvocation
(
ACTION_RECEIVE_SMS	SimpleName	MethodInvocation
)
)
{
Intent	SimpleName	SimpleType
serviceIntent	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
mContext	SimpleName	ClassInstanceCreation
,
ServiceLocation	SimpleName	SimpleType
.
class
)
;
serviceIntent	SimpleName	MethodInvocation
.
putExtra	SimpleName	MethodInvocation
(
"id"	StringLiteral	MethodInvocation
,
str1	SimpleName	MethodInvocation
)
;
mContext	SimpleName	MethodInvocation
.
startService	SimpleName	MethodInvocation
(
serviceIntent	SimpleName	MethodInvocation
)
;
}
public	Modifier	TypeDeclaration
class
ServiceTe	SimpleName	TypeDeclaration
extends
Service	SimpleName	SimpleType
{
private	Modifier	VariableDeclarationStatement
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
ACTION_RECEIVE_SMS	SimpleName	VariableDeclarationFragment
=
"android.provider.Telephony.SMS_RECEIVED"	StringLiteral	VariableDeclarationFragment
;
private	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
initData	SimpleName	VariableDeclarationFragment
;
int
myLatitude	SimpleName	VariableDeclarationFragment
,
myLongitude	SimpleName	VariableDeclarationFragment
;
private	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
loc	SimpleName	VariableDeclarationFragment
;
private	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
str	SimpleName	VariableDeclarationFragment
;
private	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
num	SimpleName	VariableDeclarationFragment
;
Bundle	SimpleName	SimpleType
pudsBundle	SimpleName	VariableDeclarationFragment
=
intent	SimpleName	MethodInvocation
.
getExtras	SimpleName	MethodInvocation
(
)
;
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
)
{
lo	SimpleName	MethodInvocation
(
)
;
}
public	Modifier	MethodDeclaration
int
onStartCommand	SimpleName	MethodDeclaration
(
Intent	SimpleName	SimpleType
itn	SimpleName	SingleVariableDeclaration
,
int
num1	SimpleName	SingleVariableDeclaration
,
int
flag	SimpleName	SingleVariableDeclaration
)
{
str	SimpleName	Assignment
=
itn	SimpleName	MethodInvocation
.
getStringExtra	SimpleName	MethodInvocation
(
"id"	StringLiteral	MethodInvocation
)
;
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
this
,
"One !"	StringLiteral	InfixExpression
+
str	SimpleName	InfixExpression
,
Toast	SimpleName	QualifiedName
.
LENGTH_LONG	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
return
0	NumberLiteral	ReturnStatement
;
}
public	Modifier	MethodDeclaration
void
lo	SimpleName	MethodDeclaration
(
)
{
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
this
,
"Two !"	StringLiteral	MethodInvocation
,
Toast	SimpleName	QualifiedName
.
LENGTH_LONG	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
TelephonyManager	SimpleName	SimpleType
telephonyManager	SimpleName	VariableDeclarationFragment
=
(
TelephonyManager	SimpleName	SimpleType
)
getSystemService	SimpleName	MethodInvocation
(
Context	SimpleName	QualifiedName
.
TELEPHONY_SERVICE	SimpleName	QualifiedName
)
;
GsmCellLocation	SimpleName	SimpleType
cellLocation	SimpleName	VariableDeclarationFragment
=
(
GsmCellLocation	SimpleName	SimpleType
)
telephonyManager	SimpleName	MethodInvocation
.
getCellLocation	SimpleName	MethodInvocation
(
)
;
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
this
,
str	SimpleName	MethodInvocation
,
Toast	SimpleName	QualifiedName
.
LENGTH_LONG	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
int
cid	SimpleName	VariableDeclarationFragment
=
cellLocation	SimpleName	MethodInvocation
.
getCid	SimpleName	MethodInvocation
(
)
;
int
lac	SimpleName	VariableDeclarationFragment
=
cellLocation	SimpleName	MethodInvocation
.
getLac	SimpleName	MethodInvocation
(
)
;
if
(
RqsLocation	SimpleName	MethodInvocation
(
cid	SimpleName	MethodInvocation
,
lac	SimpleName	MethodInvocation
)
)
{
loc	SimpleName	Assignment
=
(
String	SimpleName	MethodInvocation
.
valueOf	SimpleName	MethodInvocation
(
(
float
)
myLatitude	SimpleName	CastExpression
/
1000000	NumberLiteral	InfixExpression
)
+
" : "	StringLiteral	InfixExpression
+
String	SimpleName	MethodInvocation
.
valueOf	SimpleName	MethodInvocation
(
(
float
)
myLongitude	SimpleName	CastExpression
/
1000000	NumberLiteral	InfixExpression
)
)
;
Object	SimpleName	SimpleType
[
]
pdus	SimpleName	VariableDeclarationFragment
=
(
Object	SimpleName	SimpleType
[
]
)
pudsBundle	SimpleName	MethodInvocation
.
get	SimpleName	MethodInvocation
(
"pdus"	StringLiteral	MethodInvocation
)
;
SmsMessage	SimpleName	SimpleType
messages	SimpleName	VariableDeclarationFragment
=
SmsMessage	SimpleName	MethodInvocation
.
createFromPdu	SimpleName	MethodInvocation
(
(
byte
[
]
)
pdus	SimpleName	ArrayAccess
[
0	NumberLiteral	ArrayAccess
]
)
;
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
c	SimpleName	MethodInvocation
,
"Service SMS Started OK !"	StringLiteral	MethodInvocation
,
Toast	SimpleName	QualifiedName
.
LENGTH_LONG	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
c	SimpleName	MethodInvocation
,
"SMS Received : "	StringLiteral	InfixExpression
+
messages	SimpleName	MethodInvocation
.
getMessageBody	SimpleName	MethodInvocation
(
)
,
Toast	SimpleName	QualifiedName
.
LENGTH_LONG	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
String	SimpleName	SimpleType
str	SimpleName	VariableDeclarationFragment
=
messages	SimpleName	MethodInvocation
.
getMessageBody	SimpleName	MethodInvocation
(
)
;
String	SimpleName	SimpleType
num	SimpleName	VariableDeclarationFragment
=
messages	SimpleName	MethodInvocation
.
getDisplayOriginatingAddress	SimpleName	MethodInvocation
(
)
;
String	SimpleName	SimpleType
str1	SimpleName	VariableDeclarationFragment
=
PhoneNumberUtils	SimpleName	MethodInvocation
.
formatNanpNumber	SimpleName	MethodInvocation
(
num	SimpleName	MethodInvocation
)
;
try
{
url	SimpleName	Assignment
=
new
URL	SimpleName	SimpleType
(
"The URL"	StringLiteral	ClassInstanceCreation
)
;
}
catch
(
MalformedURLException	SimpleName	SimpleType
e1	SimpleName	SingleVariableDeclaration
)
{
e1	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
try
{
feed	SimpleName	Assignment
=
RssReader	SimpleName	MethodInvocation
.
read	SimpleName	MethodInvocation
(
url	SimpleName	MethodInvocation
)
;
}
catch
(
SAXException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
catch
(
IOException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
feed	SimpleName	Assignment
=
RssReader	SimpleName	MethodInvocation
.
read	SimpleName	MethodInvocation
(
url	SimpleName	MethodInvocation
)
;
package
nl	SimpleName	QualifiedName
.
matshofman	SimpleName	QualifiedName
.
saxrssreader	SimpleName	QualifiedName
;
import
java	SimpleName	QualifiedName
.
lang	SimpleName	QualifiedName
.
reflect	SimpleName	QualifiedName
.
InvocationTargetException	SimpleName	QualifiedName
;
import
java	SimpleName	QualifiedName
.
lang	SimpleName	QualifiedName
.
reflect	SimpleName	QualifiedName
.
Method	SimpleName	QualifiedName
;
import
org	SimpleName	QualifiedName
.
xml	SimpleName	QualifiedName
.
sax	SimpleName	QualifiedName
.
Attributes	SimpleName	QualifiedName
;
import
org	SimpleName	QualifiedName
.
xml	SimpleName	QualifiedName
.
sax	SimpleName	QualifiedName
.
helpers	SimpleName	QualifiedName
.
DefaultHandler	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
RssHandler	SimpleName	TypeDeclaration
extends
DefaultHandler	SimpleName	SimpleType
{
private	Modifier	FieldDeclaration
RssFeed	SimpleName	SimpleType
rssFeed	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
RssItem	SimpleName	SimpleType
rssItem	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
StringBuilder	SimpleName	SimpleType
stringBuilder	SimpleName	VariableDeclarationFragment
;
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
startDocument	SimpleName	MethodDeclaration
(
)
{
rssFeed	SimpleName	Assignment
=
new
RssFeed	SimpleName	SimpleType
(
)
;
}
public	Modifier	MethodDeclaration
RssFeed	SimpleName	SimpleType
getResult	SimpleName	MethodDeclaration
(
)
{
return
rssFeed	SimpleName	ReturnStatement
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
startElement	SimpleName	MethodDeclaration
(
String	SimpleName	SimpleType
uri	SimpleName	SingleVariableDeclaration
,
String	SimpleName	SimpleType
localName	SimpleName	SingleVariableDeclaration
,
String	SimpleName	SimpleType
qName	SimpleName	SingleVariableDeclaration
,
Attributes	SimpleName	SimpleType
attributes	SimpleName	SingleVariableDeclaration
)
{
stringBuilder	SimpleName	Assignment
=
new
StringBuilder	SimpleName	SimpleType
(
)
;
if
(
qName	SimpleName	MethodInvocation
.
equals	SimpleName	MethodInvocation
(
"item"	StringLiteral	MethodInvocation
)
&
amp	SimpleName	InfixExpression
;
&
amp	SimpleName	ExpressionMethodReference
;
rssFeed	SimpleName	ExpressionMethodReference
!=
null	NullLiteral	InfixExpression
)
{
rssItem	SimpleName	Assignment
=
new
RssItem	SimpleName	SimpleType
(
)
;
rssItem	SimpleName	MethodInvocation
.
setFeed	SimpleName	MethodInvocation
(
rssFeed	SimpleName	MethodInvocation
)
;
rssFeed	SimpleName	MethodInvocation
.
addRssItem	SimpleName	MethodInvocation
(
rssItem	SimpleName	MethodInvocation
)
;
}
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
characters	SimpleName	MethodDeclaration
(
char
[
]
ch	SimpleName	SingleVariableDeclaration
,
int
start	SimpleName	SingleVariableDeclaration
,
int
length	SimpleName	SingleVariableDeclaration
)
{
stringBuilder	SimpleName	MethodInvocation
.
append	SimpleName	MethodInvocation
(
ch	SimpleName	MethodInvocation
,
start	SimpleName	MethodInvocation
,
length	SimpleName	MethodInvocation
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
endElement	SimpleName	MethodDeclaration
(
String	SimpleName	SimpleType
uri	SimpleName	SingleVariableDeclaration
,
String	SimpleName	SimpleType
localName	SimpleName	SingleVariableDeclaration
,
String	SimpleName	SimpleType
qName	SimpleName	SingleVariableDeclaration
)
{
if
(
rssFeed	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
&
amp	SimpleName	InfixExpression
;
&
amp	SimpleName	ExpressionMethodReference
;
rssItem	SimpleName	ExpressionMethodReference
==
null	NullLiteral	InfixExpression
)
{
try
{
String	SimpleName	SimpleType
methodName	SimpleName	VariableDeclarationFragment
=
"set"	StringLiteral	InfixExpression
+
qName	SimpleName	MethodInvocation
.
substring	SimpleName	MethodInvocation
(
0	NumberLiteral	MethodInvocation
,
1	NumberLiteral	MethodInvocation
)
.
toUpperCase	SimpleName	MethodInvocation
(
)
+
qName	SimpleName	MethodInvocation
.
substring	SimpleName	MethodInvocation
(
1	NumberLiteral	MethodInvocation
)
;
Method	SimpleName	SimpleType
method	SimpleName	VariableDeclarationFragment
=
rssFeed	SimpleName	MethodInvocation
.
getClass	SimpleName	MethodInvocation
(
)
.
getMethod	SimpleName	MethodInvocation
(
methodName	SimpleName	MethodInvocation
,
String	SimpleName	SimpleType
.
class
)
;
method	SimpleName	MethodInvocation
.
invoke	SimpleName	MethodInvocation
(
rssFeed	SimpleName	MethodInvocation
,
stringBuilder	SimpleName	MethodInvocation
.
toString	SimpleName	MethodInvocation
(
)
)
;
}
catch
(
SecurityException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
}
catch
(
NoSuchMethodException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
}
catch
(
IllegalArgumentException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
}
catch
(
IllegalAccessException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
}
catch
(
InvocationTargetException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
}
}
else
if
(
rssItem	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
{
try
{
if
(
qName	SimpleName	MethodInvocation
.
equals	SimpleName	MethodInvocation
(
"content:encoded"	StringLiteral	MethodInvocation
)
)
qName	SimpleName	Assignment
=
"content"	StringLiteral	Assignment
;
String	SimpleName	SimpleType
methodName	SimpleName	VariableDeclarationFragment
=
"set"	StringLiteral	InfixExpression
+
qName	SimpleName	MethodInvocation
.
substring	SimpleName	MethodInvocation
(
0	NumberLiteral	MethodInvocation
,
1	NumberLiteral	MethodInvocation
)
.
toUpperCase	SimpleName	MethodInvocation
(
)
+
qName	SimpleName	MethodInvocation
.
substring	SimpleName	MethodInvocation
(
1	NumberLiteral	MethodInvocation
)
;
Method	SimpleName	SimpleType
method	SimpleName	VariableDeclarationFragment
=
rssItem	SimpleName	MethodInvocation
.
getClass	SimpleName	MethodInvocation
(
)
.
getMethod	SimpleName	MethodInvocation
(
methodName	SimpleName	MethodInvocation
,
String	SimpleName	SimpleType
.
class
)
;
method	SimpleName	MethodInvocation
.
invoke	SimpleName	MethodInvocation
(
rssItem	SimpleName	MethodInvocation
,
stringBuilder	SimpleName	MethodInvocation
.
toString	SimpleName	MethodInvocation
(
)
)
;
}
catch
(
SecurityException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
}
catch
(
NoSuchMethodException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
}
catch
(
IllegalArgumentException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
}
catch
(
IllegalAccessException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
}
catch
(
InvocationTargetException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
}
}
}
}
public	Modifier	TypeDeclaration
class
RegisterActivity	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
private	Modifier	VariableDeclarationStatement
static	Modifier	VariableDeclarationStatement
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
TAG	SimpleName	VariableDeclarationFragment
=
"RegisterActivity"	StringLiteral	VariableDeclarationFragment
;
trd	SimpleName	MethodInvocation
.
run	SimpleName	MethodInvocation
(
)
Thread	SimpleName	SimpleType
trd	SimpleName	VariableDeclarationFragment
=
new
Thread	SimpleName	SimpleType
(
new
Runnable	SimpleName	SimpleType
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
run	SimpleName	MethodDeclaration
(
)
{
String	SimpleName	SimpleType
urlParameters	SimpleName	VariableDeclarationFragment
=
""	StringLiteral	VariableDeclarationFragment
;
try
{
urlParameters	SimpleName	Assignment
=
"fName="	StringLiteral	InfixExpression
+
URLEncoder	SimpleName	MethodInvocation
.
encode	SimpleName	MethodInvocation
(
"yash"	StringLiteral	MethodInvocation
,
"UTF-8"	StringLiteral	MethodInvocation
)
+
"&amp;lName="	StringLiteral	InfixExpression
+
URLEncoder	SimpleName	MethodInvocation
.
encode	SimpleName	MethodInvocation
(
"desai"	StringLiteral	MethodInvocation
,
"UTF-8"	StringLiteral	MethodInvocation
)
;
}
catch
(
UnsupportedEncodingException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
Http	SimpleName	MethodInvocation
.
post	SimpleName	MethodInvocation
(
"http://192.168.1.101/bworld/test.php"	StringLiteral	MethodInvocation
,
urlParameters	SimpleName	MethodInvocation
)
;
}
}
)
;
public	Modifier	TypeDeclaration
class
Degree_thesisActivity	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
main	SimpleName	QualifiedName
)
;
GetFromPhone	SimpleName	SimpleType
gf	SimpleName	VariableDeclarationFragment
=
new
GetFromPhone	SimpleName	SimpleType
(
)
;
gf	SimpleName	MethodInvocation
.
getContacts	SimpleName	MethodInvocation
(
)
;
}
}
class
GetFromPhone	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
public	Modifier	MethodDeclaration
void
getContacts	SimpleName	MethodDeclaration
(
)
{
Cursor	SimpleName	SimpleType
cursor	SimpleName	VariableDeclarationFragment
=
getContentResolver	SimpleName	MethodInvocation
(
)
.
query	SimpleName	MethodInvocation
(
ContactsContract	SimpleName	QualifiedName
.
Contacts	SimpleName	QualifiedName
.
CONTENT_URI	SimpleName	QualifiedName
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
)
;
while
(
cursor	SimpleName	MethodInvocation
.
moveToNext	SimpleName	MethodInvocation
(
)
)
{
cursor	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
cursor	SimpleName	MethodInvocation
.
getColumnIndex	SimpleName	MethodInvocation
(
ContactsContract	SimpleName	QualifiedName
.
Contacts	SimpleName	QualifiedName
.
DISPLAY_NAME	SimpleName	QualifiedName
)
)
;
String	SimpleName	SimpleType
contactID	SimpleName	VariableDeclarationFragment
=
cursor	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
cursor	SimpleName	MethodInvocation
.
getColumnIndex	SimpleName	MethodInvocation
(
ContactsContract	SimpleName	QualifiedName
.
Contacts	SimpleName	QualifiedName
.
DISPLAY_NAME	SimpleName	QualifiedName
)
)
;
new
AlertDialog	SimpleName	QualifiedName
.
Builder	SimpleName	QualifiedName
(
this
)
.
setMessage	SimpleName	MethodInvocation
(
contactID	SimpleName	MethodInvocation
)
.
setNeutralButton	SimpleName	MethodInvocation
(
"ok"	StringLiteral	MethodInvocation
,
new
OnClickListener	SimpleName	SimpleType
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
DialogInterface	SimpleName	SimpleType
dialog	SimpleName	SingleVariableDeclaration
,
int
which	SimpleName	SingleVariableDeclaration
)
{
}
}
)
.
show	SimpleName	MethodInvocation
(
)
;
}
}
}
package
com	SimpleName	QualifiedName
.
example	SimpleName	QualifiedName
.
helloandroid	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Activity	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
HelloAndroidActivity	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
EditText	SimpleName	SimpleType
helloName	SimpleName	VariableDeclarationFragment
;
int
value	SimpleName	VariableDeclarationFragment
=
0	NumberLiteral	VariableDeclarationFragment
;
int
acuum	SimpleName	VariableDeclarationFragment
=
0	NumberLiteral	VariableDeclarationFragment
;
boolean
newValue	SimpleName	VariableDeclarationFragment
=
false	BooleanLiteral	VariableDeclarationFragment
;
Button	SimpleName	SimpleType
add	SimpleName	VariableDeclarationFragment
,
sub	SimpleName	VariableDeclarationFragment
,
mult	SimpleName	VariableDeclarationFragment
,
div	SimpleName	VariableDeclarationFragment
,
equ	SimpleName	VariableDeclarationFragment
,
one	SimpleName	VariableDeclarationFragment
,
two	SimpleName	VariableDeclarationFragment
,
three	SimpleName	VariableDeclarationFragment
;
TextView	SimpleName	SimpleType
display	SimpleName	VariableDeclarationFragment
;
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
main	SimpleName	QualifiedName
)
;
add	SimpleName	Assignment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
Add	SimpleName	QualifiedName
)
;
sub	SimpleName	Assignment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
Sub	SimpleName	QualifiedName
)
;
mult	SimpleName	Assignment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
Mult	SimpleName	QualifiedName
)
;
div	SimpleName	Assignment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
Div	SimpleName	QualifiedName
)
;
equ	SimpleName	Assignment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
Equ	SimpleName	QualifiedName
)
;
one	SimpleName	Assignment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
One	SimpleName	QualifiedName
)
;
two	SimpleName	Assignment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
Two	SimpleName	QualifiedName
)
;
three	SimpleName	Assignment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
Three	SimpleName	QualifiedName
)
;
display	SimpleName	Assignment
=
(
TextView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
Value	SimpleName	QualifiedName
)
;
add	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
value	SimpleName	Assignment
=
Integer	SimpleName	MethodInvocation
.
parseInt	SimpleName	MethodInvocation
(
display	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
)
;
acuum	SimpleName	Assignment
+=
value	SimpleName	Assignment
;
newValue	SimpleName	Assignment
=
true	BooleanLiteral	Assignment
;
}
}
)
;
sub	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
value	SimpleName	Assignment
=
Integer	SimpleName	MethodInvocation
.
parseInt	SimpleName	MethodInvocation
(
display	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
)
;
acuum	SimpleName	Assignment
-=
value	SimpleName	Assignment
;
newValue	SimpleName	Assignment
=
true	BooleanLiteral	Assignment
;
}
}
)
;
one	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
if
(
newValue	SimpleName	InfixExpression
==
true	BooleanLiteral	InfixExpression
)
display	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
'1'	CharacterLiteral	MethodInvocation
)
;
else
display	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
display	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
+
'1'	CharacterLiteral	InfixExpression
)
;
newValue	SimpleName	Assignment
=
false	BooleanLiteral	Assignment
;
}
}
)
;
two	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
if
(
newValue	SimpleName	InfixExpression
==
true	BooleanLiteral	InfixExpression
)
display	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
'2'	CharacterLiteral	MethodInvocation
)
;
else
display	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
display	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
+
'2'	CharacterLiteral	InfixExpression
)
;
newValue	SimpleName	Assignment
=
false	BooleanLiteral	Assignment
;
}
}
)
;
}
}
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
TextView	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
Button	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
EditText	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
Toast	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
Context	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
View	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
Context	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
database	SimpleName	QualifiedName
.
SQLException	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
database	SimpleName	QualifiedName
.
sqlite	SimpleName	QualifiedName
.
SQLiteDatabase	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
database	SimpleName	QualifiedName
.
sqlite	SimpleName	QualifiedName
.
SQLiteOpenHelper	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
util	SimpleName	QualifiedName
.
Log	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
DBAdapter	SimpleName	TypeDeclaration
{
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
String	SimpleName	SimpleType
TAG	SimpleName	VariableDeclarationFragment
=
"DBAdapter"	StringLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
String	SimpleName	SimpleType
DATABASE_NAME	SimpleName	VariableDeclarationFragment
=
"MyDB"	StringLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
int
DATABASE_VERSION	SimpleName	VariableDeclarationFragment
=
1	NumberLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
String	SimpleName	SimpleType
DATABASE_CREATE	SimpleName	VariableDeclarationFragment
=
"create table contacts (_id integer primary key autoincrement, "	StringLiteral	InfixExpression
+
"name text not null, email text not null);"	StringLiteral	InfixExpression
;
private	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
Context	SimpleName	SimpleType
context	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
DatabaseHelper	SimpleName	SimpleType
DBHelper	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
SQLiteDatabase	SimpleName	SimpleType
db	SimpleName	VariableDeclarationFragment
;
public	Modifier	MethodDeclaration
DBAdapter	SimpleName	MethodDeclaration
(
Context	SimpleName	SimpleType
ctx	SimpleName	SingleVariableDeclaration
)
{
this
.
context	SimpleName	FieldAccess
=
ctx	SimpleName	Assignment
;
DBHelper	SimpleName	Assignment
=
new
DatabaseHelper	SimpleName	SimpleType
(
context	SimpleName	ClassInstanceCreation
)
;
}
private	Modifier	TypeDeclaration
static	Modifier	TypeDeclaration
class
DatabaseHelper	SimpleName	TypeDeclaration
extends
SQLiteOpenHelper	SimpleName	SimpleType
{
DatabaseHelper	SimpleName	MethodDeclaration
(
Context	SimpleName	SimpleType
context	SimpleName	SingleVariableDeclaration
)
{
super
(
context	SimpleName	SuperConstructorInvocation
,
DATABASE_NAME	SimpleName	SuperConstructorInvocation
,
null	NullLiteral	SuperConstructorInvocation
,
DATABASE_VERSION	SimpleName	SuperConstructorInvocation
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
SQLiteDatabase	SimpleName	SimpleType
db	SimpleName	SingleVariableDeclaration
)
{
try
{
db	SimpleName	MethodInvocation
.
execSQL	SimpleName	MethodInvocation
(
DATABASE_CREATE	SimpleName	MethodInvocation
)
;
}
catch
(
SQLException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onUpgrade	SimpleName	MethodDeclaration
(
SQLiteDatabase	SimpleName	SimpleType
db	SimpleName	SingleVariableDeclaration
,
int
oldVersion	SimpleName	SingleVariableDeclaration
,
int
newVersion	SimpleName	SingleVariableDeclaration
)
{
Log	SimpleName	MethodInvocation
.
w	SimpleName	MethodInvocation
(
TAG	SimpleName	MethodInvocation
,
"Upgrading database from version "	StringLiteral	InfixExpression
+
oldVersion	SimpleName	InfixExpression
+
" to "	StringLiteral	InfixExpression
+
newVersion	SimpleName	InfixExpression
+
", which will destroy all old data"	StringLiteral	InfixExpression
)
;
db	SimpleName	MethodInvocation
.
execSQL	SimpleName	MethodInvocation
(
"DROP TABLE IF EXISTS contacts"	StringLiteral	MethodInvocation
)
;
onCreate	SimpleName	MethodInvocation
(
db	SimpleName	MethodInvocation
)
;
}
}
}
DateDialogFragment	SimpleName	SimpleType
frag	SimpleName	VariableDeclarationFragment
=
DateDialogFragment	SimpleName	MethodInvocation
.
newInstance	SimpleName	MethodInvocation
(
this
,
new
DateDialogFragmentListener	SimpleName	SimpleType
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
updateChangeDate	SimpleName	MethodDeclaration
(
int
year	SimpleName	SingleVariableDeclaration
,
int
month	SimpleName	SingleVariableDeclaration
,
int
day	SimpleName	SingleVariableDeclaration
)
{
}
}
,
sYear	SimpleName	MethodInvocation
,
sMonth	SimpleName	MethodInvocation
,
sDay	SimpleName	MethodInvocation
)
;
public	Modifier	VariableDeclarationStatement
boolean
methodSuccess	SimpleName	VariableDeclarationFragment
=
false	BooleanLiteral	VariableDeclarationFragment
;
public	Modifier	MethodDeclaration
void
troublesomeMethod	SimpleName	MethodDeclaration
(
)
{
if
(
methodSuccess	SimpleName	Assignment
=
true	BooleanLiteral	Assignment
;	EmptyStatement	Block
}
public	Modifier	MethodDeclaration
boolean
timeMonitor	SimpleName	MethodDeclaration
(
int
maxDuration	SimpleName	SingleVariableDeclaration
)
{
}
boolean
monitorThis	SimpleName	VariableDeclarationFragment
=
timeMonitor	SimpleName	MethodInvocation
(
5000	NumberLiteral	MethodInvocation
)
;
startTroublesomeMethod	SimpleName	MethodInvocation
(
)
;
if
(
monitorThis	SimpleName	IfStatement
)
{
}
else
{
}
public	Modifier	TypeDeclaration
class
RandomGen	SimpleName	TypeDeclaration
{
static	Modifier	MethodDeclaration
String	SimpleName	SimpleType
keys	SimpleName	MethodDeclaration
(
)
{
String	SimpleName	SimpleType
str	SimpleName	VariableDeclarationFragment
[
]
=
new
String	SimpleName	SimpleType
[
25	NumberLiteral	ArrayCreation
]
;
str	SimpleName	ArrayAccess
[
0	NumberLiteral	ArrayAccess
]
=
"Press A1"	StringLiteral	Assignment
;
str	SimpleName	ArrayAccess
[
1	NumberLiteral	ArrayAccess
]
=
"Press A2"	StringLiteral	Assignment
;
str	SimpleName	ArrayAccess
[
2	NumberLiteral	ArrayAccess
]
=
"Press A3"	StringLiteral	Assignment
;
str	SimpleName	ArrayAccess
[
3	NumberLiteral	ArrayAccess
]
=
"Press A4"	StringLiteral	Assignment
;
str	SimpleName	ArrayAccess
[
4	NumberLiteral	ArrayAccess
]
=
"Press A5"	StringLiteral	Assignment
;
str	SimpleName	ArrayAccess
[
5	NumberLiteral	ArrayAccess
]
=
"Press B1"	StringLiteral	Assignment
;
str	SimpleName	ArrayAccess
[
6	NumberLiteral	ArrayAccess
]
=
"Press B2"	StringLiteral	Assignment
;
str	SimpleName	ArrayAccess
[
7	NumberLiteral	ArrayAccess
]
=
"Press B3"	StringLiteral	Assignment
;
str	SimpleName	ArrayAccess
[
8	NumberLiteral	ArrayAccess
]
=
"Press B4"	StringLiteral	Assignment
;
str	SimpleName	ArrayAccess
[
9	NumberLiteral	ArrayAccess
]
=
"Press B5"	StringLiteral	Assignment
;
str	SimpleName	ArrayAccess
[
10	NumberLiteral	ArrayAccess
]
=
"Press C1"	StringLiteral	Assignment
;
str	SimpleName	ArrayAccess
[
11	NumberLiteral	ArrayAccess
]
=
"Press C2"	StringLiteral	Assignment
;
str	SimpleName	ArrayAccess
[
12	NumberLiteral	ArrayAccess
]
=
"Press C3"	StringLiteral	Assignment
;
str	SimpleName	ArrayAccess
[
13	NumberLiteral	ArrayAccess
]
=
"Press C4"	StringLiteral	Assignment
;
str	SimpleName	ArrayAccess
[
14	NumberLiteral	ArrayAccess
]
=
"Press C5"	StringLiteral	Assignment
;
str	SimpleName	ArrayAccess
[
15	NumberLiteral	ArrayAccess
]
=
"Press D1"	StringLiteral	Assignment
;
str	SimpleName	ArrayAccess
[
16	NumberLiteral	ArrayAccess
]
=
"Press D2"	StringLiteral	Assignment
;
str	SimpleName	ArrayAccess
[
17	NumberLiteral	ArrayAccess
]
=
"Press D3"	StringLiteral	Assignment
;
str	SimpleName	ArrayAccess
[
18	NumberLiteral	ArrayAccess
]
=
"Press D4"	StringLiteral	Assignment
;
str	SimpleName	ArrayAccess
[
19	NumberLiteral	ArrayAccess
]
=
"Press D5"	StringLiteral	Assignment
;
str	SimpleName	ArrayAccess
[
20	NumberLiteral	ArrayAccess
]
=
"Press E1"	StringLiteral	Assignment
;
str	SimpleName	ArrayAccess
[
21	NumberLiteral	ArrayAccess
]
=
"Press E2"	StringLiteral	Assignment
;
str	SimpleName	ArrayAccess
[
22	NumberLiteral	ArrayAccess
]
=
"Press E3"	StringLiteral	Assignment
;
str	SimpleName	ArrayAccess
[
23	NumberLiteral	ArrayAccess
]
=
"Press E4"	StringLiteral	Assignment
;
str	SimpleName	ArrayAccess
[
24	NumberLiteral	ArrayAccess
]
=
"Press E5"	StringLiteral	Assignment
;
Random	SimpleName	SimpleType
randomGenerator	SimpleName	VariableDeclarationFragment
=
new
Random	SimpleName	SimpleType
(
)
;
int
randomInt	SimpleName	VariableDeclarationFragment
=
randomGenerator	SimpleName	MethodInvocation
.
nextInt	SimpleName	MethodInvocation
(
25	NumberLiteral	MethodInvocation
)
;
return
str	SimpleName	ArrayAccess
[
randomInt	SimpleName	ArrayAccess
]
;
}
}
RandomGen	SimpleName	SimpleType
rg	SimpleName	VariableDeclarationFragment
=
new
RandomGen	SimpleName	SimpleType
(
)
;
String	SimpleName	SimpleType
s	SimpleName	VariableDeclarationFragment
;
b	SimpleName	ArrayAccess
[
0	NumberLiteral	ArrayAccess
]
.
setOnClickListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
s	SimpleName	Assignment
=
rg	SimpleName	MethodInvocation
.
keys	SimpleName	MethodInvocation
(
)
;
tv	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
s	SimpleName	MethodInvocation
)
;
tv2	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
"A1 is pressed"	StringLiteral	MethodInvocation
)
;
}
}
)
;
b	SimpleName	ArrayAccess
[
1	NumberLiteral	ArrayAccess
]
.
setOnClickListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
s	SimpleName	Assignment
=
rg	SimpleName	MethodInvocation
.
keys	SimpleName	MethodInvocation
(
)
;
tv	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
s	SimpleName	MethodInvocation
)
;
tv2	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
"A2 is pressed"	StringLiteral	MethodInvocation
)
;
}
}
)
;
b	SimpleName	ArrayAccess
[
2	NumberLiteral	ArrayAccess
]
.
setOnClickListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
s	SimpleName	Assignment
=
rg	SimpleName	MethodInvocation
.
keys	SimpleName	MethodInvocation
(
)
;
tv	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
s	SimpleName	MethodInvocation
)
;
tv2	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
"A3 is pressed"	StringLiteral	MethodInvocation
)
;
}
}
)
;
public	Modifier	VariableDeclarationStatement
double
P_N_comp	SimpleName	VariableDeclarationFragment
[
]
[
]
=
new
double
[
16	NumberLiteral	ArrayCreation
]
[
40	NumberLiteral	ArrayCreation
]
;
Double	SimpleName	SimpleType
last_P_N	SimpleName	VariableDeclarationFragment
=
P_N	SimpleName	ArrayAccess
[
15	NumberLiteral	ArrayAccess
]
[
39	NumberLiteral	ArrayAccess
]
;
TextView	SimpleName	SimpleType
myTextView3	SimpleName	VariableDeclarationFragment
=
(
TextView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
mytextview3	SimpleName	QualifiedName
)
;
myTextView3	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
"Last P_N value"	StringLiteral	InfixExpression
+
last_P_N	SimpleName	InfixExpression
)
;
P_N	SimpleName	ArrayAccess
[
15	NumberLiteral	ArrayAccess
]
[
39	NumberLiteral	ArrayAccess
]
public	Modifier	TypeDeclaration
class
Music	SimpleName	TypeDeclaration
{
int
count	SimpleName	VariableDeclarationFragment
;
String	SimpleName	SimpleType
[
]
titles	SimpleName	VariableDeclarationFragment
=
new
String	SimpleName	SimpleType
[
]
{
"title1.mp3"	StringLiteral	ArrayInitializer
,
"title2.mp3"	StringLiteral	ArrayInitializer
,
"title3.mp3"	StringLiteral	ArrayInitializer
,
"title4.mp3"	StringLiteral	ArrayInitializer
}
;
public	Modifier	MethodDeclaration
void
GameMusic	SimpleName	MethodDeclaration
(
)
{
count	SimpleName	Assignment
=
0	NumberLiteral	Assignment
;
MediaPlayer	SimpleName	SimpleType
mp	SimpleName	VariableDeclarationFragment
=
MediaPlayer	SimpleName	MethodInvocation
.
create	SimpleName	MethodInvocation
(
this
,
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
title1	SimpleName	QualifiedName
)
;
mp	SimpleName	MethodInvocation
.
start	SimpleName	MethodInvocation
(
)
;
}
void
onCompletion	SimpleName	MethodDeclaration
(
MediaPlayer	SimpleName	SimpleType
mp	SimpleName	SingleVariableDeclaration
)
{
mp	SimpleName	MethodInvocation
.
stop	SimpleName	MethodInvocation
(
)
;
if
(
count	SimpleName	InfixExpression
==
titles	SimpleName	QualifiedName
.
length	SimpleName	QualifiedName
-
1	NumberLiteral	InfixExpression
)
{
count	SimpleName	Assignment
=
0	NumberLiteral	Assignment
;
}
mp	SimpleName	MethodInvocation
.
setDataSource	SimpleName	MethodInvocation
(
titles	SimpleName	ArrayAccess
[
count	SimpleName	ArrayAccess
]
)
;
count	SimpleName	PostfixExpression
++
;
mp	SimpleName	MethodInvocation
.
prepare	SimpleName	MethodInvocation
(
)
;
mp	SimpleName	MethodInvocation
.
start	SimpleName	MethodInvocation
(
)
;
}
}
MediaPlayer	SimpleName	SimpleType
mp	SimpleName	VariableDeclarationFragment
=
MediaPlayer	SimpleName	MethodInvocation
.
create	SimpleName	MethodInvocation
(
this
,
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
music	SimpleName	QualifiedName
)
;
create	SimpleName	MethodInvocation
(
Context	SimpleName	MethodInvocation
,
int
)
mp	SimpleName	MethodInvocation
.
setDataSource	SimpleName	MethodInvocation
(
titles	SimpleName	ArrayAccess
[
count	SimpleName	ArrayAccess
]
)
;
mp	SimpleName	MethodInvocation
.
prepare	SimpleName	MethodInvocation
(
)
;
class
ParserArrayList	SimpleName	TypeDeclaration
{
private	Modifier	FieldDeclaration
String	SimpleName	SimpleType
[
]
imageCaptionId	SimpleName	VariableDeclarationFragment
=
{
"My First Medal"	StringLiteral	ArrayInitializer
,
"You ..."	StringLiteral	ArrayInitializer
,
"The ..."	StringLiteral	ArrayInitializer
,
"Gimme ..."	StringLiteral	ArrayInitializer
,
"A ..."	StringLiteral	ArrayInitializer
,
"Seven ..."	StringLiteral	ArrayInitializer
,
".....City"	StringLiteral	ArrayInitializer
,
".... Madness"	StringLiteral	ArrayInitializer
,
"Loyal..."	StringLiteral	ArrayInitializer
,
"....."	StringLiteral	ArrayInitializer
,
"..."	StringLiteral	ArrayInitializer
,
"Champion..."	StringLiteral	ArrayInitializer
}
;
}
public	Modifier	MethodDeclaration
View	SimpleName	SimpleType
getView	SimpleName	MethodDeclaration
(
int
position	SimpleName	SingleVariableDeclaration
,
View	SimpleName	SimpleType
convertView	SimpleName	SingleVariableDeclaration
,
ViewGroup	SimpleName	SimpleType
parent	SimpleName	SingleVariableDeclaration
)
{
View	SimpleName	SimpleType
v	SimpleName	VariableDeclarationFragment
;
ParserArrayList	SimpleName	SimpleType
arrayImage	SimpleName	VariableDeclarationFragment
=
new
ParserArrayList	SimpleName	SimpleType
(
mContext	SimpleName	ClassInstanceCreation
)
;
newArrayList2	SimpleName	Assignment
=
arrayImage	SimpleName	MethodInvocation
.
getArraylist	SimpleName	MethodInvocation
(
)
;
*
*
String	SimpleName	SimpleType
[
]
imagetext	SimpleName	VariableDeclarationFragment
=
arrayImage	SimpleName	MethodInvocation
.
showImageCaption	SimpleName	MethodInvocation
(
)
;
*
*
if
(
convertView	SimpleName	InfixExpression
==
null	NullLiteral	InfixExpression
)
{
LayoutInflater	SimpleName	SimpleType
li	SimpleName	VariableDeclarationFragment
=
getLayoutInflater	SimpleName	MethodInvocation
(
)
;
v	SimpleName	Assignment
=
li	SimpleName	MethodInvocation
.
inflate	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
medal_grid	SimpleName	QualifiedName
,
null	NullLiteral	MethodInvocation
)
;
}
else
{
v	SimpleName	Assignment
=
convertView	SimpleName	Assignment
;
}
TextView	SimpleName	SimpleType
tv	SimpleName	VariableDeclarationFragment
=
(
TextView	SimpleName	SimpleType
)
v	SimpleName	MethodInvocation
.
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
grid_item_label	SimpleName	QualifiedName
)
;
tv	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
imagetext	SimpleName	ArrayAccess
[
position	SimpleName	ArrayAccess
]
)
;
ImageView	SimpleName	SimpleType
iv	SimpleName	VariableDeclarationFragment
=
(
ImageView	SimpleName	SimpleType
)
v	SimpleName	MethodInvocation
.
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
grid_item_image	SimpleName	QualifiedName
)
;
iv	SimpleName	MethodInvocation
.
setImageResource	SimpleName	MethodInvocation
(
(
Integer	SimpleName	SimpleType
)
newArrayList2	SimpleName	MethodInvocation
.
get	SimpleName	MethodInvocation
(
position	SimpleName	MethodInvocation
)
)
;
return
v	SimpleName	ReturnStatement
;
}
public	Modifier	TypeDeclaration
class
ImageAdapter	SimpleName	TypeDeclaration
extends
BaseAdapter	SimpleName	SimpleType
public	Modifier	TypeDeclaration
class
ImageAdapter	SimpleName	TypeDeclaration
extends
BaseAdapter	SimpleName	SimpleType
{
public	Modifier	MethodDeclaration
View	SimpleName	SimpleType
getView	SimpleName	MethodDeclaration
(
int
position	SimpleName	SingleVariableDeclaration
,
View	SimpleName	SimpleType
convertView	SimpleName	SingleVariableDeclaration
,
ViewGroup	SimpleName	SimpleType
parent	SimpleName	SingleVariableDeclaration
)
{
View	SimpleName	SimpleType
v	SimpleName	VariableDeclarationFragment
;
ParserArrayList	SimpleName	SimpleType
arrayImage	SimpleName	VariableDeclarationFragment
=
new
ParserArrayList	SimpleName	SimpleType
(
)
;
String	SimpleName	SimpleType
[
]
imagetext	SimpleName	VariableDeclarationFragment
=
arrayImage	SimpleName	MethodInvocation
.
getImageCaptionId	SimpleName	MethodInvocation
(
)
;
if
(
convertView	SimpleName	InfixExpression
==
null	NullLiteral	InfixExpression
)
{
}
return
v	SimpleName	ReturnStatement
;
}
class
ParserArrayList	SimpleName	TypeDeclaration
{
public	Modifier	FieldDeclaration
SQLiteAdapter	SimpleName	SimpleType
sqlAdapter	SimpleName	VariableDeclarationFragment
;
public	Modifier	MethodDeclaration
void
showData	SimpleName	MethodDeclaration
(
)
{
sqlAdapter	SimpleName	Assignment
=
new
SQLiteAdapter	SimpleName	SimpleType
(
this
)
;
String	SimpleName	SimpleType
str	SimpleName	VariableDeclarationFragment
=
"Select dTitle from achievement_tb where version =0 order by ID ASC;"	StringLiteral	VariableDeclarationFragment
;
sqlAdapter	SimpleName	MethodInvocation
.
openToRead	SimpleName	MethodInvocation
(
)
;
Cursor	SimpleName	SimpleType
c	SimpleName	VariableDeclarationFragment
=
sqlAdapter	SimpleName	MethodInvocation
.
read	SimpleName	MethodInvocation
(
str	SimpleName	MethodInvocation
)
;
sqlAdapter	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
}
}
public	Modifier	MethodDeclaration
String	SimpleName	SimpleType
[
]
showImageCaption	SimpleName	MethodDeclaration
(
)
{
String	SimpleName	SimpleType
imageCaptionIds	SimpleName	VariableDeclarationFragment
[
]
;
sqlAdapter	SimpleName	Assignment
=
new
SQLiteAdapter	SimpleName	SimpleType
(
mContext	SimpleName	ClassInstanceCreation
)
;
String	SimpleName	SimpleType
str	SimpleName	VariableDeclarationFragment
=
"Select dTitle from achievement_tb where version =0 order by ID ASC;"	StringLiteral	VariableDeclarationFragment
;
sqlAdapter	SimpleName	MethodInvocation
.
openToRead	SimpleName	MethodInvocation
(
)
;
Cursor	SimpleName	SimpleType
c	SimpleName	VariableDeclarationFragment
=
sqlAdapter	SimpleName	MethodInvocation
.
read	SimpleName	MethodInvocation
(
str	SimpleName	MethodInvocation
)
;
imageCaptionIds	SimpleName	ArrayAccess
[
c	SimpleName	MethodInvocation
.
getCount	SimpleName	MethodInvocation
(
)
]
;
sqlAdapter	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
return
imageCaptionIds	SimpleName	ReturnStatement
;
}
Intent	SimpleName	SimpleType
notificationIntent	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
this
,
RandomActivity	SimpleName	SimpleType
.
class
)
;
Intent	SimpleName	SimpleType
notificationIntent	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
this
,
HomeActivity	SimpleName	SimpleType
.
class
)
;
btn	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
OnClickListener	SimpleName	SimpleType
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
arg0	SimpleName	SingleVariableDeclaration
)
{
Log	SimpleName	MethodInvocation
.
d	SimpleName	MethodInvocation
(
"vkx"	StringLiteral	MethodInvocation
,
"clk insert"	StringLiteral	MethodInvocation
)
;
String	SimpleName	SimpleType
qq	SimpleName	VariableDeclarationFragment
=
"insert into users(id,name,password) values ('6','usrs','passs')"	StringLiteral	VariableDeclarationFragment
;
DataManager	SimpleName	SimpleType
dm	SimpleName	VariableDeclarationFragment
=
new
DataManager	SimpleName	SimpleType
(
this
)
;
dm	SimpleName	MethodInvocation
.
SqliteExecutenonquery	SimpleName	MethodInvocation
(
qq	SimpleName	MethodInvocation
)
;
Log	SimpleName	MethodInvocation
.
d	SimpleName	MethodInvocation
(
"vkx"	StringLiteral	MethodInvocation
,
"clk insert done"	StringLiteral	MethodInvocation
)
;
}
}
)
;
public	Modifier	MethodDeclaration
DataManager	SimpleName	MethodDeclaration
(
Context	SimpleName	SimpleType
cont	SimpleName	SingleVariableDeclaration
)
{
super
(
cont	SimpleName	SuperConstructorInvocation
,
DBname	SimpleName	SuperConstructorInvocation
,
null	NullLiteral	SuperConstructorInvocation
,
DBver	SimpleName	SuperConstructorInvocation
)
;
}
public	Modifier	TypeDeclaration
class
MainActivity	SimpleName	TypeDeclaration
extends
TabActivity	SimpleName	SimpleType
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
activity_main	SimpleName	QualifiedName
)
;
Resources	SimpleName	SimpleType
res	SimpleName	VariableDeclarationFragment
=
getResources	SimpleName	MethodInvocation
(
)
;
TabHost	SimpleName	SimpleType
tabHost	SimpleName	VariableDeclarationFragment
=
getTabHost	SimpleName	MethodInvocation
(
)
;
TabHost	SimpleName	QualifiedName
.
TabSpec	SimpleName	QualifiedName
spec	SimpleName	VariableDeclarationFragment
;
Intent	SimpleName	SimpleType
intent	SimpleName	VariableDeclarationFragment
;
intent	SimpleName	Assignment
=
new
Intent	SimpleName	SimpleType
(
)
.
setClass	SimpleName	MethodInvocation
(
this
,
Tab1	SimpleName	SimpleType
.
class
)
;
spec	SimpleName	Assignment
=
tabHost	SimpleName	MethodInvocation
.
newTabSpec	SimpleName	MethodInvocation
(
"Widget"	StringLiteral	MethodInvocation
)
.
setIndicator	SimpleName	MethodInvocation
(
"Cinema"	StringLiteral	MethodInvocation
,
res	SimpleName	MethodInvocation
.
getDrawable	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
drawable	SimpleName	QualifiedName
.
movies	SimpleName	QualifiedName
)
)
.
setContent	SimpleName	MethodInvocation
(
intent	SimpleName	MethodInvocation
)
;
tabHost	SimpleName	MethodInvocation
.
addTab	SimpleName	MethodInvocation
(
spec	SimpleName	MethodInvocation
)
;
intent	SimpleName	Assignment
=
new
Intent	SimpleName	SimpleType
(
)
.
setClass	SimpleName	MethodInvocation
(
this
,
Tab2	SimpleName	SimpleType
.
class
)
;
spec	SimpleName	Assignment
=
tabHost	SimpleName	MethodInvocation
.
newTabSpec	SimpleName	MethodInvocation
(
"Form"	StringLiteral	MethodInvocation
)
.
setIndicator	SimpleName	MethodInvocation
(
"Infos"	StringLiteral	MethodInvocation
,
res	SimpleName	MethodInvocation
.
getDrawable	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
drawable	SimpleName	QualifiedName
.
infos	SimpleName	QualifiedName
)
)
.
setContent	SimpleName	MethodInvocation
(
intent	SimpleName	MethodInvocation
)
;
tabHost	SimpleName	MethodInvocation
.
addTab	SimpleName	MethodInvocation
(
spec	SimpleName	MethodInvocation
)
;
tabHost	SimpleName	MethodInvocation
.
setCurrentTab	SimpleName	MethodInvocation
(
0	NumberLiteral	MethodInvocation
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
boolean
onCreateOptionsMenu	SimpleName	MethodDeclaration
(
Menu	SimpleName	SimpleType
menu	SimpleName	SingleVariableDeclaration
)
{
getMenuInflater	SimpleName	MethodInvocation
(
)
.
inflate	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
activity_main	SimpleName	QualifiedName
,
menu	SimpleName	MethodInvocation
)
;
return
true	BooleanLiteral	ReturnStatement
;
}
}
public	Modifier	TypeDeclaration
class
Tab1	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
private	Modifier	FieldDeclaration
MediaPlayer	SimpleName	SimpleType
mPlayer	SimpleName	VariableDeclarationFragment
=
null	NullLiteral	VariableDeclarationFragment
;
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
onglet1	SimpleName	QualifiedName
)
;
final	Modifier	VariableDeclarationStatement
int
sound11	SimpleName	VariableDeclarationFragment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
carjacker	SimpleName	QualifiedName
;
final	Modifier	VariableDeclarationStatement
int
sound12	SimpleName	VariableDeclarationFragment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
petitesoeur	SimpleName	QualifiedName
;
final	Modifier	VariableDeclarationStatement
int
sound13	SimpleName	VariableDeclarationFragment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
cracherlama	SimpleName	QualifiedName
;
final	Modifier	VariableDeclarationStatement
int
sound14	SimpleName	VariableDeclarationFragment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
maitresse	SimpleName	QualifiedName
;
final	Modifier	VariableDeclarationStatement
int
sound21	SimpleName	VariableDeclarationFragment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
gandalfen	SimpleName	QualifiedName
;
final	Modifier	VariableDeclarationStatement
int
sound22	SimpleName	VariableDeclarationFragment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
gandalf	SimpleName	QualifiedName
;
final	Modifier	VariableDeclarationStatement
int
sound23	SimpleName	VariableDeclarationFragment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
gollum	SimpleName	QualifiedName
;
final	Modifier	VariableDeclarationStatement
int
sound24	SimpleName	VariableDeclarationFragment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
gollumen	SimpleName	QualifiedName
;
final	Modifier	VariableDeclarationStatement
int
sound31	SimpleName	VariableDeclarationFragment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
pasdebraspasdechocolat	SimpleName	QualifiedName
;
final	Modifier	VariableDeclarationStatement
int
sound32	SimpleName	VariableDeclarationFragment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
sparta	SimpleName	QualifiedName
;
final	Modifier	VariableDeclarationStatement
int
sound33	SimpleName	VariableDeclarationFragment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
sabre	SimpleName	QualifiedName
;
final	Modifier	VariableDeclarationStatement
int
sound34	SimpleName	VariableDeclarationFragment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
darkvador	SimpleName	QualifiedName
;
final	Modifier	VariableDeclarationStatement
int
sound41	SimpleName	VariableDeclarationFragment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
back	SimpleName	QualifiedName
;
final	Modifier	VariableDeclarationStatement
int
sound42	SimpleName	VariableDeclarationFragment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
fightclub	SimpleName	QualifiedName
;
final	Modifier	VariableDeclarationStatement
int
sound43	SimpleName	VariableDeclarationFragment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
forrestgump	SimpleName	QualifiedName
;
final	Modifier	VariableDeclarationStatement
int
sound44	SimpleName	VariableDeclarationFragment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
iamyourfather	SimpleName	QualifiedName
;
final	Modifier	VariableDeclarationStatement
int
sound51	SimpleName	VariableDeclarationFragment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
loki	SimpleName	QualifiedName
;
final	Modifier	VariableDeclarationStatement
int
sound52	SimpleName	VariableDeclarationFragment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
dinercon1	SimpleName	QualifiedName
;
final	Modifier	VariableDeclarationStatement
int
sound53	SimpleName	VariableDeclarationFragment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
gollum	SimpleName	QualifiedName
;
final	Modifier	VariableDeclarationStatement
int
sound54	SimpleName	VariableDeclarationFragment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
gollum	SimpleName	QualifiedName
;
generateSoundOnButton	SimpleName	MethodInvocation
(
sound11	SimpleName	MethodInvocation
,
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
btn11	SimpleName	QualifiedName
)
;
generateSoundOnButton	SimpleName	MethodInvocation
(
sound12	SimpleName	MethodInvocation
,
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
btn12	SimpleName	QualifiedName
)
;
generateSoundOnButton	SimpleName	MethodInvocation
(
sound13	SimpleName	MethodInvocation
,
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
btn13	SimpleName	QualifiedName
)
;
generateSoundOnButton	SimpleName	MethodInvocation
(
sound14	SimpleName	MethodInvocation
,
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
btn14	SimpleName	QualifiedName
)
;
generateSoundOnButton	SimpleName	MethodInvocation
(
sound21	SimpleName	MethodInvocation
,
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
btn21	SimpleName	QualifiedName
)
;
generateSoundOnButton	SimpleName	MethodInvocation
(
sound22	SimpleName	MethodInvocation
,
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
btn22	SimpleName	QualifiedName
)
;
generateSoundOnButton	SimpleName	MethodInvocation
(
sound23	SimpleName	MethodInvocation
,
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
btn23	SimpleName	QualifiedName
)
;
generateSoundOnButton	SimpleName	MethodInvocation
(
sound24	SimpleName	MethodInvocation
,
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
btn24	SimpleName	QualifiedName
)
;
generateSoundOnButton	SimpleName	MethodInvocation
(
sound31	SimpleName	MethodInvocation
,
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
btn31	SimpleName	QualifiedName
)
;
generateSoundOnButton	SimpleName	MethodInvocation
(
sound32	SimpleName	MethodInvocation
,
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
btn32	SimpleName	QualifiedName
)
;
generateSoundOnButton	SimpleName	MethodInvocation
(
sound33	SimpleName	MethodInvocation
,
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
btn33	SimpleName	QualifiedName
)
;
generateSoundOnButton	SimpleName	MethodInvocation
(
sound34	SimpleName	MethodInvocation
,
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
btn34	SimpleName	QualifiedName
)
;
generateSoundOnButton	SimpleName	MethodInvocation
(
sound41	SimpleName	MethodInvocation
,
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
btn41	SimpleName	QualifiedName
)
;
generateSoundOnButton	SimpleName	MethodInvocation
(
sound42	SimpleName	MethodInvocation
,
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
btn42	SimpleName	QualifiedName
)
;
generateSoundOnButton	SimpleName	MethodInvocation
(
sound43	SimpleName	MethodInvocation
,
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
btn43	SimpleName	QualifiedName
)
;
generateSoundOnButton	SimpleName	MethodInvocation
(
sound44	SimpleName	MethodInvocation
,
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
btn44	SimpleName	QualifiedName
)
;
generateSoundOnButton	SimpleName	MethodInvocation
(
sound51	SimpleName	MethodInvocation
,
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
btn51	SimpleName	QualifiedName
)
;
generateSoundOnButton	SimpleName	MethodInvocation
(
sound52	SimpleName	MethodInvocation
,
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
btn52	SimpleName	QualifiedName
)
;
generateSoundOnButton	SimpleName	MethodInvocation
(
sound53	SimpleName	MethodInvocation
,
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
btn53	SimpleName	QualifiedName
)
;
generateSoundOnButton	SimpleName	MethodInvocation
(
sound54	SimpleName	MethodInvocation
,
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
btn54	SimpleName	QualifiedName
)
;
}
public	Modifier	MethodDeclaration
void
generateSoundOnButton	SimpleName	MethodDeclaration
(
final	Modifier	SingleVariableDeclaration
int
soundId	SimpleName	SingleVariableDeclaration
,
int
idButton	SimpleName	SingleVariableDeclaration
)
{
final	Modifier	VariableDeclarationStatement
ImageButton	SimpleName	SimpleType
btn	SimpleName	VariableDeclarationFragment
=
(
ImageButton	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
idButton	SimpleName	MethodInvocation
)
;
btn	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
OnClickListener	SimpleName	SimpleType
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
playSound	SimpleName	MethodInvocation
(
soundId	SimpleName	MethodInvocation
)
;
}
}
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onPause	SimpleName	MethodDeclaration
(
)
{
super
.
onPause	SimpleName	SuperMethodInvocation
(
)
;
if
(
mPlayer	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
{
mPlayer	SimpleName	MethodInvocation
.
stop	SimpleName	MethodInvocation
(
)
;
mPlayer	SimpleName	MethodInvocation
.
release	SimpleName	MethodInvocation
(
)
;
}
}
private	Modifier	MethodDeclaration
void
playSound	SimpleName	MethodDeclaration
(
int
resId	SimpleName	SingleVariableDeclaration
)
{
if
(
mPlayer	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
{
mPlayer	SimpleName	MethodInvocation
.
stop	SimpleName	MethodInvocation
(
)
;
mPlayer	SimpleName	MethodInvocation
.
release	SimpleName	MethodInvocation
(
)
;
}
mPlayer	SimpleName	Assignment
=
MediaPlayer	SimpleName	MethodInvocation
.
create	SimpleName	MethodInvocation
(
this
,
resId	SimpleName	MethodInvocation
)
;
mPlayer	SimpleName	MethodInvocation
.
start	SimpleName	MethodInvocation
(
)
;
}
}
public	Modifier	TypeDeclaration
class
Tab2	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
onglet2	SimpleName	QualifiedName
)
;
}
}
mPlayer	SimpleName	MethodInvocation
.
stop	SimpleName	MethodInvocation
(
)
public	Modifier	TypeDeclaration
class
MainQuiz	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
implements
OnCheckedChangeListener	SimpleName	SimpleType
,
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
RadioGroup	SimpleName	QualifiedName
.
OnCheckedChangeListener	SimpleName	QualifiedName
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
activity_main_quiz	SimpleName	QualifiedName
)
;
(
(
RadioGroup	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
radio_group	SimpleName	QualifiedName
)
)
.
setOnCheckedChangeListener	SimpleName	MethodInvocation
(
this
)
;
}
public	Modifier	MethodDeclaration
void
onCheckedChanged	SimpleName	MethodDeclaration
(
RadioGroup	SimpleName	SimpleType
radioGroup	SimpleName	SingleVariableDeclaration
,
int
checkedId	SimpleName	SingleVariableDeclaration
)
{
String	SimpleName	SimpleType
numeral	SimpleName	VariableDeclarationFragment
=
null	NullLiteral	VariableDeclarationFragment
;
if
(
checkedId	SimpleName	InfixExpression
==
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button1	SimpleName	QualifiedName
)
{
numeral	SimpleName	Assignment
=
"Nope, try again!"	StringLiteral	Assignment
;
}
else
if
(
checkedId	SimpleName	InfixExpression
==
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button2	SimpleName	QualifiedName
)
{
numeral	SimpleName	Assignment
=
"Nope, try again!"	StringLiteral	Assignment
;
}
else
if
(
checkedId	SimpleName	InfixExpression
==
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button3	SimpleName	QualifiedName
)
{
numeral	SimpleName	Assignment
=
"Nope, try again!"	StringLiteral	Assignment
;
}
else
if
(
checkedId	SimpleName	InfixExpression
==
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button4	SimpleName	QualifiedName
)
{
numeral	SimpleName	Assignment
=
"Nope, try again!"	StringLiteral	Assignment
;
}
else
if
(
checkedId	SimpleName	InfixExpression
==
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button5	SimpleName	QualifiedName
)
{
numeral	SimpleName	Assignment
=
"Nope, try again!"	StringLiteral	Assignment
;
}
else
if
(
checkedId	SimpleName	InfixExpression
==
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button6	SimpleName	QualifiedName
)
{
numeral	SimpleName	Assignment
=
"Nope, try again!"	StringLiteral	Assignment
;
}
else
if
(
checkedId	SimpleName	InfixExpression
==
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button7	SimpleName	QualifiedName
)
{
numeral	SimpleName	Assignment
=
"Nope, try again!"	StringLiteral	Assignment
;
}
else
if
(
checkedId	SimpleName	InfixExpression
==
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button8	SimpleName	QualifiedName
)
{
numeral	SimpleName	Assignment
=
"Nope, try again!"	StringLiteral	Assignment
;
}
else
if
(
checkedId	SimpleName	InfixExpression
==
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button9	SimpleName	QualifiedName
)
{
numeral	SimpleName	Assignment
=
"Nope, try again!"	StringLiteral	Assignment
;
}
else
if
(
checkedId	SimpleName	InfixExpression
==
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button10	SimpleName	QualifiedName
)
{
Intent	SimpleName	SimpleType
myIntent	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
MainQuiz	SimpleName	ThisExpression
.
this
,
CorrectAnswer	SimpleName	SimpleType
.
class
)
;
MainQuiz	SimpleName	ThisExpression
.
this
.
startActivity	SimpleName	MethodInvocation
(
myIntent	SimpleName	MethodInvocation
)
;
}
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
getApplicationContext	SimpleName	MethodInvocation
(
)
,
""	StringLiteral	InfixExpression
+
numeral	SimpleName	InfixExpression
+
""	StringLiteral	InfixExpression
,
Toast	SimpleName	QualifiedName
.
LENGTH_SHORT	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
}
logoImage	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
this
)
;
package
com	SimpleName	QualifiedName
.
hightrax	SimpleName	QualifiedName
.
mrgod	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Activity	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
View	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
ImageView	SimpleName	QualifiedName
;
protected	Modifier	MethodDeclaration
void
onPostExecute	SimpleName	MethodDeclaration
(
String	SimpleName	SimpleType
file_url	SimpleName	SingleVariableDeclaration
)
{
pDialog	SimpleName	MethodInvocation
.
dismiss	SimpleName	MethodInvocation
(
)
;
runOnUiThread	SimpleName	MethodInvocation
(
new
Runnable	SimpleName	SimpleType
(
)
{
public	Modifier	MethodDeclaration
void
run	SimpleName	MethodDeclaration
(
)
{
String	SimpleName	SimpleType
status	SimpleName	VariableDeclarationFragment
=
nearPlaces	SimpleName	QualifiedName
.
status	SimpleName	QualifiedName
;
if
(
status	SimpleName	MethodInvocation
.
equals	SimpleName	MethodInvocation
(
"OK"	StringLiteral	MethodInvocation
)
)
{
if
(
nearPlaces	SimpleName	QualifiedName
.
results	SimpleName	QualifiedName
!=
null	NullLiteral	InfixExpression
)
{
for
(
Place	SimpleName	SimpleType
p	SimpleName	SingleVariableDeclaration
:
nearPlaces	SimpleName	QualifiedName
.
results	SimpleName	QualifiedName
)
{
public	Modifier	TypeDeclaration
class
MainActivity	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
@
Override	SimpleName	MarkerAnnotation
protected	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
getAnswerButton	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
arg0	SimpleName	SingleVariableDeclaration
)
{
Random	SimpleName	SimpleType
randomGenerator	SimpleName	VariableDeclarationFragment
=
new
Random	SimpleName	SimpleType
(
)
;
int
randomNumber2	SimpleName	VariableDeclarationFragment
=
randomGenerator	SimpleName	MethodInvocation
.
nextInt	SimpleName	MethodInvocation
(
99	NumberLiteral	MethodInvocation
)
;
int
randomNumber	SimpleName	VariableDeclarationFragment
=
randomGenerator	SimpleName	MethodInvocation
.
nextInt	SimpleName	MethodInvocation
(
99	NumberLiteral	MethodInvocation
)
;
String	SimpleName	SimpleType
number	SimpleName	VariableDeclarationFragment
=
""	StringLiteral	VariableDeclarationFragment
;
String	SimpleName	SimpleType
number2	SimpleName	VariableDeclarationFragment
=
""	StringLiteral	VariableDeclarationFragment
;
String	SimpleName	SimpleType
jtext	SimpleName	VariableDeclarationFragment
=
" Times "	StringLiteral	VariableDeclarationFragment
;
number2	SimpleName	Assignment
=
Integer	SimpleName	MethodInvocation
.
toString	SimpleName	MethodInvocation
(
randomNumber2	SimpleName	MethodInvocation
)
;
number	SimpleName	Assignment
=
Integer	SimpleName	MethodInvocation
.
toString	SimpleName	MethodInvocation
(
randomNumber	SimpleName	MethodInvocation
)
;
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
answerLabel	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
jtext	SimpleName	MethodInvocation
)
;
answerLabel1	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
number2	SimpleName	MethodInvocation
)
;
answerLabel2	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
number	SimpleName	MethodInvocation
)
;
String	SimpleName	SimpleType
content	SimpleName	VariableDeclarationFragment
=
enteredNumber	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
;
if
(
content	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
{
int
anInt	SimpleName	VariableDeclarationFragment
=
Integer	SimpleName	MethodInvocation
.
parseInt	SimpleName	MethodInvocation
(
content	SimpleName	MethodInvocation
)
;
int
result	SimpleName	VariableDeclarationFragment
=
randomNumber2	SimpleName	InfixExpression
*
randomNumber	SimpleName	InfixExpression
;
if
(
anInt	SimpleName	InfixExpression
==
result	SimpleName	InfixExpression
)
{
Context	SimpleName	SimpleType
context	SimpleName	VariableDeclarationFragment
=
getApplicationContext	SimpleName	MethodInvocation
(
)
;
CharSequence	SimpleName	SimpleType
text	SimpleName	VariableDeclarationFragment
=
"That's correct!!"	StringLiteral	VariableDeclarationFragment
;
int
duration	SimpleName	VariableDeclarationFragment
=
Toast	SimpleName	QualifiedName
.
LENGTH_SHORT	SimpleName	QualifiedName
;
Toast	SimpleName	SimpleType
toast	SimpleName	VariableDeclarationFragment
=
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
context	SimpleName	MethodInvocation
,
text	SimpleName	MethodInvocation
,
duration	SimpleName	MethodInvocation
)
;
toast	SimpleName	MethodInvocation
.
show	SimpleName	MethodInvocation
(
)
;
}
else
{
Context	SimpleName	SimpleType
context	SimpleName	VariableDeclarationFragment
=
getApplicationContext	SimpleName	MethodInvocation
(
)
;
CharSequence	SimpleName	SimpleType
text	SimpleName	VariableDeclarationFragment
=
"That's not correct"	StringLiteral	VariableDeclarationFragment
;
int
duration	SimpleName	VariableDeclarationFragment
=
Toast	SimpleName	QualifiedName
.
LENGTH_SHORT	SimpleName	QualifiedName
;
Toast	SimpleName	SimpleType
toast	SimpleName	VariableDeclarationFragment
=
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
context	SimpleName	MethodInvocation
,
text	SimpleName	MethodInvocation
,
duration	SimpleName	MethodInvocation
)
;
toast	SimpleName	MethodInvocation
.
show	SimpleName	MethodInvocation
(
)
;
}
lastAnswer	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
content	SimpleName	MethodInvocation
)
;
}
}
}
)
;
}
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
activity_main	SimpleName	QualifiedName
)
;
final	Modifier	VariableDeclarationStatement
TextView	SimpleName	SimpleType
lastAnswer	SimpleName	VariableDeclarationFragment
=
(
TextView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
textView5	SimpleName	QualifiedName
)
;
final	Modifier	VariableDeclarationStatement
TextView	SimpleName	SimpleType
answerLabel	SimpleName	VariableDeclarationFragment
=
(
TextView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
textView1	SimpleName	QualifiedName
)
;
final	Modifier	VariableDeclarationStatement
TextView	SimpleName	SimpleType
answerLabel1	SimpleName	VariableDeclarationFragment
=
(
TextView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
textView2	SimpleName	QualifiedName
)
;
final	Modifier	VariableDeclarationStatement
TextView	SimpleName	SimpleType
answerLabel2	SimpleName	VariableDeclarationFragment
=
(
TextView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
textView3	SimpleName	QualifiedName
)
;
final	Modifier	VariableDeclarationStatement
EditText	SimpleName	SimpleType
enteredNumber	SimpleName	VariableDeclarationFragment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
editText1	SimpleName	QualifiedName
)
;
Button	SimpleName	SimpleType
getAnswerButton	SimpleName	VariableDeclarationFragment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button1	SimpleName	QualifiedName
)
;
maze	SimpleName	MethodInvocation
.
newMaze	SimpleName	MethodInvocation
(
root	SimpleName	MethodInvocation
,
cells	SimpleName	MethodInvocation
,
dists	SimpleName	MethodInvocation
,
startx	SimpleName	MethodInvocation
,
starty	SimpleName	MethodInvocation
)
;
maze	SimpleName	Assignment
=
mz	SimpleName	MethodInvocation
(
maze	SimpleName	MethodInvocation
)
mazebuilder	SimpleName	MethodInvocation
.
build	SimpleName	MethodInvocation
(
)
maze	SimpleName	MethodInvocation
.
build	SimpleName	MethodInvocation
(
)
private	Modifier	MethodDeclaration
void
build	SimpleName	MethodDeclaration
(
int
skill	SimpleName	SingleVariableDeclaration
)
{
state	SimpleName	Assignment
=
STATE_GENERATING	SimpleName	Assignment
;
redraw	SimpleName	MethodInvocation
(
)
;
switch
(
method	SimpleName	SwitchStatement
)
{
case
1	NumberLiteral	SwitchCase
:
mazebuilder	SimpleName	Assignment
=
new
MazeBuilderPrim	SimpleName	SimpleType
(
)
;
break
;
case
0	NumberLiteral	SwitchCase
:
default
:
mazebuilder	SimpleName	Assignment
=
new
MazeBuilder	SimpleName	SimpleType
(
)
;
break
;
}
mazew	SimpleName	Assignment
=
skill_x	SimpleName	ArrayAccess
[
skill	SimpleName	ArrayAccess
]
;
mazeh	SimpleName	Assignment
=
skill_y	SimpleName	ArrayAccess
[
skill	SimpleName	ArrayAccess
]
;
int
roomcount	SimpleName	VariableDeclarationFragment
=
skill_rooms	SimpleName	ArrayAccess
[
skill	SimpleName	ArrayAccess
]
;
mazebuilder	SimpleName	MethodInvocation
.
build	SimpleName	MethodInvocation
(
this
,
mazew	SimpleName	MethodInvocation
,
mazeh	SimpleName	MethodInvocation
,
roomcount	SimpleName	MethodInvocation
,
skill_partct	SimpleName	ArrayAccess
[
skill	SimpleName	ArrayAccess
]
)
;
}
mazebuilder	SimpleName	Assignment
=
new
MazeBuilder	SimpleName	SimpleType
(
)
mazebuilder	SimpleName	Assignment
=
new
MazeBuilder	SimpleName	SimpleType
(
this
)
public	Modifier	TypeDeclaration
class
DataBaseAdapter	SimpleName	TypeDeclaration
{
public	Modifier	MethodDeclaration
DataBaseAdapter	SimpleName	MethodDeclaration
(
Context	SimpleName	SimpleType
context	SimpleName	SingleVariableDeclaration
)
{
contextApp	SimpleName	Assignment
=
context	SimpleName	Assignment
;
myAlarmDB	SimpleName	Assignment
=
new
MyAlarmDatabase	SimpleName	SimpleType
(
context	SimpleName	ClassInstanceCreation
,
DATABASE_NAME	SimpleName	ClassInstanceCreation
,
null	NullLiteral	ClassInstanceCreation
,
DATABASE_VERSION	SimpleName	ClassInstanceCreation
)
;
}
public	Modifier	MethodDeclaration
DataBaseAdapter	SimpleName	SimpleType
open	SimpleName	MethodDeclaration
(
)
throws
SQLException	SimpleName	SimpleType
{
try
{
db	SimpleName	Assignment
=
myAlarmDB	SimpleName	MethodInvocation
.
getWritableDatabase	SimpleName	MethodInvocation
(
)
;
}
catch
(
SQLiteException	SimpleName	SimpleType
ex	SimpleName	SingleVariableDeclaration
)
{
db	SimpleName	Assignment
=
myAlarmDB	SimpleName	MethodInvocation
.
getReadableDatabase	SimpleName	MethodInvocation
(
)
;
}
return
this
;
}
}
package
com	SimpleName	QualifiedName
.
example	SimpleName	QualifiedName
.
learn	SimpleName	QualifiedName
.
tam	SimpleName	QualifiedName
;
import
java	SimpleName	QualifiedName
.
util	SimpleName	QualifiedName
.
Random	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
TextView	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
ToggleButton	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Activity	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
graphics	SimpleName	QualifiedName
.
Color	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
text	SimpleName	QualifiedName
.
InputType	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
Gravity	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
View	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
Button	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
EditText	SimpleName	QualifiedName
;
import
com	SimpleName	QualifiedName
.
rosaloves	SimpleName	QualifiedName
.
bitlyj	SimpleName	QualifiedName
.
Url	SimpleName	QualifiedName
;
import
static
com	SimpleName	QualifiedName
.
rosaloves	SimpleName	QualifiedName
.
bitlyj	SimpleName	QualifiedName
.
Bitly	SimpleName	QualifiedName
.
*
;
Url	SimpleName	SimpleType
url	SimpleName	VariableDeclarationFragment
=
as	SimpleName	MethodInvocation
(
"bitlyapidemo"	StringLiteral	MethodInvocation
,
"MY_API_KEY"	StringLiteral	MethodInvocation
)
.
call	SimpleName	MethodInvocation
(
shorten	SimpleName	MethodInvocation
(
"http://rosaloves.com/stories/view/13"	StringLiteral	MethodInvocation
)
)
;
String	SimpleName	SimpleType
ul	SimpleName	VariableDeclarationFragment
=
url	SimpleName	MethodInvocation
.
getShortUrl	SimpleName	MethodInvocation
(
)
;
System	SimpleName	QualifiedName
.
out	SimpleName	QualifiedName
.
println	SimpleName	MethodInvocation
(
"art bitfly:"	StringLiteral	InfixExpression
+
url	SimpleName	InfixExpression
)
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Activity	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
Intent	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Activity	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
GameView	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
protected	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
game	SimpleName	QualifiedName
)
;
}
}
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
Menu	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
View	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
Button	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
MainActivity	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
@
Override	SimpleName	MarkerAnnotation
protected	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
activity_main	SimpleName	QualifiedName
)
;
buttonClickMethod	SimpleName	MethodInvocation
(
)
;
}
private	Modifier	MethodDeclaration
void
buttonClickMethod	SimpleName	MethodDeclaration
(
)
{
Button	SimpleName	SimpleType
start	SimpleName	VariableDeclarationFragment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
startB	SimpleName	QualifiedName
)
;
start	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
OnClickListener	SimpleName	SimpleType
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
Intent	SimpleName	SimpleType
i	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
v	SimpleName	MethodInvocation
.
getContext	SimpleName	MethodInvocation
(
)
,
GameView	SimpleName	SimpleType
.
class
)
;
startActivityForResult	SimpleName	MethodInvocation
(
i	SimpleName	MethodInvocation
,
0	NumberLiteral	MethodInvocation
)
;
}
}
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
boolean
onCreateOptionsMenu	SimpleName	MethodDeclaration
(
Menu	SimpleName	SimpleType
menu	SimpleName	SingleVariableDeclaration
)
{
getMenuInflater	SimpleName	MethodInvocation
(
)
.
inflate	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
menu	SimpleName	QualifiedName
.
activity_main	SimpleName	QualifiedName
,
menu	SimpleName	MethodInvocation
)
;
return
true	BooleanLiteral	ReturnStatement
;
}
}
package
com	SimpleName	QualifiedName
.
example	SimpleName	QualifiedName
.
coloroblind	SimpleName	QualifiedName
;
public	Modifier	MethodDeclaration
Cursor	SimpleName	SimpleType
getData	SimpleName	MethodDeclaration
(
)
{
String	SimpleName	SimpleType
[
]
columns	SimpleName	VariableDeclarationFragment
=
new
String	SimpleName	SimpleType
[
]
{
KEY_ROWID	SimpleName	ArrayInitializer
,
KEY_NAME	SimpleName	ArrayInitializer
,
KEY_TEL	SimpleName	ArrayInitializer
,
KEY_EMAIL	SimpleName	ArrayInitializer
,
KEY_COMMENTS	SimpleName	ArrayInitializer
}
;
Cursor	SimpleName	SimpleType
c	SimpleName	VariableDeclarationFragment
=
ourDatabase	SimpleName	MethodInvocation
.
query	SimpleName	MethodInvocation
(
DATABASE_TABLE	SimpleName	MethodInvocation
,
columns	SimpleName	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
KEY_NAME	SimpleName	InfixExpression
+
" ASC"	StringLiteral	InfixExpression
,
null	NullLiteral	MethodInvocation
)
;
if
(
c	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
{
c	SimpleName	MethodInvocation
.
moveToFirst	SimpleName	MethodInvocation
(
)
;
}
return
c	SimpleName	ReturnStatement
;
}
DBHandler	SimpleName	SimpleType
search	SimpleName	VariableDeclarationFragment
=
new
DBHandler	SimpleName	SimpleType
(
this
,
null	NullLiteral	ClassInstanceCreation
,
null	NullLiteral	ClassInstanceCreation
)
;
search	SimpleName	MethodInvocation
.
open	SimpleName	MethodInvocation
(
)
;
Cursor	SimpleName	SimpleType
cursor	SimpleName	VariableDeclarationFragment
=
search	SimpleName	MethodInvocation
.
getData	SimpleName	MethodInvocation
(
)
;
search	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
startManagingCursor	SimpleName	MethodInvocation
(
cursor	SimpleName	MethodInvocation
)
;
import
java	SimpleName	QualifiedName
.
util	SimpleName	QualifiedName
.
Calendar	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
annotation	SimpleName	QualifiedName
.
SuppressLint	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
TextView	SimpleName	QualifiedName
;
@
SuppressLint	SimpleName	SingleMemberAnnotation
(
"NewApi"	StringLiteral	SingleMemberAnnotation
)
public	Modifier	TypeDeclaration
class
DatePickerFragment	SimpleName	TypeDeclaration
extends
DialogFragment	SimpleName	SimpleType
implements
DatePickerDialog	SimpleName	QualifiedName
.
OnDateSetListener	SimpleName	QualifiedName
{
TextView	SimpleName	SimpleType
mTextView	SimpleName	VariableDeclarationFragment
;
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
View	SimpleName	SimpleType
onCreateView	SimpleName	MethodDeclaration
(
LayoutInflater	SimpleName	SimpleType
inflater	SimpleName	SingleVariableDeclaration
,
ViewGroup	SimpleName	SimpleType
container	SimpleName	SingleVariableDeclaration
,
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
View	SimpleName	SimpleType
view	SimpleName	VariableDeclarationFragment
=
inflater	SimpleName	MethodInvocation
.
inflate	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
activity_register_screen	SimpleName	QualifiedName
,
container	SimpleName	MethodInvocation
,
false	BooleanLiteral	MethodInvocation
)
;
mTextView	SimpleName	Assignment
=
(
TextView	SimpleName	SimpleType
)
view	SimpleName	MethodInvocation
.
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
tvDate	SimpleName	QualifiedName
)
;
return
view	SimpleName	ReturnStatement
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
Dialog	SimpleName	SimpleType
onCreateDialog	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
final	Modifier	VariableDeclarationStatement
Calendar	SimpleName	SimpleType
c	SimpleName	VariableDeclarationFragment
=
Calendar	SimpleName	MethodInvocation
.
getInstance	SimpleName	MethodInvocation
(
)
;
int
year	SimpleName	VariableDeclarationFragment
=
c	SimpleName	MethodInvocation
.
get	SimpleName	MethodInvocation
(
Calendar	SimpleName	QualifiedName
.
YEAR	SimpleName	QualifiedName
)
;
int
month	SimpleName	VariableDeclarationFragment
=
c	SimpleName	MethodInvocation
.
get	SimpleName	MethodInvocation
(
Calendar	SimpleName	QualifiedName
.
MONTH	SimpleName	QualifiedName
)
;
int
day	SimpleName	VariableDeclarationFragment
=
c	SimpleName	MethodInvocation
.
get	SimpleName	MethodInvocation
(
Calendar	SimpleName	QualifiedName
.
DAY_OF_MONTH	SimpleName	QualifiedName
)
;
return
new
DatePickerDialog	SimpleName	SimpleType
(
getActivity	SimpleName	MethodInvocation
(
)
,
this
,
year	SimpleName	ClassInstanceCreation
,
month	SimpleName	ClassInstanceCreation
,
day	SimpleName	ClassInstanceCreation
)
;
}
public	Modifier	MethodDeclaration
void
onDateSet	SimpleName	MethodDeclaration
(
DatePicker	SimpleName	SimpleType
view	SimpleName	SingleVariableDeclaration
,
int
year	SimpleName	SingleVariableDeclaration
,
int
month	SimpleName	SingleVariableDeclaration
,
int
day	SimpleName	SingleVariableDeclaration
)
{
int
syear	SimpleName	VariableDeclarationFragment
=
year	SimpleName	VariableDeclarationFragment
;
int
smonth	SimpleName	VariableDeclarationFragment
=
month	SimpleName	VariableDeclarationFragment
;
int
sday	SimpleName	VariableDeclarationFragment
=
day	SimpleName	VariableDeclarationFragment
;
mTextView	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
new
StringBuilder	SimpleName	SimpleType
(
)
.
append	SimpleName	MethodInvocation
(
smonth	SimpleName	InfixExpression
+
1	NumberLiteral	InfixExpression
)
.
append	SimpleName	MethodInvocation
(
"-"	StringLiteral	MethodInvocation
)
.
append	SimpleName	MethodInvocation
(
sday	SimpleName	MethodInvocation
)
.
append	SimpleName	MethodInvocation
(
"-"	StringLiteral	MethodInvocation
)
.
append	SimpleName	MethodInvocation
(
syear	SimpleName	MethodInvocation
)
.
append	SimpleName	MethodInvocation
(
" "	StringLiteral	MethodInvocation
)
)
;
}
}
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
DatePickerDialog	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Dialog	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
DialogFragment	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
LayoutInflater	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
View	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
ViewGroup	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
DatePicker	SimpleName	QualifiedName
;
String	SimpleName	SimpleType
size	SimpleName	VariableDeclarationFragment
=
parser	SimpleName	MethodInvocation
.
getValue	SimpleName	MethodInvocation
(
e	SimpleName	MethodInvocation
,
parser	SimpleName	QualifiedName
.
KEY_FileSizeInByte	SimpleName	QualifiedName
)
;
Log	SimpleName	MethodInvocation
.
i	SimpleName	MethodInvocation
(
"menuItems"	StringLiteral	MethodInvocation
,
size	SimpleName	MethodInvocation
)
;
try
{
int
s	SimpleName	VariableDeclarationFragment
=
Integer	SimpleName	MethodInvocation
.
parseInt	SimpleName	MethodInvocation
(
size	SimpleName	MethodInvocation
)
;
Log	SimpleName	MethodInvocation
.
i	SimpleName	MethodInvocation
(
"s"	StringLiteral	MethodInvocation
,
getString	SimpleName	MethodInvocation
(
s	SimpleName	MethodInvocation
)
)
;
}
catch
(
Exception	SimpleName	SimpleType
e1	SimpleName	SingleVariableDeclaration
)
{
Log	SimpleName	MethodInvocation
.
i	SimpleName	MethodInvocation
(
"error"	StringLiteral	MethodInvocation
,
e1	SimpleName	MethodInvocation
.
getMessage	SimpleName	MethodInvocation
(
)
)
;
}
Integer	SimpleName	MethodInvocation
.
valueOf	SimpleName	MethodInvocation
(
str	SimpleName	MethodInvocation
)
;
vi	SimpleName	MethodInvocation
.
setTag	SimpleName	MethodInvocation
(
holder	SimpleName	MethodInvocation
)
;
}
View	SimpleName	SimpleType
vi	SimpleName	VariableDeclarationFragment
=
convertView	SimpleName	VariableDeclarationFragment
;
holder	SimpleName	QualifiedName
.
image	SimpleName	QualifiedName
.
setImageBitmap	SimpleName	MethodInvocation
(
bm	SimpleName	MethodInvocation
)
;
holder	SimpleName	QualifiedName
.
button	SimpleName	QualifiedName
.
setOnClickListener	SimpleName	MethodInvocation
(
new
OnClickListener	SimpleName	SimpleType
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
arg0	SimpleName	SingleVariableDeclaration
)
{
String	SimpleName	SimpleType
root	SimpleName	VariableDeclarationFragment
=
Environment	SimpleName	MethodInvocation
.
getExternalStorageDirectory	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
;
File	SimpleName	SimpleType
myDir	SimpleName	VariableDeclarationFragment
=
new
File	SimpleName	SimpleType
(
root	SimpleName	InfixExpression
+
"/saved_images"	StringLiteral	InfixExpression
)
;
if
(
!
myDir	SimpleName	MethodInvocation
.
exists	SimpleName	MethodInvocation
(
)
)
{
myDir	SimpleName	MethodInvocation
.
mkdirs	SimpleName	MethodInvocation
(
)
;
}
bm	SimpleName	Assignment
=
BitmapFactory	SimpleName	MethodInvocation
.
decodeResource	SimpleName	MethodInvocation
(
mContext	SimpleName	MethodInvocation
.
getResources	SimpleName	MethodInvocation
(
)
,
images	SimpleName	ArrayAccess
[
i	SimpleName	ArrayAccess
]
)
;
SharedPreferences	SimpleName	SimpleType
savedNumber	SimpleName	VariableDeclarationFragment
=
getSharedPreferences	SimpleName	MethodInvocation
(
PREFS_NAME	SimpleName	MethodInvocation
,
0	NumberLiteral	MethodInvocation
)
;
int
lastSavedNumber	SimpleName	VariableDeclarationFragment
=
savedNumber	SimpleName	MethodInvocation
.
getInt	SimpleName	MethodInvocation
(
"lastsavednumber"	StringLiteral	MethodInvocation
,
0	NumberLiteral	MethodInvocation
)
;
lastSavedNumber	SimpleName	PostfixExpression
++
;
String	SimpleName	SimpleType
fname	SimpleName	VariableDeclarationFragment
=
"Image-"	StringLiteral	InfixExpression
+
lastSavedNumber	SimpleName	InfixExpression
+
".png"	StringLiteral	InfixExpression
;
File	SimpleName	SimpleType
file	SimpleName	VariableDeclarationFragment
=
new
File	SimpleName	SimpleType
(
myDir	SimpleName	ClassInstanceCreation
,
fname	SimpleName	ClassInstanceCreation
)
;
if
(
file	SimpleName	MethodInvocation
.
exists	SimpleName	MethodInvocation
(
)
)
{
file	SimpleName	MethodInvocation
.
delete	SimpleName	MethodInvocation
(
)
;
}
try
{
FileOutputStream	SimpleName	SimpleType
out	SimpleName	VariableDeclarationFragment
=
new
FileOutputStream	SimpleName	SimpleType
(
file	SimpleName	ClassInstanceCreation
)
;
bm	SimpleName	MethodInvocation
.
compress	SimpleName	MethodInvocation
(
Bitmap	SimpleName	QualifiedName
.
CompressFormat	SimpleName	QualifiedName
.
JPEG	SimpleName	QualifiedName
,
90	NumberLiteral	MethodInvocation
,
out	SimpleName	MethodInvocation
)
;
out	SimpleName	MethodInvocation
.
flush	SimpleName	MethodInvocation
(
)
;
out	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
mContext	SimpleName	MethodInvocation
,
"Saved"	StringLiteral	MethodInvocation
,
Toast	SimpleName	QualifiedName
.
LENGTH_LONG	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
}
catch
(
Exception	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
SharedPreferences	SimpleName	SimpleType
saveNumber	SimpleName	VariableDeclarationFragment
=
getApplicationContext	SimpleName	MethodInvocation
(
)
.
getSharedPreferences	SimpleName	MethodInvocation
(
PREFS_NAME	SimpleName	MethodInvocation
,
0	NumberLiteral	MethodInvocation
)
;
SharedPreferences	SimpleName	QualifiedName
.
Editor	SimpleName	QualifiedName
editorset	SimpleName	VariableDeclarationFragment
=
saveNumber	SimpleName	MethodInvocation
.
edit	SimpleName	MethodInvocation
(
)
;
editorset	SimpleName	MethodInvocation
.
putInt	SimpleName	MethodInvocation
(
"lastsavednumber"	StringLiteral	MethodInvocation
,
lastSavedNumber	SimpleName	MethodInvocation
)
;
editorset	SimpleName	MethodInvocation
.
commit	SimpleName	MethodInvocation
(
)
;
vi	SimpleName	MethodInvocation
.
setTag	SimpleName	MethodInvocation
(
holder	SimpleName	MethodInvocation
)
;
}
else
holder	SimpleName	Assignment
=
(
ViewHolder	SimpleName	SimpleType
)
vi	SimpleName	MethodInvocation
.
getTag	SimpleName	MethodInvocation
(
)
;
holder	SimpleName	QualifiedName
.
text	SimpleName	QualifiedName
.
setText	SimpleName	MethodInvocation
(
name	SimpleName	ArrayAccess
[
itemPos	SimpleName	ArrayAccess
]
)
;
final	Modifier	FieldDeclaration
int
stub_id	SimpleName	VariableDeclarationFragment
=
images	SimpleName	ArrayAccess
[
itemPos	SimpleName	ArrayAccess
]
;
holder	SimpleName	QualifiedName
.
image	SimpleName	QualifiedName
.
setImageResource	SimpleName	MethodInvocation
(
stub_id	SimpleName	MethodInvocation
)
;
return
vi	SimpleName	ReturnStatement
;
}
final	Modifier	VariableDeclarationStatement
ViewHolder	SimpleName	SimpleType
holder	SimpleName	VariableDeclarationFragment
;
if
(
convertView	SimpleName	InfixExpression
==
null	NullLiteral	InfixExpression
)
{
vi	SimpleName	Assignment
=
inflater	SimpleName	MethodInvocation
.
inflate	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
gallery_items	SimpleName	QualifiedName
,
null	NullLiteral	MethodInvocation
)
;
holder	SimpleName	Assignment
=
new
ViewHolder	SimpleName	SimpleType
(
)
;
holder	SimpleName	QualifiedName
.
text	SimpleName	QualifiedName
=
(
TextView	SimpleName	SimpleType
)
vi	SimpleName	MethodInvocation
.
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
textView1	SimpleName	QualifiedName
)
;
holder	SimpleName	QualifiedName
.
image	SimpleName	QualifiedName
=
(
ImageView	SimpleName	SimpleType
)
vi	SimpleName	MethodInvocation
.
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
image	SimpleName	QualifiedName
)
;
holder	SimpleName	QualifiedName
.
button	SimpleName	QualifiedName
=
(
Button	SimpleName	SimpleType
)
vi	SimpleName	MethodInvocation
.
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button_save	SimpleName	QualifiedName
)
;
bm	SimpleName	Assignment
=
BitmapFactory	SimpleName	MethodInvocation
.
decodeResource	SimpleName	MethodInvocation
(
mContext	SimpleName	MethodInvocation
.
getResources	SimpleName	MethodInvocation
(
)
,
images	SimpleName	ArrayAccess
[
itemPos	SimpleName	ArrayAccess
]
)
;
Button	SimpleName	SimpleType
calcButton	SimpleName	VariableDeclarationFragment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
calcButton	SimpleName	QualifiedName
)
;
calcButton	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
int
smoker	SimpleName	VariableDeclarationFragment
=
0	NumberLiteral	VariableDeclarationFragment
;
int
medicated	SimpleName	VariableDeclarationFragment
=
0	NumberLiteral	VariableDeclarationFragment
;
char
gender	SimpleName	VariableDeclarationFragment
=
'm'	CharacterLiteral	VariableDeclarationFragment
;
String	SimpleName	SimpleType
selectedAge	SimpleName	VariableDeclarationFragment
=
(
String	SimpleName	SimpleType
)
ageSpin	SimpleName	MethodInvocation
.
getSelectedItem	SimpleName	MethodInvocation
(
)
;
Log	SimpleName	MethodInvocation
.
i	SimpleName	MethodInvocation
(
"TEST"	StringLiteral	MethodInvocation
,
"Before if"	StringLiteral	MethodInvocation
)
;
if
(
selectedAge	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
&
&
cholEdit	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
!=
null	NullLiteral	InfixExpression
&
&
hdlEdit	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
!=
null	NullLiteral	InfixExpression
&
&
sbpEdit	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
!=
null	NullLiteral	InfixExpression
&
&
genderGroup	SimpleName	MethodInvocation
.
getCheckedRadioButtonId	SimpleName	MethodInvocation
(
)
!=
-
1	NumberLiteral	PrefixExpression
&
&
smokerGroup	SimpleName	MethodInvocation
.
getCheckedRadioButtonId	SimpleName	MethodInvocation
(
)
!=
-
1	NumberLiteral	PrefixExpression
&
&
medsGroup	SimpleName	MethodInvocation
.
getCheckedRadioButtonId	SimpleName	MethodInvocation
(
)
!=
-
1	NumberLiteral	PrefixExpression
)
{
Log	SimpleName	MethodInvocation
.
i	SimpleName	MethodInvocation
(
"TEST"	StringLiteral	MethodInvocation
,
"After if"	StringLiteral	MethodInvocation
)
;
int
age	SimpleName	VariableDeclarationFragment
=
Integer	SimpleName	MethodInvocation
.
parseInt	SimpleName	MethodInvocation
(
selectedAge	SimpleName	MethodInvocation
.
toString	SimpleName	MethodInvocation
(
)
)
;
int
chol	SimpleName	VariableDeclarationFragment
=
Integer	SimpleName	MethodInvocation
.
parseInt	SimpleName	MethodInvocation
(
cholEdit	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
)
;
int
hdl	SimpleName	VariableDeclarationFragment
=
Integer	SimpleName	MethodInvocation
.
parseInt	SimpleName	MethodInvocation
(
hdlEdit	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
)
;
int
sbp	SimpleName	VariableDeclarationFragment
=
Integer	SimpleName	MethodInvocation
.
parseInt	SimpleName	MethodInvocation
(
sbpEdit	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
)
;
int
genderId	SimpleName	VariableDeclarationFragment
=
genderGroup	SimpleName	MethodInvocation
.
getCheckedRadioButtonId	SimpleName	MethodInvocation
(
)
;
int
smokeId	SimpleName	VariableDeclarationFragment
=
smokerGroup	SimpleName	MethodInvocation
.
getCheckedRadioButtonId	SimpleName	MethodInvocation
(
)
;
int
medsId	SimpleName	VariableDeclarationFragment
=
medsGroup	SimpleName	MethodInvocation
.
getCheckedRadioButtonId	SimpleName	MethodInvocation
(
)
;
if
(
genderId	SimpleName	InfixExpression
==
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
maleR	SimpleName	QualifiedName
)
gender	SimpleName	Assignment
=
'm'	CharacterLiteral	Assignment
;
else
if
(
genderId	SimpleName	InfixExpression
==
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
femaleR	SimpleName	QualifiedName
)
gender	SimpleName	Assignment
=
'f'	CharacterLiteral	Assignment
;
if
(
smokeId	SimpleName	InfixExpression
==
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
yesR	SimpleName	QualifiedName
)
smoker	SimpleName	Assignment
=
1	NumberLiteral	Assignment
;
else
if
(
smokeId	SimpleName	InfixExpression
==
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
noR	SimpleName	QualifiedName
)
smoker	SimpleName	Assignment
=
0	NumberLiteral	Assignment
;
if
(
medsId	SimpleName	InfixExpression
==
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
yesR2	SimpleName	QualifiedName
)
medicated	SimpleName	Assignment
=
1	NumberLiteral	Assignment
;
else
if
(
medsId	SimpleName	InfixExpression
==
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
yesR2	SimpleName	QualifiedName
)
medicated	SimpleName	Assignment
=
0	NumberLiteral	Assignment
;
String	SimpleName	SimpleType
answer	SimpleName	VariableDeclarationFragment
=
calc	SimpleName	MethodInvocation
.
calculateRiskScore	SimpleName	MethodInvocation
(
age	SimpleName	MethodInvocation
,
gender	SimpleName	MethodInvocation
,
chol	SimpleName	MethodInvocation
,
smoker	SimpleName	MethodInvocation
,
hdl	SimpleName	MethodInvocation
,
sbp	SimpleName	MethodInvocation
,
medicated	SimpleName	MethodInvocation
)
;
SharedPreferences	SimpleName	SimpleType
settings	SimpleName	VariableDeclarationFragment
=
getSharedPreferences	SimpleName	MethodInvocation
(
PREF_FILE	SimpleName	MethodInvocation
,
0	NumberLiteral	MethodInvocation
)
;
SharedPreferences	SimpleName	QualifiedName
.
Editor	SimpleName	QualifiedName
editor	SimpleName	VariableDeclarationFragment
=
settings	SimpleName	MethodInvocation
.
edit	SimpleName	MethodInvocation
(
)
;
editor	SimpleName	MethodInvocation
.
putInt	SimpleName	MethodInvocation
(
"age"	StringLiteral	MethodInvocation
,
age	SimpleName	MethodInvocation
)
;
editor	SimpleName	MethodInvocation
.
putInt	SimpleName	MethodInvocation
(
"chol"	StringLiteral	MethodInvocation
,
chol	SimpleName	MethodInvocation
)
;
editor	SimpleName	MethodInvocation
.
putInt	SimpleName	MethodInvocation
(
"hdl"	StringLiteral	MethodInvocation
,
hdl	SimpleName	MethodInvocation
)
;
editor	SimpleName	MethodInvocation
.
putInt	SimpleName	MethodInvocation
(
"sbp"	StringLiteral	MethodInvocation
,
sbp	SimpleName	MethodInvocation
)
;
editor	SimpleName	MethodInvocation
.
putInt	SimpleName	MethodInvocation
(
"gender"	StringLiteral	MethodInvocation
,
genderId	SimpleName	MethodInvocation
)
;
editor	SimpleName	MethodInvocation
.
putInt	SimpleName	MethodInvocation
(
"smoker"	StringLiteral	MethodInvocation
,
smoker	SimpleName	MethodInvocation
)
;
editor	SimpleName	MethodInvocation
.
putInt	SimpleName	MethodInvocation
(
"med"	StringLiteral	MethodInvocation
,
medicated	SimpleName	MethodInvocation
)
;
editor	SimpleName	MethodInvocation
.
putString	SimpleName	MethodInvocation
(
"risk"	StringLiteral	MethodInvocation
,
answer	SimpleName	MethodInvocation
)
;
editor	SimpleName	MethodInvocation
.
commit	SimpleName	MethodInvocation
(
)
;
displayRisk	SimpleName	MethodInvocation
(
answer	SimpleName	MethodInvocation
)
;
}
else
{
Toast	SimpleName	SimpleType
toast	SimpleName	VariableDeclarationFragment
=
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
getApplicationContext	SimpleName	MethodInvocation
(
)
,
"Not all fields are completed"	StringLiteral	MethodInvocation
,
Toast	SimpleName	QualifiedName
.
LENGTH_SHORT	SimpleName	QualifiedName
)
;
toast	SimpleName	MethodInvocation
.
show	SimpleName	MethodInvocation
(
)
;
}
}
}
)
;
}
package
lakj	SimpleName	QualifiedName
.
comspace	SimpleName	QualifiedName
.
simpleclient	SimpleName	QualifiedName
;
import
java	SimpleName	QualifiedName
.
io	SimpleName	QualifiedName
.
IOException	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
SimpleClientActivity	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
private	Modifier	FieldDeclaration
Socket	SimpleName	SimpleType
client	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
PrintWriter	SimpleName	SimpleType
printwriter	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
EditText	SimpleName	SimpleType
textField	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
Button	SimpleName	SimpleType
button	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
String	SimpleName	SimpleType
messsage	SimpleName	VariableDeclarationFragment
;
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
main	SimpleName	QualifiedName
)
;
textField	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
editText1	SimpleName	QualifiedName
)
;
button	SimpleName	Assignment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button1	SimpleName	QualifiedName
)
;
button	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
messsage	SimpleName	Assignment
=
textField	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
;
textField	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
""	StringLiteral	MethodInvocation
)
;
try
{
client	SimpleName	Assignment
=
new
Socket	SimpleName	SimpleType
(
"10.0.2.2"	StringLiteral	ClassInstanceCreation
,
4444	NumberLiteral	ClassInstanceCreation
)
;
printwriter	SimpleName	Assignment
=
new
PrintWriter	SimpleName	SimpleType
(
client	SimpleName	MethodInvocation
.
getOutputStream	SimpleName	MethodInvocation
(
)
,
true	BooleanLiteral	ClassInstanceCreation
)
;
printwriter	SimpleName	MethodInvocation
.
write	SimpleName	MethodInvocation
(
messsage	SimpleName	MethodInvocation
)
;
printwriter	SimpleName	MethodInvocation
.
flush	SimpleName	MethodInvocation
(
)
;
printwriter	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
client	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
}
catch
(
UnknownHostException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
catch
(
IOException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
}
}
)
;
}
}
package
simpleserver	SimpleName	VariableDeclarationFragment
;
import
java	SimpleName	QualifiedName
.
io	SimpleName	QualifiedName
.
BufferedReader	SimpleName	QualifiedName
;
import
java	SimpleName	QualifiedName
.
io	SimpleName	QualifiedName
.
IOException	SimpleName	QualifiedName
;
import
java	SimpleName	QualifiedName
.
io	SimpleName	QualifiedName
.
InputStreamReader	SimpleName	QualifiedName
;
import
java	SimpleName	QualifiedName
.
net	SimpleName	QualifiedName
.
ServerSocket	SimpleName	QualifiedName
;
import
java	SimpleName	QualifiedName
.
net	SimpleName	QualifiedName
.
Socket	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
Main	SimpleName	TypeDeclaration
{
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
ServerSocket	SimpleName	SimpleType
serverSocket	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
Socket	SimpleName	SimpleType
clientSocket	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
InputStreamReader	SimpleName	SimpleType
inputStreamReader	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
BufferedReader	SimpleName	SimpleType
bufferedReader	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
String	SimpleName	SimpleType
message	SimpleName	VariableDeclarationFragment
;
public	Modifier	MethodDeclaration
static	Modifier	MethodDeclaration
void
main	SimpleName	MethodDeclaration
(
String	SimpleName	SimpleType
[
]
args	SimpleName	SingleVariableDeclaration
)
{
try
{
serverSocket	SimpleName	Assignment
=
new
ServerSocket	SimpleName	SimpleType
(
4444	NumberLiteral	ClassInstanceCreation
)
;
}
catch
(
IOException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
System	SimpleName	QualifiedName
.
out	SimpleName	QualifiedName
.
println	SimpleName	MethodInvocation
(
"Could not listen on port: 4444"	StringLiteral	MethodInvocation
)
;
}
System	SimpleName	QualifiedName
.
out	SimpleName	QualifiedName
.
println	SimpleName	MethodInvocation
(
"Server started. Listening to the port 4444"	StringLiteral	MethodInvocation
)
;
while
(
true	BooleanLiteral	WhileStatement
)
{
try
{
clientSocket	SimpleName	Assignment
=
serverSocket	SimpleName	MethodInvocation
.
accept	SimpleName	MethodInvocation
(
)
;
inputStreamReader	SimpleName	Assignment
=
new
InputStreamReader	SimpleName	SimpleType
(
clientSocket	SimpleName	MethodInvocation
.
getInputStream	SimpleName	MethodInvocation
(
)
)
;
bufferedReader	SimpleName	Assignment
=
new
BufferedReader	SimpleName	SimpleType
(
inputStreamReader	SimpleName	ClassInstanceCreation
)
;
message	SimpleName	Assignment
=
bufferedReader	SimpleName	MethodInvocation
.
readLine	SimpleName	MethodInvocation
(
)
;
System	SimpleName	QualifiedName
.
out	SimpleName	QualifiedName
.
println	SimpleName	MethodInvocation
(
message	SimpleName	MethodInvocation
)
;
inputStreamReader	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
clientSocket	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
}
catch
(
IOException	SimpleName	SimpleType
ex	SimpleName	SingleVariableDeclaration
)
{
System	SimpleName	QualifiedName
.
out	SimpleName	QualifiedName
.
println	SimpleName	MethodInvocation
(
"Problem in message reading"	StringLiteral	MethodInvocation
)
;
}
}
}
}
import
java	SimpleName	QualifiedName
.
io	SimpleName	QualifiedName
.
PrintWriter	SimpleName	QualifiedName
;
import
java	SimpleName	QualifiedName
.
net	SimpleName	QualifiedName
.
Socket	SimpleName	QualifiedName
;
import
java	SimpleName	QualifiedName
.
net	SimpleName	QualifiedName
.
UnknownHostException	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Activity	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
View	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
Button	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
EditText	SimpleName	QualifiedName
;
package
ars	SimpleName	QualifiedName
.
samsung	SimpleName	QualifiedName
.
de	SimpleName	QualifiedName
;
import
ars	SimpleName	QualifiedName
.
samsung	SimpleName	QualifiedName
.
de	SimpleName	QualifiedName
.
MyService	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
Button	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
SamsungLoc1	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
implements
OnClickListener	SimpleName	SimpleType
{
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
String	SimpleName	SimpleType
TAG	SimpleName	VariableDeclarationFragment
=
"ServicesDemo"	StringLiteral	VariableDeclarationFragment
;
Button	SimpleName	SimpleType
buttonStart	SimpleName	VariableDeclarationFragment
,
buttonStop	SimpleName	VariableDeclarationFragment
;
@
Override	SimpleName	MarkerAnnotation
protected	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
activity_samsung_loc1	SimpleName	QualifiedName
)
;
buttonStart	SimpleName	Assignment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
buttonStart	SimpleName	QualifiedName
)
;
buttonStop	SimpleName	Assignment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
buttonStop	SimpleName	QualifiedName
)
;
buttonStart	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
this
)
;
buttonStop	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
this
)
;
}
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
src	SimpleName	SingleVariableDeclaration
)
{
switch
(
src	SimpleName	MethodInvocation
.
getId	SimpleName	MethodInvocation
(
)
)
{
case
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
buttonStart	SimpleName	QualifiedName
:
Log	SimpleName	MethodInvocation
.
d	SimpleName	MethodInvocation
(
TAG	SimpleName	MethodInvocation
,
"onClick: starting service"	StringLiteral	MethodInvocation
)
;
startService	SimpleName	MethodInvocation
(
new
Intent	SimpleName	SimpleType
(
this
,
MyService	SimpleName	SimpleType
.
class
)
)
;
break
;
case
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
buttonStop	SimpleName	QualifiedName
:
Log	SimpleName	MethodInvocation
.
d	SimpleName	MethodInvocation
(
TAG	SimpleName	MethodInvocation
,
"onClick: stopping service"	StringLiteral	MethodInvocation
)
;
stopService	SimpleName	MethodInvocation
(
new
Intent	SimpleName	SimpleType
(
this
,
MyService	SimpleName	SimpleType
.
class
)
)
;
break
;
}
}
}
package
ars	SimpleName	QualifiedName
.
samsung	SimpleName	QualifiedName
.
de	SimpleName	QualifiedName
;
import
java	SimpleName	QualifiedName
.
util	SimpleName	QualifiedName
.
Timer	SimpleName	QualifiedName
;
import
java	SimpleName	QualifiedName
.
util	SimpleName	QualifiedName
.
TimerTask	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Service	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
Context	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
Intent	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
media	SimpleName	QualifiedName
.
MediaPlayer	SimpleName	QualifiedName
;
import
ars	SimpleName	QualifiedName
.
samsung	SimpleName	QualifiedName
.
de	SimpleName	QualifiedName
.
R	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
IBinder	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
util	SimpleName	QualifiedName
.
Log	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
TextView	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
Toast	SimpleName	QualifiedName
;
import
ars	SimpleName	QualifiedName
.
samsung	SimpleName	QualifiedName
.
de	SimpleName	QualifiedName
.
*
;
public	Modifier	TypeDeclaration
class
MyService	SimpleName	TypeDeclaration
extends
Service	SimpleName	SimpleType
{
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
String	SimpleName	SimpleType
TAG	SimpleName	VariableDeclarationFragment
=
"MyService"	StringLiteral	VariableDeclarationFragment
;
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
IBinder	SimpleName	SimpleType
onBind	SimpleName	MethodDeclaration
(
Intent	SimpleName	SimpleType
intent	SimpleName	SingleVariableDeclaration
)
{
return
null	NullLiteral	ReturnStatement
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
)
{
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
this
,
"My Service Created"	StringLiteral	MethodInvocation
,
Toast	SimpleName	QualifiedName
.
LENGTH_LONG	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
Log	SimpleName	MethodInvocation
.
d	SimpleName	MethodInvocation
(
TAG	SimpleName	MethodInvocation
,
"onCreate"	StringLiteral	MethodInvocation
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onDestroy	SimpleName	MethodDeclaration
(
)
{
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
this
,
"My Service Stopped"	StringLiteral	MethodInvocation
,
Toast	SimpleName	QualifiedName
.
LENGTH_LONG	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
Log	SimpleName	MethodInvocation
.
d	SimpleName	MethodInvocation
(
TAG	SimpleName	MethodInvocation
,
"onDestroy"	StringLiteral	MethodInvocation
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onStart	SimpleName	MethodDeclaration
(
Intent	SimpleName	SimpleType
intent	SimpleName	SingleVariableDeclaration
,
int
startid	SimpleName	SingleVariableDeclaration
)
{
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
this
,
"My Service Started"	StringLiteral	MethodInvocation
,
Toast	SimpleName	QualifiedName
.
LENGTH_LONG	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
Log	SimpleName	MethodInvocation
.
d	SimpleName	MethodInvocation
(
TAG	SimpleName	MethodInvocation
,
"onStart"	StringLiteral	MethodInvocation
)
;
Timer	SimpleName	SimpleType
t	SimpleName	VariableDeclarationFragment
=
new
Timer	SimpleName	SimpleType
(
)
;
t	SimpleName	MethodInvocation
.
scheduleAtFixedRate	SimpleName	MethodInvocation
(
new
TimerTask	SimpleName	SimpleType
(
)
{
public	Modifier	MethodDeclaration
void
run	SimpleName	MethodDeclaration
(
)
{
String	SimpleName	SimpleType
url	SimpleName	VariableDeclarationFragment
=
""	StringLiteral	VariableDeclarationFragment
;
String	SimpleName	SimpleType
Output	SimpleName	VariableDeclarationFragment
=
""	StringLiteral	VariableDeclarationFragment
;
MyNetworkLocator	SimpleName	SimpleType
mnl1	SimpleName	VariableDeclarationFragment
=
new
MyNetworkLocator	SimpleName	SimpleType
(
)
;
mnl1	SimpleName	MethodInvocation
.
starter	SimpleName	MethodInvocation
(
this
)
;
MyHilfsklasse	SimpleName	SimpleType
mhk1	SimpleName	VariableDeclarationFragment
=
new
MyHilfsklasse	SimpleName	SimpleType
(
)
;
try
{
url	SimpleName	Assignment
=
"http://www.mysite.net/test/location/location_push.php?VONHANDY=c&amp;MYLATITUDE=1.6&amp;MYLONGITUDE=3.2"	StringLiteral	Assignment
;
Output	SimpleName	Assignment
=
mhk1	SimpleName	MethodInvocation
.
my_getUrlContent_v3	SimpleName	MethodInvocation
(
url	SimpleName	MethodInvocation
)
;
Log	SimpleName	MethodInvocation
.
d	SimpleName	MethodInvocation
(
TAG	SimpleName	MethodInvocation
,
"Http done"	StringLiteral	MethodInvocation
)
;
}
catch
(
Exception	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
Log	SimpleName	MethodInvocation
.
d	SimpleName	MethodInvocation
(
TAG	SimpleName	MethodInvocation
,
"Catch: Http"	StringLiteral	MethodInvocation
)
;
}
}
}
,
0	NumberLiteral	MethodInvocation
,
120000	NumberLiteral	MethodInvocation
)
;
}
}
mnl1	SimpleName	MethodInvocation
.
starter	SimpleName	MethodInvocation
(
this
)
package
ars	SimpleName	QualifiedName
.
samsung	SimpleName	QualifiedName
.
de	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
Context	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
location	SimpleName	QualifiedName
.
Criteria	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
location	SimpleName	QualifiedName
.
Location	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
location	SimpleName	QualifiedName
.
LocationListener	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
location	SimpleName	QualifiedName
.
LocationManager	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
TextView	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
MyNetworkLocator	SimpleName	TypeDeclaration
implements
LocationListener	SimpleName	SimpleType
{
private	Modifier	FieldDeclaration
LocationManager	SimpleName	SimpleType
mgr	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
String	SimpleName	SimpleType
best	SimpleName	VariableDeclarationFragment
;
Location	SimpleName	SimpleType
location	SimpleName	VariableDeclarationFragment
;
public	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
double
myLocationLatitude	SimpleName	VariableDeclarationFragment
;
public	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
double
myLocationLongitude	SimpleName	VariableDeclarationFragment
;
public	Modifier	MethodDeclaration
void
starter	SimpleName	MethodDeclaration
(
Context	SimpleName	SimpleType
context	SimpleName	SingleVariableDeclaration
)
{
mgr	SimpleName	Assignment
=
(
LocationManager	SimpleName	SimpleType
)
context	SimpleName	MethodInvocation
.
getSystemService	SimpleName	MethodInvocation
(
Context	SimpleName	QualifiedName
.
LOCATION_SERVICE	SimpleName	QualifiedName
)
;
Criteria	SimpleName	SimpleType
criteria	SimpleName	VariableDeclarationFragment
=
new
Criteria	SimpleName	SimpleType
(
)
;
best	SimpleName	Assignment
=
mgr	SimpleName	MethodInvocation
.
getBestProvider	SimpleName	MethodInvocation
(
criteria	SimpleName	MethodInvocation
,
true	BooleanLiteral	MethodInvocation
)
;
location	SimpleName	Assignment
=
mgr	SimpleName	MethodInvocation
.
getLastKnownLocation	SimpleName	MethodInvocation
(
LocationManager	SimpleName	QualifiedName
.
NETWORK_PROVIDER	SimpleName	QualifiedName
)
;
dumpLocation	SimpleName	MethodInvocation
(
location	SimpleName	MethodInvocation
)
;
}
public	Modifier	MethodDeclaration
void
onLocationChanged	SimpleName	MethodDeclaration
(
Location	SimpleName	SimpleType
location	SimpleName	SingleVariableDeclaration
)
{
dumpLocation	SimpleName	MethodInvocation
(
location	SimpleName	MethodInvocation
)
;
}
public	Modifier	MethodDeclaration
void
onProviderDisabled	SimpleName	MethodDeclaration
(
String	SimpleName	SimpleType
provider	SimpleName	SingleVariableDeclaration
)
{
}
public	Modifier	MethodDeclaration
void
onProviderEnabled	SimpleName	MethodDeclaration
(
String	SimpleName	SimpleType
provider	SimpleName	SingleVariableDeclaration
)
{
}
public	Modifier	MethodDeclaration
void
onStatusChanged	SimpleName	MethodDeclaration
(
String	SimpleName	SimpleType
provider	SimpleName	SingleVariableDeclaration
,
int
status	SimpleName	SingleVariableDeclaration
,
Bundle	SimpleName	SimpleType
extras	SimpleName	SingleVariableDeclaration
)
{
}
protected	Modifier	MethodDeclaration
void
onPause	SimpleName	MethodDeclaration
(
)
{
mgr	SimpleName	MethodInvocation
.
removeUpdates	SimpleName	MethodInvocation
(
this
)
;
}
protected	Modifier	MethodDeclaration
void
onResume	SimpleName	MethodDeclaration
(
)
{
mgr	SimpleName	MethodInvocation
.
requestLocationUpdates	SimpleName	MethodInvocation
(
best	SimpleName	MethodInvocation
,
15000	NumberLiteral	MethodInvocation
,
10	NumberLiteral	MethodInvocation
,
this
)
;
}
private	Modifier	MethodDeclaration
void
dumpLocation	SimpleName	MethodDeclaration
(
Location	SimpleName	SimpleType
l	SimpleName	SingleVariableDeclaration
)
{
if
(
l	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
{
myLocationLatitude	SimpleName	Assignment
=
l	SimpleName	MethodInvocation
.
getLatitude	SimpleName	MethodInvocation
(
)
;
myLocationLongitude	SimpleName	Assignment
=
l	SimpleName	MethodInvocation
.
getLongitude	SimpleName	MethodInvocation
(
)
;
}
}
}
context	SimpleName	MethodInvocation
.
getSystemService	SimpleName	MethodInvocation
(
Context	SimpleName	QualifiedName
.
LOCATION_SERVICE	SimpleName	QualifiedName
)
mnl1	SimpleName	MethodInvocation
.
starter	SimpleName	MethodInvocation
(
this
)
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Activity	SimpleName	QualifiedName
;
mnl1	SimpleName	MethodInvocation
.
starter	SimpleName	MethodInvocation
(
context	SimpleName	MethodInvocation
)
;
run	SimpleName	MethodDeclaration
(
Context	SimpleName	SimpleType
context	SimpleName	SingleVariableDeclaration
)
import
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
Intent	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
util	SimpleName	QualifiedName
.
Log	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
Menu	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
View	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
;
@
Override	SimpleName	MarkerAnnotation
protected	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
main_geotracker	SimpleName	QualifiedName
)
;
textbox1	SimpleName	Assignment
=
(
TextView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
textinname1	SimpleName	QualifiedName
)
;
textbox2	SimpleName	Assignment
=
(
TextView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
textinname2	SimpleName	QualifiedName
)
;
ConnectivityManager	SimpleName	SimpleType
cm	SimpleName	VariableDeclarationFragment
=
(
ConnectivityManager	SimpleName	SimpleType
)
getSystemService	SimpleName	MethodInvocation
(
Context	SimpleName	QualifiedName
.
CONNECTIVITY_SERVICE	SimpleName	QualifiedName
)
;
NetworkInfo	SimpleName	SimpleType
ni	SimpleName	VariableDeclarationFragment
=
cm	SimpleName	MethodInvocation
.
getActiveNetworkInfo	SimpleName	MethodInvocation
(
)
;
if
(
ni	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
&
amp	SimpleName	InfixExpression
;
&
amp	SimpleName	ExpressionMethodReference
;
ni	SimpleName	ExpressionMethodReference
.
isConnected	SimpleName	MethodInvocation
(
)
)
{
msg	SimpleName	Assignment
=
"Please login to continue"	StringLiteral	Assignment
;
login	SimpleName	MethodInvocation
(
)
;
}
else
{
msg	SimpleName	Assignment
=
"Sorry , network connection is not available."	StringLiteral	Assignment
;
message	SimpleName	MethodInvocation
(
)
;
}
}
public	Modifier	TypeDeclaration
class
DatabaseConnector	SimpleName	TypeDeclaration
{
private	Modifier	VariableDeclarationStatement
static	Modifier	VariableDeclarationStatement
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
DATABASE_NAME	SimpleName	VariableDeclarationFragment
=
"UserContacts"	StringLiteral	VariableDeclarationFragment
;
public	Modifier	MethodDeclaration
void
deleteContact	SimpleName	MethodDeclaration
(
long
id	SimpleName	SingleVariableDeclaration
)
{
open	SimpleName	MethodInvocation
(
)
;
database	SimpleName	MethodInvocation
.
delete	SimpleName	MethodInvocation
(
"contacts"	StringLiteral	MethodInvocation
,
"_id="	StringLiteral	InfixExpression
+
id	SimpleName	InfixExpression
,
null	NullLiteral	MethodInvocation
)
;
close	SimpleName	MethodInvocation
(
)
;
}
public	Modifier	MethodDeclaration
Cursor	SimpleName	SimpleType
getAllContacts	SimpleName	MethodDeclaration
(
)
{
return
database	SimpleName	MethodInvocation
.
query	SimpleName	MethodInvocation
(
"contacts"	StringLiteral	MethodInvocation
,
new
String	SimpleName	SimpleType
[
]
{
"_id"	StringLiteral	ArrayInitializer
,
"name"	StringLiteral	ArrayInitializer
}
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
"name"	StringLiteral	MethodInvocation
)
;
}
public	Modifier	MethodDeclaration
Cursor	SimpleName	SimpleType
getOneContact	SimpleName	MethodDeclaration
(
long
id	SimpleName	SingleVariableDeclaration
)
{
return
database	SimpleName	MethodInvocation
.
query	SimpleName	MethodInvocation
(
"contacts"	StringLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
"_id="	StringLiteral	InfixExpression
+
id	SimpleName	InfixExpression
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
)
;
}
private	Modifier	VariableDeclarationStatement
SQLiteDatabase	SimpleName	SimpleType
database	SimpleName	VariableDeclarationFragment
;
private	Modifier	VariableDeclarationStatement
DatabaseOpenHelper	SimpleName	SimpleType
databaseOpenHelper	SimpleName	VariableDeclarationFragment
;
public	Modifier	MethodDeclaration
DatabaseConnector	SimpleName	MethodDeclaration
(
Context	SimpleName	SimpleType
context	SimpleName	SingleVariableDeclaration
)
{
databaseOpenHelper	SimpleName	Assignment
=
new
DatabaseOpenHelper	SimpleName	SimpleType
(
context	SimpleName	ClassInstanceCreation
,
DATABASE_NAME	SimpleName	ClassInstanceCreation
,
null	NullLiteral	ClassInstanceCreation
,
1	NumberLiteral	ClassInstanceCreation
)
;
}
public	Modifier	MethodDeclaration
void
open	SimpleName	MethodDeclaration
(
)
throws
SQLException	SimpleName	SimpleType
{
database	SimpleName	Assignment
=
databaseOpenHelper	SimpleName	MethodInvocation
.
getWritableDatabase	SimpleName	MethodInvocation
(
)
;
}
public	Modifier	MethodDeclaration
void
close	SimpleName	MethodDeclaration
(
)
{
if
(
database	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
database	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
}
public	Modifier	MethodDeclaration
void
insertContact	SimpleName	MethodDeclaration
(
String	SimpleName	SimpleType
name	SimpleName	SingleVariableDeclaration
,
String	SimpleName	SimpleType
email	SimpleName	SingleVariableDeclaration
,
String	SimpleName	SimpleType
phone	SimpleName	SingleVariableDeclaration
,
String	SimpleName	SimpleType
state	SimpleName	SingleVariableDeclaration
,
String	SimpleName	SimpleType
city	SimpleName	SingleVariableDeclaration
)
{
ContentValues	SimpleName	SimpleType
newContact	SimpleName	VariableDeclarationFragment
=
new
ContentValues	SimpleName	SimpleType
(
)
;
newContact	SimpleName	MethodInvocation
.
put	SimpleName	MethodInvocation
(
"name"	StringLiteral	MethodInvocation
,
name	SimpleName	MethodInvocation
)
;
newContact	SimpleName	MethodInvocation
.
put	SimpleName	MethodInvocation
(
"email"	StringLiteral	MethodInvocation
,
email	SimpleName	MethodInvocation
)
;
newContact	SimpleName	MethodInvocation
.
put	SimpleName	MethodInvocation
(
"phone"	StringLiteral	MethodInvocation
,
phone	SimpleName	MethodInvocation
)
;
newContact	SimpleName	MethodInvocation
.
put	SimpleName	MethodInvocation
(
"street"	StringLiteral	MethodInvocation
,
state	SimpleName	MethodInvocation
)
;
newContact	SimpleName	MethodInvocation
.
put	SimpleName	MethodInvocation
(
"city"	StringLiteral	MethodInvocation
,
city	SimpleName	MethodInvocation
)
;
newContact	SimpleName	MethodInvocation
.
put	SimpleName	MethodInvocation
(
"favourite"	StringLiteral	MethodInvocation
,
favourite	SimpleName	MethodInvocation
)
;
open	SimpleName	MethodInvocation
(
)
;
database	SimpleName	MethodInvocation
.
insert	SimpleName	MethodInvocation
(
"contacts"	StringLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
newContact	SimpleName	MethodInvocation
)
;
close	SimpleName	MethodInvocation
(
)
;
}
public	Modifier	MethodDeclaration
void
updateContact	SimpleName	MethodDeclaration
(
long
id	SimpleName	SingleVariableDeclaration
,
String	SimpleName	SimpleType
name	SimpleName	SingleVariableDeclaration
,
String	SimpleName	SimpleType
email	SimpleName	SingleVariableDeclaration
,
String	SimpleName	SimpleType
phone	SimpleName	SingleVariableDeclaration
,
String	SimpleName	SimpleType
state	SimpleName	SingleVariableDeclaration
,
String	SimpleName	SimpleType
city	SimpleName	SingleVariableDeclaration
)
{
ContentValues	SimpleName	SimpleType
editContact	SimpleName	VariableDeclarationFragment
=
new
ContentValues	SimpleName	SimpleType
(
)
;
editContact	SimpleName	MethodInvocation
.
put	SimpleName	MethodInvocation
(
"name"	StringLiteral	MethodInvocation
,
name	SimpleName	MethodInvocation
)
;
editContact	SimpleName	MethodInvocation
.
put	SimpleName	MethodInvocation
(
"email"	StringLiteral	MethodInvocation
,
email	SimpleName	MethodInvocation
)
;
editContact	SimpleName	MethodInvocation
.
put	SimpleName	MethodInvocation
(
"phone"	StringLiteral	MethodInvocation
,
phone	SimpleName	MethodInvocation
)
;
editContact	SimpleName	MethodInvocation
.
put	SimpleName	MethodInvocation
(
"street"	StringLiteral	MethodInvocation
,
state	SimpleName	MethodInvocation
)
;
editContact	SimpleName	MethodInvocation
.
put	SimpleName	MethodInvocation
(
"city"	StringLiteral	MethodInvocation
,
city	SimpleName	MethodInvocation
)
;
editContact	SimpleName	MethodInvocation
.
put	SimpleName	MethodInvocation
(
"favourite"	StringLiteral	MethodInvocation
,
favourite	SimpleName	MethodInvocation
)
;
open	SimpleName	MethodInvocation
(
)
;
database	SimpleName	MethodInvocation
.
update	SimpleName	MethodInvocation
(
"contacts"	StringLiteral	MethodInvocation
,
editContact	SimpleName	MethodInvocation
,
"_id="	StringLiteral	InfixExpression
+
id	SimpleName	InfixExpression
,
null	NullLiteral	MethodInvocation
)
;
close	SimpleName	MethodInvocation
(
)
;
}
public	Modifier	TypeDeclaration
class
MainActivity	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
activity_main	SimpleName	QualifiedName
)
;
Button	SimpleName	SimpleType
btn1	SimpleName	VariableDeclarationFragment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button1	SimpleName	QualifiedName
)
;
Button	SimpleName	SimpleType
btn2	SimpleName	VariableDeclarationFragment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button2	SimpleName	QualifiedName
)
;
Button	SimpleName	SimpleType
btn3	SimpleName	VariableDeclarationFragment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button3	SimpleName	QualifiedName
)
;
Button	SimpleName	SimpleType
btn4	SimpleName	VariableDeclarationFragment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button4	SimpleName	QualifiedName
)
;
btn1	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
OnClickListener	SimpleName	SimpleType
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
String	SimpleName	SimpleType
categoryName	SimpleName	VariableDeclarationFragment
=
"This is share data"	StringLiteral	VariableDeclarationFragment
;
try
{
Intent	SimpleName	SimpleType
emailIntent	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
Intent	SimpleName	QualifiedName
.
ACTION_SEND	SimpleName	QualifiedName
)
;
String	SimpleName	SimpleType
[
]
recipients	SimpleName	VariableDeclarationFragment
=
new
String	SimpleName	SimpleType
[
]
{
"Enter email"	StringLiteral	ArrayInitializer
}
;
emailIntent	SimpleName	MethodInvocation
.
putExtra	SimpleName	MethodInvocation
(
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
Intent	SimpleName	QualifiedName
.
EXTRA_EMAIL	SimpleName	QualifiedName
,
recipients	SimpleName	MethodInvocation
)
;
emailIntent	SimpleName	MethodInvocation
.
putExtra	SimpleName	MethodInvocation
(
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
Intent	SimpleName	QualifiedName
.
EXTRA_SUBJECT	SimpleName	QualifiedName
,
"Email:- "	StringLiteral	InfixExpression
+
categoryName	SimpleName	InfixExpression
)
;
emailIntent	SimpleName	MethodInvocation
.
setType	SimpleName	MethodInvocation
(
"message/rfc822"	StringLiteral	MethodInvocation
)
;
startActivity	SimpleName	MethodInvocation
(
emailIntent	SimpleName	MethodInvocation
)
;
}
catch
(
Exception	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
String	SimpleName	SimpleType
ss	SimpleName	VariableDeclarationFragment
=
e	SimpleName	MethodInvocation
.
getMessage	SimpleName	MethodInvocation
(
)
;
Log	SimpleName	MethodInvocation
.
e	SimpleName	MethodInvocation
(
"The error is :"	StringLiteral	MethodInvocation
,
ss	SimpleName	MethodInvocation
)
;
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
}
}
)
;
btn2	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
OnClickListener	SimpleName	SimpleType
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
String	SimpleName	SimpleType
title	SimpleName	VariableDeclarationFragment
=
"This is facebook Data"	StringLiteral	VariableDeclarationFragment
;
try
{
Intent	SimpleName	SimpleType
i	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
Intent	SimpleName	QualifiedName
.
ACTION_VIEW	SimpleName	QualifiedName
)
;
i	SimpleName	MethodInvocation
.
setData	SimpleName	MethodInvocation
(
Uri	SimpleName	MethodInvocation
.
parse	SimpleName	MethodInvocation
(
"https://m.facebook.com/sharer.php?u="	StringLiteral	InfixExpression
+
"www.facebook.com"	StringLiteral	InfixExpression
+
"&amp;t="	StringLiteral	InfixExpression
+
title	SimpleName	InfixExpression
+
"&amp;_rdr"	StringLiteral	InfixExpression
)
)
;
startActivity	SimpleName	MethodInvocation
(
i	SimpleName	MethodInvocation
)
;
}
catch
(
Exception	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
}
}
)
;
btn3	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
OnClickListener	SimpleName	SimpleType
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
String	SimpleName	SimpleType
title	SimpleName	VariableDeclarationFragment
=
"This Twitter"	StringLiteral	VariableDeclarationFragment
;
Intent	SimpleName	SimpleType
i	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
Intent	SimpleName	QualifiedName
.
ACTION_VIEW	SimpleName	QualifiedName
)
;
i	SimpleName	MethodInvocation
.
setData	SimpleName	MethodInvocation
(
Uri	SimpleName	MethodInvocation
.
parse	SimpleName	MethodInvocation
(
"https://twitter.com/intent/tweet?text="	StringLiteral	InfixExpression
+
title	SimpleName	InfixExpression
+
"&amp;url="	StringLiteral	InfixExpression
+
"https://www.twitter.com"	StringLiteral	InfixExpression
)
)
;
startActivity	SimpleName	MethodInvocation
(
i	SimpleName	MethodInvocation
)
;
}
}
)
;
btn4	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
OnClickListener	SimpleName	SimpleType
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
}
}
)
;
}
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
this
.
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
activity_home	SimpleName	QualifiedName
)
;
LocationManager	SimpleName	SimpleType
locationManager	SimpleName	VariableDeclarationFragment
=
(
LocationManager	SimpleName	SimpleType
)
getSystemService	SimpleName	MethodInvocation
(
LOCATION_SERVICE	SimpleName	MethodInvocation
)
;
imv	SimpleName	Assignment
=
(
ImageView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
imvFoto	SimpleName	QualifiedName
)
;
onderwerp	SimpleName	Assignment
=
(
TextView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
txtSubject	SimpleName	QualifiedName
)
;
commentaar	SimpleName	Assignment
=
(
TextView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
txtComment	SimpleName	QualifiedName
)
;
if
(
!
locationManager	SimpleName	MethodInvocation
.
isProviderEnabled	SimpleName	MethodInvocation
(
LocationManager	SimpleName	QualifiedName
.
GPS_PROVIDER	SimpleName	QualifiedName
)
)
{
showGPSDisabledAlertToUser	SimpleName	MethodInvocation
(
)
;
}
}
public	Modifier	MethodDeclaration
void
getGPSLocation	SimpleName	MethodDeclaration
(
)
{
if
(
!
locationManager	SimpleName	MethodInvocation
.
isProviderEnabled	SimpleName	MethodInvocation
(
LocationManager	SimpleName	QualifiedName
.
GPS_PROVIDER	SimpleName	QualifiedName
)
)
{
showGPSDisabledAlertToUser	SimpleName	MethodInvocation
(
)
;
}
LocationManager	SimpleName	SimpleType
locationManager	SimpleName	VariableDeclarationFragment
=
(
LocationManager	SimpleName	SimpleType
)
getSystemService	SimpleName	MethodInvocation
(
LOCATION_SERVICE	SimpleName	MethodInvocation
)
;
locationManager	SimpleName	MethodInvocation
.
requestLocationUpdates	SimpleName	MethodInvocation
(
LocationManager	SimpleName	QualifiedName
.
GPS_PROVIDER	SimpleName	QualifiedName
,
MINIMUM_TIME_BETWEEN_UPDATES	SimpleName	MethodInvocation
,
MINIMUM_DISTANCE_CHANGE_FOR_UPDATES	SimpleName	MethodInvocation
,
new
MyLocationListener	SimpleName	SimpleType
(
)
)
;
currentLocation	SimpleName	Assignment
=
locationManager	SimpleName	MethodInvocation
.
getLastKnownLocation	SimpleName	MethodInvocation
(
LocationManager	SimpleName	QualifiedName
.
GPS_PROVIDER	SimpleName	QualifiedName
)
;
if
(
currentLocation	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
{
longitude	SimpleName	Assignment
=
currentLocation	SimpleName	MethodInvocation
.
getLongitude	SimpleName	MethodInvocation
(
)
;
latitude	SimpleName	Assignment
=
currentLocation	SimpleName	MethodInvocation
.
getLatitude	SimpleName	MethodInvocation
(
)
;
}
EXTRA_TEXT	SimpleName	Assignment
=
"http://maps.google.com/maps?q="	StringLiteral	InfixExpression
+
latitude	SimpleName	InfixExpression
+
","	StringLiteral	InfixExpression
+
longitude	SimpleName	InfixExpression
;
}
}
HttpClient	SimpleName	SimpleType
httpclient	SimpleName	VariableDeclarationFragment
=
new
DefaultHttpClient	SimpleName	SimpleType
(
)
;
HttpGet	SimpleName	SimpleType
httppost	SimpleName	VariableDeclarationFragment
=
new
HttpGet	SimpleName	SimpleType
(
url	SimpleName	MethodInvocation
.
toString	SimpleName	MethodInvocation
(
)
)
;
HttpResponse	SimpleName	SimpleType
response	SimpleName	VariableDeclarationFragment
=
httpclient	SimpleName	MethodInvocation
.
execute	SimpleName	MethodInvocation
(
httppost	SimpleName	MethodInvocation
)
;
InputStream	SimpleName	SimpleType
in	SimpleName	VariableDeclarationFragment
=
response	SimpleName	MethodInvocation
.
getEntity	SimpleName	MethodInvocation
(
)
.
getContent	SimpleName	MethodInvocation
(
)
;
HttpURLConnection	SimpleName	SimpleType
con	SimpleName	VariableDeclarationFragment
=
(
HttpURLConnection	SimpleName	SimpleType
)
url	SimpleName	MethodInvocation
.
openConnection	SimpleName	MethodInvocation
(
)
;
InputStream	SimpleName	SimpleType
in	SimpleName	VariableDeclarationFragment
=
con	SimpleName	MethodInvocation
.
getInputStream	SimpleName	MethodInvocation
(
)
;
InputStream	SimpleName	SimpleType
in	SimpleName	VariableDeclarationFragment
=
url	SimpleName	MethodInvocation
.
openStream	SimpleName	MethodInvocation
(
)
;
public	Modifier	TypeDeclaration
class
_iSellCrazyStuff	SimpleName	TypeDeclaration
extends
SlidingActivity	SimpleName	SimpleType
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
activity__i_sell_crazy_stuff	SimpleName	QualifiedName
)
;
setTitle	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
string	SimpleName	QualifiedName
.
attach	SimpleName	QualifiedName
)
;
SlidingMenu	SimpleName	SimpleType
menu	SimpleName	VariableDeclarationFragment
=
new
SlidingMenu	SimpleName	SimpleType
(
this
)
;
menu	SimpleName	MethodInvocation
.
setMode	SimpleName	MethodInvocation
(
SlidingMenu	SimpleName	QualifiedName
.
LEFT	SimpleName	QualifiedName
)
;
menu	SimpleName	MethodInvocation
.
setTouchModeAbove	SimpleName	MethodInvocation
(
SlidingMenu	SimpleName	QualifiedName
.
TOUCHMODE_FULLSCREEN	SimpleName	QualifiedName
)
;
menu	SimpleName	MethodInvocation
.
setShadowWidthRes	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
dimen	SimpleName	QualifiedName
.
shadow_width	SimpleName	QualifiedName
)
;
menu	SimpleName	MethodInvocation
.
setShadowDrawable	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
drawable	SimpleName	QualifiedName
.
shadow	SimpleName	QualifiedName
)
;
menu	SimpleName	MethodInvocation
.
setBehindOffsetRes	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
dimen	SimpleName	QualifiedName
.
slidingmenu_offset	SimpleName	QualifiedName
)
;
menu	SimpleName	MethodInvocation
.
setFadeDegree	SimpleName	MethodInvocation
(
0.35f	NumberLiteral	MethodInvocation
)
;
menu	SimpleName	MethodInvocation
.
attachToActivity	SimpleName	MethodInvocation
(
this
,
SlidingMenu	SimpleName	QualifiedName
.
SLIDING_CONTENT	SimpleName	QualifiedName
)
;
menu	SimpleName	MethodInvocation
.
setMenu	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
menu	SimpleName	QualifiedName
)
;
}
}
ViewPager	SimpleName	SimpleType
myPager	SimpleName	VariableDeclarationFragment
=
(
ViewPager	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
home_pannels_pager	SimpleName	QualifiedName
)
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
Button	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
LinearLayout	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
TextView	SimpleName	QualifiedName
;
package
com	SimpleName	QualifiedName
.
example	SimpleName	QualifiedName
.
tstswipe	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
Context	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
Intent	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Parcelable	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
support	SimpleName	QualifiedName
.
v4	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
PagerAdapter	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
support	SimpleName	QualifiedName
.
v4	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
ViewPager	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
View	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
webkit	SimpleName	QualifiedName
.
WebView	SimpleName	QualifiedName
.
FindListener	SimpleName	QualifiedName
;
View	SimpleName	SimpleType
licenseView	SimpleName	VariableDeclarationFragment
=
View	SimpleName	MethodInvocation
.
inflate	SimpleName	MethodInvocation
(
UI	SimpleName	MethodInvocation
,
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
agreement	SimpleName	QualifiedName
,
null	NullLiteral	MethodInvocation
)
;
PopUpView	SimpleName	SimpleType
ToS	SimpleName	VariableDeclarationFragment
=
new
PopUpView	SimpleName	SimpleType
(
UI	SimpleName	ClassInstanceCreation
,
licenseView	SimpleName	ClassInstanceCreation
)
;
etNumber	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
UI	SimpleName	MethodInvocation
.
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
etNumber	SimpleName	QualifiedName
)
;
etName	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
prefs	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
"Name"	StringLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
)
)
;
etNumber	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
prefs	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
"Number"	StringLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
)
)
;
buttonCancel	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
cancel	SimpleName	MethodInvocation
)
;
buttonOK	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
accept	SimpleName	MethodInvocation
)
;
ToS	SimpleName	MethodInvocation
.
show	SimpleName	MethodInvocation
(
)
;
checkboxAcceptLicense	SimpleName	Assignment
=
(
CheckBox	SimpleName	SimpleType
)
UI	SimpleName	MethodInvocation
.
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
checkLicenseAgreement	SimpleName	QualifiedName
)
;
textviewLicense	SimpleName	Assignment
=
(
TextView	SimpleName	SimpleType
)
UI	SimpleName	MethodInvocation
.
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
textviewLicenseAgreement	SimpleName	QualifiedName
)
;
textviewLicense	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
agreement	SimpleName	MethodInvocation
)
;
buttonOK	SimpleName	Assignment
=
(
Button	SimpleName	SimpleType
)
UI	SimpleName	MethodInvocation
.
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
buttonOK	SimpleName	QualifiedName
)
;
buttonCancel	SimpleName	Assignment
=
(
Button	SimpleName	SimpleType
)
UI	SimpleName	MethodInvocation
.
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
buttonCancel	SimpleName	QualifiedName
)
;
etName	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
UI	SimpleName	MethodInvocation
.
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
etName	SimpleName	QualifiedName
)
;
public	Modifier	TypeDeclaration
class
Temp	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
implements
OnClickListener	SimpleName	SimpleType
,
OnFocusChangeListener	SimpleName	SimpleType
{
private	Modifier	VariableDeclarationStatement
EditText	SimpleName	SimpleType
temp_f	SimpleName	VariableDeclarationFragment
,
temp_c	SimpleName	VariableDeclarationFragment
;
protected	Modifier	VariableDeclarationStatement
void
onCreate	SimpleName	VariableDeclarationFragment
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	VariableDeclarationFragment
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
temp	SimpleName	QualifiedName
)
;
temp_f	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
temp_f_inp	SimpleName	QualifiedName
)
;
temp_c	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
temp_c_inp	SimpleName	QualifiedName
)
;
temp_c	SimpleName	MethodInvocation
.
setOnFocusChangeListener	SimpleName	MethodInvocation
(
(
OnFocusChangeListener	SimpleName	SimpleType
)
this
)
;
temp_f	SimpleName	MethodInvocation
.
setOnFocusChangeListener	SimpleName	MethodInvocation
(
(
OnFocusChangeListener	SimpleName	SimpleType
)
this
)
;
}
private	Modifier	VariableDeclarationStatement
TextWatcher	SimpleName	SimpleType
tempc	SimpleName	VariableDeclarationFragment
=
new
TextWatcher	SimpleName	SimpleType
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onTextChanged	SimpleName	MethodDeclaration
(
CharSequence	SimpleName	SimpleType
s	SimpleName	SingleVariableDeclaration
,
int
start	SimpleName	SingleVariableDeclaration
,
int
before	SimpleName	SingleVariableDeclaration
,
int
count	SimpleName	SingleVariableDeclaration
)
{
if
(
temp_c	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
length	SimpleName	MethodInvocation
(
)
==
0	NumberLiteral	InfixExpression
)
{
temp_f	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
""	StringLiteral	MethodInvocation
)
;
}
else
{
float
convValue	SimpleName	VariableDeclarationFragment
=
Float	SimpleName	MethodInvocation
.
parseFloat	SimpleName	MethodInvocation
(
temp_c	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
)
;
conv_f	SimpleName	Assignment
=
(
(
convValue	SimpleName	InfixExpression
-
32	NumberLiteral	InfixExpression
)
*
5	NumberLiteral	InfixExpression
/
9	NumberLiteral	InfixExpression
)
;
temp_f	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
String	SimpleName	MethodInvocation
.
valueOf	SimpleName	MethodInvocation
(
new
DecimalFormat	SimpleName	SimpleType
(
"##.###"	StringLiteral	ClassInstanceCreation
)
.
format	SimpleName	MethodInvocation
(
conv_f	SimpleName	MethodInvocation
)
)
)
;
}
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
beforeTextChanged	SimpleName	MethodDeclaration
(
CharSequence	SimpleName	SimpleType
s	SimpleName	SingleVariableDeclaration
,
int
start	SimpleName	SingleVariableDeclaration
,
int
count	SimpleName	SingleVariableDeclaration
,
int
after	SimpleName	SingleVariableDeclaration
)
{
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
afterTextChanged	SimpleName	MethodDeclaration
(
Editable	SimpleName	SimpleType
s	SimpleName	SingleVariableDeclaration
)
{
}
}
;
private	Modifier	VariableDeclarationStatement
TextWatcher	SimpleName	SimpleType
tempf	SimpleName	VariableDeclarationFragment
=
new
TextWatcher	SimpleName	SimpleType
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onTextChanged	SimpleName	MethodDeclaration
(
CharSequence	SimpleName	SimpleType
s	SimpleName	SingleVariableDeclaration
,
int
start	SimpleName	SingleVariableDeclaration
,
int
before	SimpleName	SingleVariableDeclaration
,
int
count	SimpleName	SingleVariableDeclaration
)
{
if
(
temp_f	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
length	SimpleName	MethodInvocation
(
)
==
0	NumberLiteral	InfixExpression
)
{
temp_c	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
""	StringLiteral	MethodInvocation
)
;
}
else
{
float
convValue	SimpleName	VariableDeclarationFragment
=
Float	SimpleName	MethodInvocation
.
parseFloat	SimpleName	MethodInvocation
(
temp_f	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
)
;
conv_c	SimpleName	Assignment
=
(
(
convValue	SimpleName	InfixExpression
*
9	NumberLiteral	InfixExpression
)
/
5	NumberLiteral	InfixExpression
+
32	NumberLiteral	InfixExpression
)
;
temp_c	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
String	SimpleName	MethodInvocation
.
valueOf	SimpleName	MethodInvocation
(
new
DecimalFormat	SimpleName	SimpleType
(
"##.###"	StringLiteral	ClassInstanceCreation
)
.
format	SimpleName	MethodInvocation
(
conv_c	SimpleName	MethodInvocation
)
)
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	VariableDeclarationStatement
void
beforeTextChanged	SimpleName	VariableDeclarationFragment
(
CharSequence	SimpleName	SimpleType
s	SimpleName	VariableDeclarationFragment
,
int
start	SimpleName	VariableDeclarationFragment
,
int
count	SimpleName	VariableDeclarationFragment
,
int
after	SimpleName	VariableDeclarationFragment
)
{
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	VariableDeclarationStatement
void
afterTextChanged	SimpleName	VariableDeclarationFragment
(
Editable	SimpleName	SimpleType
s	SimpleName	VariableDeclarationFragment
)
{
}
}
;	EmptyStatement	Block
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onFocusChange	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
,
boolean
hasFocus	SimpleName	SingleVariableDeclaration
)
{
if
(
(
v	SimpleName	InfixExpression
==
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
temp_c_inp	SimpleName	QualifiedName
)
)
&
amp	SimpleName	InfixExpression
;
&
amp	SimpleName	MethodInvocation
;
(
hasFocus	SimpleName	InfixExpression
==
true	BooleanLiteral	InfixExpression
)
)
{
temp_c	SimpleName	MethodInvocation
.
addTextChangedListener	SimpleName	MethodInvocation
(
tempc	SimpleName	MethodInvocation
)
;
}
else
if
(
(
v	SimpleName	InfixExpression
==
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
temp_f_inp	SimpleName	QualifiedName
)
)
&
amp	SimpleName	InfixExpression
;
&
amp	SimpleName	MethodInvocation
;
(
hasFocus	SimpleName	InfixExpression
==
true	BooleanLiteral	InfixExpression
)
)
{
temp_f	SimpleName	MethodInvocation
.
addTextChangedListener	SimpleName	MethodInvocation
(
tempf	SimpleName	MethodInvocation
)
;
}
}
Date	SimpleName	SimpleType
dat	SimpleName	VariableDeclarationFragment
=
new
Date	SimpleName	SimpleType
(
)
;
Calendar	SimpleName	SimpleType
cal_alarm	SimpleName	VariableDeclarationFragment
=
Calendar	SimpleName	MethodInvocation
.
getInstance	SimpleName	MethodInvocation
(
)
;
PendingIntent	SimpleName	SimpleType
sender	SimpleName	VariableDeclarationFragment
=
PendingIntent	SimpleName	MethodInvocation
.
getBroadcast	SimpleName	MethodInvocation
(
ctx	SimpleName	MethodInvocation
,
0010000	NumberLiteral	MethodInvocation
,
intent	SimpleName	MethodInvocation
,
0	NumberLiteral	MethodInvocation
)
;
long
tmemills	SimpleName	VariableDeclarationFragment
=
cal_alarm	SimpleName	MethodInvocation
.
getTimeInMillis	SimpleName	MethodInvocation
(
)
-
cal_now	SimpleName	MethodInvocation
.
getTimeInMillis	SimpleName	MethodInvocation
(
)
;
AlarmManager	SimpleName	SimpleType
am	SimpleName	VariableDeclarationFragment
=
(
AlarmManager	SimpleName	SimpleType
)
getSystemService	SimpleName	MethodInvocation
(
ALARM_SERVICE	SimpleName	MethodInvocation
)
;
am	SimpleName	MethodInvocation
.
setRepeating	SimpleName	MethodInvocation
(
AlarmManager	SimpleName	QualifiedName
.
RTC_WAKEUP	SimpleName	QualifiedName
,
tmemills	SimpleName	MethodInvocation
,
AlarmManager	SimpleName	QualifiedName
.
INTERVAL_DAY	SimpleName	QualifiedName
,
sender	SimpleName	MethodInvocation
)
;
public	Modifier	TypeDeclaration
class
AlarmReceiver	SimpleName	TypeDeclaration
extends
BroadcastReceiver	SimpleName	SimpleType
{
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
int
MY_NOTIFICATION_ID	SimpleName	VariableDeclarationFragment
=
1	NumberLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
NotificationManager	SimpleName	SimpleType
notificationManager	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
Notification	SimpleName	SimpleType
myNotification	SimpleName	VariableDeclarationFragment
;
@
SuppressWarnings	SimpleName	SingleMemberAnnotation
(
"deprecation"	StringLiteral	SingleMemberAnnotation
)
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onReceive	SimpleName	MethodDeclaration
(
Context	SimpleName	SimpleType
context	SimpleName	SingleVariableDeclaration
,
Intent	SimpleName	SimpleType
intent	SimpleName	SingleVariableDeclaration
)
{
try
{
NotificationManager	SimpleName	SimpleType
mNM	SimpleName	VariableDeclarationFragment
;
mNM	SimpleName	Assignment
=
(
NotificationManager	SimpleName	SimpleType
)
context	SimpleName	MethodInvocation
.
getSystemService	SimpleName	MethodInvocation
(
Context	SimpleName	QualifiedName
.
NOTIFICATION_SERVICE	SimpleName	QualifiedName
)
;
Notification	SimpleName	SimpleType
notification	SimpleName	VariableDeclarationFragment
=
new
Notification	SimpleName	SimpleType
(
R	SimpleName	QualifiedName
.
drawable	SimpleName	QualifiedName
.
ic_launcher	SimpleName	QualifiedName
,
"Pixitch Notification !"	StringLiteral	ClassInstanceCreation
,
System	SimpleName	MethodInvocation
.
currentTimeMillis	SimpleName	MethodInvocation
(
)
)
;
PendingIntent	SimpleName	SimpleType
contentIntent	SimpleName	VariableDeclarationFragment
=
PendingIntent	SimpleName	MethodInvocation
.
getActivity	SimpleName	MethodInvocation
(
context	SimpleName	MethodInvocation
,
0	NumberLiteral	MethodInvocation
,
new
Intent	SimpleName	SimpleType
(
context	SimpleName	ClassInstanceCreation
,
AlarmManage	SimpleName	SimpleType
.
class
)
,
0	NumberLiteral	MethodInvocation
)
;
notification	SimpleName	MethodInvocation
.
setLatestEventInfo	SimpleName	MethodInvocation
(
context	SimpleName	MethodInvocation
,
"Pixitch Notification!"	StringLiteral	MethodInvocation
,
"Reminder For TakePhoto"	StringLiteral	MethodInvocation
,
contentIntent	SimpleName	MethodInvocation
)
;
mNM	SimpleName	MethodInvocation
.
notify	SimpleName	MethodInvocation
(
0	NumberLiteral	MethodInvocation
,
notification	SimpleName	MethodInvocation
)
;
}
catch
(
Exception	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
context	SimpleName	MethodInvocation
,
"There was an error somewhere, but we still received an alarm"	StringLiteral	MethodInvocation
,
Toast	SimpleName	QualifiedName
.
LENGTH_SHORT	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
}
}
Calendar	SimpleName	SimpleType
cal_now	SimpleName	VariableDeclarationFragment
=
Calendar	SimpleName	MethodInvocation
.
getInstance	SimpleName	MethodInvocation
(
)
;
cal_alarm	SimpleName	MethodInvocation
.
setTime	SimpleName	MethodInvocation
(
dat	SimpleName	MethodInvocation
)
;
cal_alarm	SimpleName	MethodInvocation
.
set	SimpleName	MethodInvocation
(
Calendar	SimpleName	QualifiedName
.
HOUR_OF_DAY	SimpleName	QualifiedName
,
hrs	SimpleName	MethodInvocation
)
;
cal_alarm	SimpleName	MethodInvocation
.
set	SimpleName	MethodInvocation
(
Calendar	SimpleName	QualifiedName
.
MINUTE	SimpleName	QualifiedName
,
min	SimpleName	MethodInvocation
)
;
cal_alarm	SimpleName	MethodInvocation
.
set	SimpleName	MethodInvocation
(
Calendar	SimpleName	QualifiedName
.
SECOND	SimpleName	QualifiedName
,
0	NumberLiteral	MethodInvocation
)
;
cal_alarm	SimpleName	MethodInvocation
.
set	SimpleName	MethodInvocation
(
Calendar	SimpleName	QualifiedName
.
MILLISECOND	SimpleName	QualifiedName
,
0	NumberLiteral	MethodInvocation
)
;
if
(
cal_alarm	SimpleName	MethodInvocation
.
before	SimpleName	MethodInvocation
(
cal_now	SimpleName	MethodInvocation
)
)
{
cal_alarm	SimpleName	MethodInvocation
.
add	SimpleName	MethodInvocation
(
Calendar	SimpleName	QualifiedName
.
DATE	SimpleName	QualifiedName
,
1	NumberLiteral	MethodInvocation
)
;
}
Intent	SimpleName	SimpleType
intent	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
ctx	SimpleName	ClassInstanceCreation
,
AlarmReceiver	SimpleName	SimpleType
.
class
)
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Activity	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
MainActivity	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
ViewPager	SimpleName	SimpleType
vPager	SimpleName	VariableDeclarationFragment
;
private	Modifier	VariableDeclarationStatement
vpAdapter	SimpleName	SimpleType
mAdapter	SimpleName	VariableDeclarationFragment
;
@
Override	SimpleName	MarkerAnnotation
protected	Modifier	VariableDeclarationStatement
void
onCreate	SimpleName	VariableDeclarationFragment
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	VariableDeclarationFragment
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
activity_main	SimpleName	QualifiedName
)
;
vPager	SimpleName	Assignment
=
(
ViewPager	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
pager	SimpleName	QualifiedName
)
;
mAdapter	SimpleName	Assignment
=
new
vpAdapter	SimpleName	SimpleType
(
)
;
vPager	SimpleName	MethodInvocation
.
setAdapter	SimpleName	MethodInvocation
(
mAdapter	SimpleName	MethodInvocation
)
;
}
private	Modifier	TypeDeclaration
class
vpAdapter	SimpleName	TypeDeclaration
extends
PagerAdapter	SimpleName	SimpleType
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
int
getCount	SimpleName	MethodDeclaration
(
)
{
return
4	NumberLiteral	ReturnStatement
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
boolean
isViewFromObject	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
view	SimpleName	SingleVariableDeclaration
,
Object	SimpleName	SimpleType
object	SimpleName	SingleVariableDeclaration
)
{
return
view	SimpleName	InfixExpression
==
(
(
LinearLayout	SimpleName	SimpleType
)
object	SimpleName	CastExpression
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
Object	SimpleName	SimpleType
instantiateItem	SimpleName	MethodDeclaration
(
ViewGroup	SimpleName	SimpleType
container	SimpleName	SingleVariableDeclaration
,
int
position	SimpleName	SingleVariableDeclaration
)
{
LayoutInflater	SimpleName	SimpleType
inflater	SimpleName	VariableDeclarationFragment
=
(
LayoutInflater	SimpleName	SimpleType
)
container	SimpleName	MethodInvocation
.
getContext	SimpleName	MethodInvocation
(
)
.
getSystemService	SimpleName	MethodInvocation
(
Context	SimpleName	QualifiedName
.
LAYOUT_INFLATER_SERVICE	SimpleName	QualifiedName
)
;
View	SimpleName	SimpleType
v	SimpleName	VariableDeclarationFragment
=
null	NullLiteral	VariableDeclarationFragment
;
switch
(
position	SimpleName	SwitchStatement
)
{
case
0	NumberLiteral	SwitchCase
:
inflater	SimpleName	MethodInvocation
.
inflate	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
satu	SimpleName	QualifiedName
,
null	NullLiteral	MethodInvocation
)
;
break
;
case
1	NumberLiteral	SwitchCase
:
inflater	SimpleName	MethodInvocation
.
inflate	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
dua	SimpleName	QualifiedName
,
null	NullLiteral	MethodInvocation
)
;
break
;
case
2	NumberLiteral	SwitchCase
:
inflater	SimpleName	MethodInvocation
.
inflate	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
tiga	SimpleName	QualifiedName
,
null	NullLiteral	MethodInvocation
)
;
break
;
case
3	NumberLiteral	SwitchCase
:
inflater	SimpleName	MethodInvocation
.
inflate	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
empat	SimpleName	QualifiedName
,
null	NullLiteral	MethodInvocation
)
;
break
;
}
(
(
ViewPager	SimpleName	SimpleType
)
container	SimpleName	CastExpression
)
.
addView	SimpleName	MethodInvocation
(
v	SimpleName	MethodInvocation
,
0	NumberLiteral	MethodInvocation
)
;
return
true	BooleanLiteral	ReturnStatement
;
}
}
import
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
Context	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
support	SimpleName	QualifiedName
.
v4	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
PagerAdapter	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
support	SimpleName	QualifiedName
.
v4	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
ViewPager	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
LayoutInflater	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
Menu	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
View	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
ViewGroup	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
LinearLayout	SimpleName	QualifiedName
;
public	Modifier	MethodDeclaration
void
receiveValues	SimpleName	MethodDeclaration
(
)
{
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
message_full1	SimpleName	VariableDeclarationFragment
=
2	NumberLiteral	VariableDeclarationFragment
;
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
message_full2	SimpleName	VariableDeclarationFragment
=
2	NumberLiteral	VariableDeclarationFragment
;
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
message_full3	SimpleName	VariableDeclarationFragment
=
2	NumberLiteral	VariableDeclarationFragment
;
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
message_full4	SimpleName	VariableDeclarationFragment
=
2	NumberLiteral	VariableDeclarationFragment
;
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
message_full5	SimpleName	VariableDeclarationFragment
=
2	NumberLiteral	VariableDeclarationFragment
;
byte
[
]
send1	SimpleName	VariableDeclarationFragment
=
message_full1	SimpleName	MethodInvocation
.
getBytes	SimpleName	MethodInvocation
(
)
;
GlobalVar	SimpleName	QualifiedName
.
mTransmission	SimpleName	QualifiedName
.
write	SimpleName	MethodInvocation
(
send1	SimpleName	MethodInvocation
)
;
read1_handler	SimpleName	MethodInvocation
.
postDelayed	SimpleName	MethodInvocation
(
new
Runnable	SimpleName	SimpleType
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
run	SimpleName	MethodDeclaration
(
)
{
String	SimpleName	SimpleType
inpuRead	SimpleName	VariableDeclarationFragment
=
"2b 00 ff fe c7 80"	StringLiteral	VariableDeclarationFragment
;
if
(
inpuRead	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
{
int
splitInt	SimpleName	VariableDeclarationFragment
=
splitReceivedString	SimpleName	MethodInvocation
(
inpuRead	SimpleName	MethodInvocation
)
;
receive1	SimpleName	Assignment
=
splitInt	SimpleName	Assignment
;
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
getApplicationContext	SimpleName	MethodInvocation
(
)
,
"Loading values"	StringLiteral	MethodInvocation
,
Toast	SimpleName	QualifiedName
.
LENGTH_LONG	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
}
else
{
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
getApplicationContext	SimpleName	MethodInvocation
(
)
,
"Communication error"	StringLiteral	MethodInvocation
,
Toast	SimpleName	QualifiedName
.
LENGTH_SHORT	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
}
}
}
,
1000	NumberLiteral	MethodInvocation
)
;
write2_handler	SimpleName	MethodInvocation
.
postDelayed	SimpleName	MethodInvocation
(
new
Runnable	SimpleName	SimpleType
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
run	SimpleName	MethodDeclaration
(
)
{
byte
[
]
send2	SimpleName	VariableDeclarationFragment
=
message_full2	SimpleName	MethodInvocation
.
getBytes	SimpleName	MethodInvocation
(
)
;
GlobalVar	SimpleName	QualifiedName
.
mTransmission	SimpleName	QualifiedName
.
write	SimpleName	MethodInvocation
(
send2	SimpleName	MethodInvocation
)
;
}
}
,
2000	NumberLiteral	MethodInvocation
)
;
read2_handler	SimpleName	MethodInvocation
.
postDelayed	SimpleName	MethodInvocation
(
new
Runnable	SimpleName	SimpleType
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
run	SimpleName	MethodDeclaration
(
)
{
String	SimpleName	SimpleType
inpuRead	SimpleName	VariableDeclarationFragment
=
"2b 00 ff fe c7 80"	StringLiteral	VariableDeclarationFragment
;
if
(
inpuRead	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
{
int
splitInt	SimpleName	VariableDeclarationFragment
=
splitReceivedString	SimpleName	MethodInvocation
(
inpuRead	SimpleName	MethodInvocation
)
;
receive2	SimpleName	Assignment
=
splitInt	SimpleName	Assignment
;
}
else
{
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
getApplicationContext	SimpleName	MethodInvocation
(
)
,
"Communication error"	StringLiteral	MethodInvocation
,
Toast	SimpleName	QualifiedName
.
LENGTH_SHORT	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
}
}
}
,
3000	NumberLiteral	MethodInvocation
)
;
write3_handler	SimpleName	MethodInvocation
.
postDelayed	SimpleName	MethodInvocation
(
new
Runnable	SimpleName	SimpleType
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
run	SimpleName	MethodDeclaration
(
)
{
byte
[
]
send3	SimpleName	VariableDeclarationFragment
=
message_full3	SimpleName	MethodInvocation
.
getBytes	SimpleName	MethodInvocation
(
)
;
GlobalVar	SimpleName	QualifiedName
.
mTransmission	SimpleName	QualifiedName
.
write	SimpleName	MethodInvocation
(
send3	SimpleName	MethodInvocation
)
;
}
}
,
4000	NumberLiteral	MethodInvocation
)
;
read3_handler	SimpleName	MethodInvocation
.
postDelayed	SimpleName	MethodInvocation
(
new
Runnable	SimpleName	SimpleType
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	VariableDeclarationStatement
void
run	SimpleName	VariableDeclarationFragment
(
)
{
String	SimpleName	SimpleType
inpuRead	SimpleName	VariableDeclarationFragment
=
"2b 00 ff fe c7 80"	StringLiteral	VariableDeclarationFragment
;
if
(
inpuRead	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
{
int
splitInt	SimpleName	VariableDeclarationFragment
=
splitReceivedString	SimpleName	MethodInvocation
(
inpuRead	SimpleName	MethodInvocation
)
;
receive3	SimpleName	Assignment
=
splitInt	SimpleName	Assignment
;
bar1	SimpleName	MethodInvocation
.
setProgress	SimpleName	MethodInvocation
(
receive1	SimpleName	MethodInvocation
)
;
bar2	SimpleName	MethodInvocation
.
setProgress	SimpleName	MethodInvocation
(
receive2	SimpleName	MethodInvocation
)
;
bar3	SimpleName	MethodInvocation
.
setProgress	SimpleName	MethodInvocation
(
receive3	SimpleName	MethodInvocation
)
;
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
getApplicationContext	SimpleName	MethodInvocation
(
)
,
"Values loaded!"	StringLiteral	MethodInvocation
,
Toast	SimpleName	QualifiedName
.
LENGTH_SHORT	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
}
else
{
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
getApplicationContext	SimpleName	MethodInvocation
(
)
,
"Communication error"	StringLiteral	MethodInvocation
,
Toast	SimpleName	QualifiedName
.
LENGTH_SHORT	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
}
}
}
,
5000	NumberLiteral	MethodInvocation
)
;
write4_handler	SimpleName	MethodInvocation
.
postDelayed	SimpleName	MethodInvocation
(
new
Runnable	SimpleName	SimpleType
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	VariableDeclarationStatement
void
run	SimpleName	VariableDeclarationFragment
(
)
{
byte
[
]
send4	SimpleName	VariableDeclarationFragment
=
message_full4	SimpleName	MethodInvocation
.
getBytes	SimpleName	MethodInvocation
(
)
;
GlobalVar	SimpleName	QualifiedName
.
mTransmission	SimpleName	QualifiedName
.
write	SimpleName	MethodInvocation
(
send4	SimpleName	MethodInvocation
)
;
}
}
,
6000	NumberLiteral	MethodInvocation
)
;
write5_handler	SimpleName	MethodInvocation
.
postDelayed	SimpleName	MethodInvocation
(
new
Runnable	SimpleName	SimpleType
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	VariableDeclarationStatement
void
run	SimpleName	VariableDeclarationFragment
(
)
{
byte
[
]
send5	SimpleName	VariableDeclarationFragment
=
message_full5	SimpleName	MethodInvocation
.
getBytes	SimpleName	MethodInvocation
(
)
;
GlobalVar	SimpleName	QualifiedName
.
mTransmission	SimpleName	QualifiedName
.
write	SimpleName	MethodInvocation
(
send5	SimpleName	MethodInvocation
)
;
GlobalVar	SimpleName	QualifiedName
.
mOutStringBuffer	SimpleName	QualifiedName
.
setLength	SimpleName	MethodInvocation
(
0	NumberLiteral	MethodInvocation
)
;
}
}
,
7000	NumberLiteral	MethodInvocation
)
;
}
private	Modifier	MethodDeclaration
int
splitReceivedString	SimpleName	MethodDeclaration
(
String	SimpleName	SimpleType
s	SimpleName	SingleVariableDeclaration
)
{
StringTokenizer	SimpleName	SimpleType
tokens	SimpleName	VariableDeclarationFragment
=
new
StringTokenizer	SimpleName	SimpleType
(
s	SimpleName	ClassInstanceCreation
,
" "	StringLiteral	ClassInstanceCreation
)
;
String	SimpleName	SimpleType
one	SimpleName	VariableDeclarationFragment
=
tokens	SimpleName	MethodInvocation
.
nextToken	SimpleName	MethodInvocation
(
)
;
String	SimpleName	SimpleType
two	SimpleName	VariableDeclarationFragment
=
tokens	SimpleName	MethodInvocation
.
nextToken	SimpleName	MethodInvocation
(
)
;
String	SimpleName	SimpleType
three	SimpleName	VariableDeclarationFragment
=
tokens	SimpleName	MethodInvocation
.
nextToken	SimpleName	MethodInvocation
(
)
;
String	SimpleName	SimpleType
four	SimpleName	VariableDeclarationFragment
=
tokens	SimpleName	MethodInvocation
.
nextToken	SimpleName	MethodInvocation
(
)
;
String	SimpleName	SimpleType
five	SimpleName	VariableDeclarationFragment
=
tokens	SimpleName	MethodInvocation
.
nextToken	SimpleName	MethodInvocation
(
)
;
String	SimpleName	SimpleType
six	SimpleName	VariableDeclarationFragment
=
tokens	SimpleName	MethodInvocation
.
nextToken	SimpleName	MethodInvocation
(
)
;
received_hexValue	SimpleName	Assignment
=
three	SimpleName	InfixExpression
+
four	SimpleName	InfixExpression
+
five	SimpleName	InfixExpression
+
six	SimpleName	InfixExpression
;
received_hexValue	SimpleName	Assignment
=
received_hexValue	SimpleName	MethodInvocation
.
trim	SimpleName	MethodInvocation
(
)
;
int_value_receive	SimpleName	Assignment
=
(
int
)
Long	SimpleName	MethodInvocation
.
parseLong	SimpleName	MethodInvocation
(
received_hexValue	SimpleName	MethodInvocation
,
16	NumberLiteral	MethodInvocation
)
;
int_value_receive	SimpleName	Assignment
=
-
200000	NumberLiteral	PrefixExpression
-
int_value_receive	SimpleName	InfixExpression
;
newIntValue	SimpleName	Assignment
=
(
int_value_receive	SimpleName	InfixExpression
*
100	NumberLiteral	InfixExpression
)
/
(
200000	NumberLiteral	InfixExpression
*
(
-
1	NumberLiteral	PrefixExpression
)
)
;
return
newIntValue	SimpleName	ReturnStatement
;
}
public	Modifier	TypeDeclaration
class
MainActivity	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
String	SimpleName	SimpleType
dbName	SimpleName	VariableDeclarationFragment
=
"AndroidDB"	StringLiteral	VariableDeclarationFragment
;
String	SimpleName	SimpleType
serverip	SimpleName	VariableDeclarationFragment
=
"10.0.2.2"	StringLiteral	VariableDeclarationFragment
;
String	SimpleName	SimpleType
serverport	SimpleName	VariableDeclarationFragment
=
"1433"	StringLiteral	VariableDeclarationFragment
;
String	SimpleName	SimpleType
url	SimpleName	VariableDeclarationFragment
=
"jdbc:sqlserver://14GRAFICALI;instanceName=\MSSQLSERVER2008;DatabaseName=AndroidDB;integratedSecurity=true"	StringLiteral	VariableDeclarationFragment
;
@
Override	SimpleName	MarkerAnnotation
protected	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
activity_main	SimpleName	QualifiedName
)
;
TextView	SimpleName	SimpleType
tvData	SimpleName	VariableDeclarationFragment
=
(
TextView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
tvSelectedData	SimpleName	QualifiedName
)
;
try
{
Class	SimpleName	MethodInvocation
.
forName	SimpleName	MethodInvocation
(
"com.microsoft.sqlserver.jdbc.SQLServerDriver"	StringLiteral	MethodInvocation
)
.
newInstance	SimpleName	MethodInvocation
(
)
;
Class	SimpleName	MethodInvocation
.
forName	SimpleName	MethodInvocation
(
"javax.sql.XAConnection"	StringLiteral	MethodInvocation
)
.
newInstance	SimpleName	MethodInvocation
(
)
;
Connection	SimpleName	SimpleType
conn	SimpleName	VariableDeclarationFragment
=
DriverManager	SimpleName	MethodInvocation
.
getConnection	SimpleName	MethodInvocation
(
url	SimpleName	MethodInvocation
)
;
Statement	SimpleName	SimpleType
statement	SimpleName	VariableDeclarationFragment
=
conn	SimpleName	MethodInvocation
.
createStatement	SimpleName	MethodInvocation
(
)
;
ResultSet	SimpleName	SimpleType
resultSet	SimpleName	VariableDeclarationFragment
=
statement	SimpleName	MethodInvocation
.
executeQuery	SimpleName	MethodInvocation
(
"select * from UserMaster"	StringLiteral	MethodInvocation
)
;
while
(
resultSet	SimpleName	MethodInvocation
.
next	SimpleName	MethodInvocation
(
)
)
{
tvData	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
" Data1 : "	StringLiteral	InfixExpression
+
resultSet	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
1	NumberLiteral	MethodInvocation
)
+
"  Data 2 : "	StringLiteral	InfixExpression
+
resultSet	SimpleName	MethodInvocation
.
getNString	SimpleName	MethodInvocation
(
2	NumberLiteral	MethodInvocation
)
)
;
}
}
catch
(
Exception	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
tvData	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
e	SimpleName	MethodInvocation
.
getMessage	SimpleName	MethodInvocation
(
)
)
;
}
}
Class	SimpleName	MethodInvocation
.
forName	SimpleName	MethodInvocation
(
"javax.sql.XAConnection"	StringLiteral	MethodInvocation
)
.
newInstance	SimpleName	MethodInvocation
(
)
;
package
com	SimpleName	QualifiedName
.
example	SimpleName	QualifiedName
.
solarcalculator	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
Intent	SimpleName	QualifiedName
;
package
com	SimpleName	QualifiedName
.
example	SimpleName	QualifiedName
.
solarcalculator	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
annotation	SimpleName	QualifiedName
.
SuppressLint	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Activity	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
TextView	SimpleName	QualifiedName
;
@
SuppressLint	SimpleName	SingleMemberAnnotation
(
"NewApi"	StringLiteral	SingleMemberAnnotation
)
public	Modifier	TypeDeclaration
class
Power	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
private	Modifier	FieldDeclaration
double
money	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
double
payback	SimpleName	VariableDeclarationFragment
;
@
SuppressLint	SimpleName	SingleMemberAnnotation
(
"NewApi"	StringLiteral	SingleMemberAnnotation
)
@
Override	SimpleName	MarkerAnnotation
protected	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
power	SimpleName	QualifiedName
)
;
payback	SimpleName	Assignment
=
getIntent	SimpleName	MethodInvocation
(
)
.
getDoubleExtra	SimpleName	MethodInvocation
(
"payback"	StringLiteral	MethodInvocation
,
0	NumberLiteral	MethodInvocation
)
;
money	SimpleName	Assignment
=
getIntent	SimpleName	MethodInvocation
(
)
.
getDoubleExtra	SimpleName	MethodInvocation
(
"money"	StringLiteral	MethodInvocation
,
0	NumberLiteral	MethodInvocation
)
;
TextView	SimpleName	SimpleType
pay	SimpleName	VariableDeclarationFragment
=
(
TextView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
textView2	SimpleName	QualifiedName
)
;
String	SimpleName	SimpleType
payback1	SimpleName	VariableDeclarationFragment
=
Double	SimpleName	MethodInvocation
.
toString	SimpleName	MethodInvocation
(
payback	SimpleName	MethodInvocation
)
;
pay	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
payback1	SimpleName	MethodInvocation
)
;
TextView	SimpleName	SimpleType
mon	SimpleName	VariableDeclarationFragment
=
(
TextView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
textView4	SimpleName	QualifiedName
)
;
String	SimpleName	SimpleType
money1	SimpleName	VariableDeclarationFragment
=
Double	SimpleName	MethodInvocation
.
toString	SimpleName	MethodInvocation
(
money	SimpleName	MethodInvocation
)
;
mon	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
money1	SimpleName	MethodInvocation
)
;
}
}
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
Button	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
annotation	SimpleName	QualifiedName
.
SuppressLint	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Activity	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
Menu	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
View	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
EditText	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
AlertDialog	SimpleName	QualifiedName
;
@
Override	SimpleName	MarkerAnnotation
protected	Modifier	MethodDeclaration
void
onActivityResult	SimpleName	MethodDeclaration
(
int
requestCode	SimpleName	SingleVariableDeclaration
,
int
resultCode	SimpleName	SingleVariableDeclaration
,
Intent	SimpleName	SimpleType
data	SimpleName	SingleVariableDeclaration
)
{
if
(
resultCode	SimpleName	InfixExpression
!=
RESULT_OK	SimpleName	InfixExpression
)
return
;
switch
(
requestCode	SimpleName	SwitchStatement
)
{
case
PICK_FROM_CAMERA	SimpleName	SwitchCase
:
this
.
picturePath	SimpleName	FieldAccess
=
picturePath	SimpleName	Assignment
;
Intent	SimpleName	SimpleType
intent1	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
getBaseContext	SimpleName	MethodInvocation
(
)
,
AndroidPaint	SimpleName	SimpleType
.
class
)
;
startActivity	SimpleName	MethodInvocation
(
intent1	SimpleName	MethodInvocation
)
;
break
;
case
PICK_FROM_FILE	SimpleName	SwitchCase
:
Uri	SimpleName	SimpleType
selectedImage	SimpleName	VariableDeclarationFragment
=
data	SimpleName	MethodInvocation
.
getData	SimpleName	MethodInvocation
(
)
;
String	SimpleName	SimpleType
[
]
filePathColumn	SimpleName	VariableDeclarationFragment
=
{
MediaStore	SimpleName	QualifiedName
.
Images	SimpleName	QualifiedName
.
Media	SimpleName	QualifiedName
.
DATA	SimpleName	QualifiedName
}
;
Cursor	SimpleName	SimpleType
cursor	SimpleName	VariableDeclarationFragment
=
getContentResolver	SimpleName	MethodInvocation
(
)
.
query	SimpleName	MethodInvocation
(
selectedImage	SimpleName	MethodInvocation
,
filePathColumn	SimpleName	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
)
;
cursor	SimpleName	MethodInvocation
.
moveToFirst	SimpleName	MethodInvocation
(
)
;
int
columnIndex	SimpleName	VariableDeclarationFragment
=
cursor	SimpleName	MethodInvocation
.
getColumnIndex	SimpleName	MethodInvocation
(
filePathColumn	SimpleName	ArrayAccess
[
0	NumberLiteral	ArrayAccess
]
)
;
String	SimpleName	SimpleType
picturePath	SimpleName	VariableDeclarationFragment
=
cursor	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
columnIndex	SimpleName	MethodInvocation
)
;
this
.
picturePath	SimpleName	FieldAccess
=
picturePath	SimpleName	Assignment
;
cursor	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
Intent	SimpleName	SimpleType
intent	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
getBaseContext	SimpleName	MethodInvocation
(
)
,
AndroidPaint	SimpleName	SimpleType
.
class
)
;
startActivity	SimpleName	MethodInvocation
(
intent	SimpleName	MethodInvocation
)
;
break
;
}
}
Cursor	SimpleName	SimpleType
cursor	SimpleName	VariableDeclarationFragment
=
getContentResolver	SimpleName	MethodInvocation
(
)
.
query	SimpleName	MethodInvocation
(
selectedImage	SimpleName	MethodInvocation
,
filePathColumn	SimpleName	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
)
;
public	Modifier	TypeDeclaration
class
Music	SimpleName	TypeDeclaration
implements
OnCompletionListener	SimpleName	SimpleType
{
public	Modifier	VariableDeclarationStatement
static	Modifier	VariableDeclarationStatement
boolean
isPlaying	SimpleName	VariableDeclarationFragment
=
false	BooleanLiteral	VariableDeclarationFragment
;
public	Modifier	VariableDeclarationStatement
static	Modifier	VariableDeclarationStatement
MediaPlayer	SimpleName	SimpleType
mp	SimpleName	VariableDeclarationFragment
=
null	NullLiteral	VariableDeclarationFragment
;
public	Modifier	MethodDeclaration
static	Modifier	MethodDeclaration
void
playGeneric	SimpleName	MethodDeclaration
(
int
name	SimpleName	SingleVariableDeclaration
,
final	Modifier	SingleVariableDeclaration
ImageButton	SimpleName	SimpleType
button	SimpleName	SingleVariableDeclaration
,
final	Modifier	SingleVariableDeclaration
ImageButton	SimpleName	SimpleType
pervious	SimpleName	SingleVariableDeclaration
,
Context	SimpleName	SimpleType
context	SimpleName	SingleVariableDeclaration
)
{
button	SimpleName	MethodInvocation
.
setEnabled	SimpleName	MethodInvocation
(
false	BooleanLiteral	MethodInvocation
)
;
button	SimpleName	MethodInvocation
.
setClickable	SimpleName	MethodInvocation
(
false	BooleanLiteral	MethodInvocation
)
;
pervious	SimpleName	MethodInvocation
.
setEnabled	SimpleName	MethodInvocation
(
false	BooleanLiteral	MethodInvocation
)
;
pervious	SimpleName	MethodInvocation
.
setClickable	SimpleName	MethodInvocation
(
false	BooleanLiteral	MethodInvocation
)
;
try
{
if
(
isPlaying	SimpleName	InfixExpression
==
true	BooleanLiteral	InfixExpression
)
{
stopplaying	SimpleName	MethodInvocation
(
)
;
}
if
(
isPlaying	SimpleName	InfixExpression
==
false	BooleanLiteral	InfixExpression
)
{
}
mp	SimpleName	Assignment
=
MediaPlayer	SimpleName	MethodInvocation
.
create	SimpleName	MethodInvocation
(
context	SimpleName	MethodInvocation
,
name	SimpleName	MethodInvocation
)
;
mp	SimpleName	MethodInvocation
.
setOnPreparedListener	SimpleName	MethodInvocation
(
new
MediaPlayer	SimpleName	QualifiedName
.
OnPreparedListener	SimpleName	QualifiedName
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onPrepared	SimpleName	MethodDeclaration
(
MediaPlayer	SimpleName	SimpleType
arg0	SimpleName	SingleVariableDeclaration
)
{
mp	SimpleName	MethodInvocation
.
start	SimpleName	MethodInvocation
(
)
;
isPlaying	SimpleName	Assignment
=
true	BooleanLiteral	Assignment
;
}
}
)
;
mp	SimpleName	MethodInvocation
.
setOnCompletionListener	SimpleName	MethodInvocation
(
new
MediaPlayer	SimpleName	QualifiedName
.
OnCompletionListener	SimpleName	QualifiedName
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	VariableDeclarationStatement
void
onCompletion	SimpleName	VariableDeclarationFragment
(
MediaPlayer	SimpleName	SimpleType
mp	SimpleName	VariableDeclarationFragment
)
{
mp	SimpleName	MethodInvocation
.
release	SimpleName	MethodInvocation
(
)
;
isPlaying	SimpleName	Assignment
=
false	BooleanLiteral	Assignment
;
System	SimpleName	QualifiedName
.
out	SimpleName	QualifiedName
.
println	SimpleName	MethodInvocation
(
"Object released"	StringLiteral	MethodInvocation
)
;
button	SimpleName	MethodInvocation
.
setEnabled	SimpleName	MethodInvocation
(
true	BooleanLiteral	MethodInvocation
)
;
button	SimpleName	MethodInvocation
.
setClickable	SimpleName	MethodInvocation
(
true	BooleanLiteral	MethodInvocation
)
;
pervious	SimpleName	MethodInvocation
.
setEnabled	SimpleName	MethodInvocation
(
true	BooleanLiteral	MethodInvocation
)
;
pervious	SimpleName	MethodInvocation
.
setClickable	SimpleName	MethodInvocation
(
true	BooleanLiteral	MethodInvocation
)
;
}
}
)
;
}
catch
(
IllegalStateException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
catch
(
SecurityException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
e	SimpleName	MethodInvocation
.
getMessage	SimpleName	MethodInvocation
(
)
;
}
catch
(
NullPointerException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
e	SimpleName	MethodInvocation
.
getMessage	SimpleName	MethodInvocation
(
)
;
}
}
public	Modifier	MethodDeclaration
static	Modifier	MethodDeclaration
void
stopplaying	SimpleName	MethodDeclaration
(
)
{
if
(
mp	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
{
mp	SimpleName	MethodInvocation
.
stop	SimpleName	MethodInvocation
(
)
;
mp	SimpleName	MethodInvocation
.
release	SimpleName	MethodInvocation
(
)
;
mp	SimpleName	Assignment
=
null	NullLiteral	Assignment
;
}
}
public	Modifier	MethodDeclaration
int
compare	SimpleName	MethodDeclaration
(
Location	SimpleName	SimpleType
lhs	SimpleName	SingleVariableDeclaration
,
Location	SimpleName	SimpleType
rhs	SimpleName	SingleVariableDeclaration
)
{
if
(
lhs	SimpleName	InfixExpression
==
null	NullLiteral	InfixExpression
&
amp	SimpleName	InfixExpression
;
&
amp	SimpleName	ExpressionMethodReference
;
rhs	SimpleName	ExpressionMethodReference
==
null	NullLiteral	InfixExpression
)
{
Ln	SimpleName	MethodInvocation
.
d	SimpleName	MethodInvocation
(
"l1, l2 are null"	StringLiteral	MethodInvocation
)
;
return
0	NumberLiteral	ReturnStatement
;
}
if
(
lhs	SimpleName	InfixExpression
==
null	NullLiteral	InfixExpression
&
amp	SimpleName	InfixExpression
;
&
amp	SimpleName	ExpressionMethodReference
;
rhs	SimpleName	ExpressionMethodReference
!=
null	NullLiteral	InfixExpression
)
{
Ln	SimpleName	MethodInvocation
.
d	SimpleName	MethodInvocation
(
"l1 is null"	StringLiteral	MethodInvocation
)
;
return
-
1	NumberLiteral	PrefixExpression
;
}
if
(
lhs	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
&
amp	SimpleName	InfixExpression
;
&
amp	SimpleName	ExpressionMethodReference
;
rhs	SimpleName	ExpressionMethodReference
==
null	NullLiteral	InfixExpression
)
{
Ln	SimpleName	MethodInvocation
.
d	SimpleName	MethodInvocation
(
"l2 is null"	StringLiteral	MethodInvocation
)
;
return
1	NumberLiteral	ReturnStatement
;
}
float
[
]
result1	SimpleName	VariableDeclarationFragment
=
new
float
[
1	NumberLiteral	ArrayCreation
]
;
float
[
]
result2	SimpleName	VariableDeclarationFragment
=
new
float
[
1	NumberLiteral	ArrayCreation
]
;
double
startLat	SimpleName	VariableDeclarationFragment
;
double
startLng	SimpleName	VariableDeclarationFragment
;
double
endLat	SimpleName	VariableDeclarationFragment
;
double
endLng	SimpleName	VariableDeclarationFragment
;
double
defaultLat	SimpleName	VariableDeclarationFragment
=
getDefaultLocation	SimpleName	MethodInvocation
(
)
.
getLatitude	SimpleName	MethodInvocation
(
)
;
double
defaultLng	SimpleName	VariableDeclarationFragment
=
getDefaultLocation	SimpleName	MethodInvocation
(
)
.
getLongitude	SimpleName	MethodInvocation
(
)
;
try
{
startLat	SimpleName	Assignment
=
Double	SimpleName	MethodInvocation
.
parseDouble	SimpleName	MethodInvocation
(
lhs	SimpleName	MethodInvocation
.
getLat	SimpleName	MethodInvocation
(
)
)
;
startLng	SimpleName	Assignment
=
Double	SimpleName	MethodInvocation
.
parseDouble	SimpleName	MethodInvocation
(
lhs	SimpleName	MethodInvocation
.
getLng	SimpleName	MethodInvocation
(
)
)
;
}
catch
(
Exception	SimpleName	SimpleType
ex	SimpleName	SingleVariableDeclaration
)
{
return
1	NumberLiteral	ReturnStatement
;
}
try
{
endLat	SimpleName	Assignment
=
Double	SimpleName	MethodInvocation
.
parseDouble	SimpleName	MethodInvocation
(
rhs	SimpleName	MethodInvocation
.
getLat	SimpleName	MethodInvocation
(
)
)
;
endLng	SimpleName	Assignment
=
Double	SimpleName	MethodInvocation
.
parseDouble	SimpleName	MethodInvocation
(
rhs	SimpleName	MethodInvocation
.
getLng	SimpleName	MethodInvocation
(
)
)
;
}
catch
(
Exception	SimpleName	SimpleType
ex	SimpleName	SingleVariableDeclaration
)
{
return
-
1	NumberLiteral	PrefixExpression
;
}
android	SimpleName	QualifiedName
.
location	SimpleName	QualifiedName
.
Location	SimpleName	QualifiedName
.
distanceBetween	SimpleName	MethodInvocation
(
startLat	SimpleName	MethodInvocation
,
startLng	SimpleName	MethodInvocation
,
defaultLat	SimpleName	MethodInvocation
,
defaultLng	SimpleName	MethodInvocation
,
result1	SimpleName	MethodInvocation
)
;
android	SimpleName	QualifiedName
.
location	SimpleName	QualifiedName
.
Location	SimpleName	QualifiedName
.
distanceBetween	SimpleName	MethodInvocation
(
endLat	SimpleName	MethodInvocation
,
endLng	SimpleName	MethodInvocation
,
defaultLat	SimpleName	MethodInvocation
,
defaultLng	SimpleName	MethodInvocation
,
result2	SimpleName	MethodInvocation
)
;
int
result	SimpleName	VariableDeclarationFragment
=
Double	SimpleName	MethodInvocation
.
compare	SimpleName	MethodInvocation
(
result1	SimpleName	ArrayAccess
[
0	NumberLiteral	ArrayAccess
]
,
result2	SimpleName	ArrayAccess
[
0	NumberLiteral	ArrayAccess
]
)
;
Ln	SimpleName	MethodInvocation
.
d	SimpleName	MethodInvocation
(
"result 1 = "	StringLiteral	InfixExpression
+
result1	SimpleName	ArrayAccess
[
0	NumberLiteral	ArrayAccess
]
+
", result 2 = "	StringLiteral	InfixExpression
+
result2	SimpleName	ArrayAccess
[
0	NumberLiteral	ArrayAccess
]
+
"  and result = "	StringLiteral	InfixExpression
+
result	SimpleName	InfixExpression
)
;
return
result	SimpleName	ReturnStatement
;
}
public	Modifier	TypeDeclaration
class
Location	SimpleName	TypeDeclaration
{
private	Modifier	FieldDeclaration
long
id	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
String	SimpleName	SimpleType
provider_name	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
String	SimpleName	SimpleType
display_address	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
String	SimpleName	SimpleType
lat	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
String	SimpleName	SimpleType
lng	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
int
zoom	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
String	SimpleName	SimpleType
contact	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
String	SimpleName	SimpleType
website	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
String	SimpleName	SimpleType
email	SimpleName	VariableDeclarationFragment
;
}
try
{
startLat	SimpleName	Assignment
=
Double	SimpleName	MethodInvocation
.
parseDouble	SimpleName	MethodInvocation
(
lhs	SimpleName	MethodInvocation
.
getLat	SimpleName	MethodInvocation
(
)
)
;
startLng	SimpleName	Assignment
=
Double	SimpleName	MethodInvocation
.
parseDouble	SimpleName	MethodInvocation
(
lhs	SimpleName	MethodInvocation
.
getLng	SimpleName	MethodInvocation
(
)
)
;
}
catch
(
Exception	SimpleName	SimpleType
ex	SimpleName	SingleVariableDeclaration
)
{
return
1	NumberLiteral	ReturnStatement
;
}
try
{
endLat	SimpleName	Assignment
=
Double	SimpleName	MethodInvocation
.
parseDouble	SimpleName	MethodInvocation
(
rhs	SimpleName	MethodInvocation
.
getLat	SimpleName	MethodInvocation
(
)
)
;
endLng	SimpleName	Assignment
=
Double	SimpleName	MethodInvocation
.
parseDouble	SimpleName	MethodInvocation
(
rhs	SimpleName	MethodInvocation
.
getLng	SimpleName	MethodInvocation
(
)
)
;
}
catch
(
Exception	SimpleName	SimpleType
ex	SimpleName	SingleVariableDeclaration
)
{
return
-
1	NumberLiteral	PrefixExpression
;
}
public	Modifier	TypeDeclaration
class
Player	SimpleName	TypeDeclaration
{
}
public	Modifier	TypeDeclaration
class
Warrior	SimpleName	TypeDeclaration
extends
Player	SimpleName	SimpleType
{
}
public	Modifier	TypeDeclaration
class
MainActivity	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
@
Override	SimpleName	MarkerAnnotation
protected	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
activity_main	SimpleName	QualifiedName
)
;
Player	SimpleName	SimpleType
p	SimpleName	VariableDeclarationFragment
=
new
Warrior	SimpleName	SimpleType
(
)
;
}
}
public	Modifier	TypeDeclaration
class
AndroidCamera	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
implements
OnTouchListener	SimpleName	SimpleType
,
SurfaceHolder	SimpleName	QualifiedName
.
Callback	SimpleName	QualifiedName
{
Camera	SimpleName	SimpleType
camera	SimpleName	VariableDeclarationFragment
;
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
main	SimpleName	QualifiedName
)
;
Button	SimpleName	SimpleType
buttonStartCameraPreview	SimpleName	VariableDeclarationFragment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
startcamerapreview	SimpleName	QualifiedName
)
;
Button	SimpleName	SimpleType
buttonStopCameraPreview	SimpleName	VariableDeclarationFragment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
stopcamerapreview	SimpleName	QualifiedName
)
;
Button	SimpleName	SimpleType
buttonCapturePreview	SimpleName	VariableDeclarationFragment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
capturepreview	SimpleName	QualifiedName
)
;
txtData	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
editText1	SimpleName	QualifiedName
)
;
Info	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
Name	SimpleName	QualifiedName
)
;
Info	SimpleName	MethodInvocation
.
setHint	SimpleName	MethodInvocation
(
"enter  name"	StringLiteral	MethodInvocation
)
;
Age	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
Age	SimpleName	QualifiedName
)
;
Age	SimpleName	MethodInvocation
.
setHint	SimpleName	MethodInvocation
(
"Age"	StringLiteral	MethodInvocation
)
;
getWindow	SimpleName	MethodInvocation
(
)
.
setFormat	SimpleName	MethodInvocation
(
PixelFormat	SimpleName	QualifiedName
.
UNKNOWN	SimpleName	QualifiedName
)
;
surfaceView	SimpleName	Assignment
=
(
SurfaceView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
surfaceview	SimpleName	QualifiedName
)
;
SurfaceView	SimpleName	SimpleType
surfaceView	SimpleName	VariableDeclarationFragment
;
surfaceHolder	SimpleName	Assignment
=
surfaceView	SimpleName	MethodInvocation
.
getHolder	SimpleName	MethodInvocation
(
)
;
surfaceHolder	SimpleName	MethodInvocation
.
addCallback	SimpleName	MethodInvocation
(
this
)
;
rawCallback	SimpleName	Assignment
=
new
PictureCallback	SimpleName	SimpleType
(
)
{
public	Modifier	MethodDeclaration
void
onPictureTaken	SimpleName	MethodDeclaration
(
byte
[
]
data	SimpleName	SingleVariableDeclaration
,
Camera	SimpleName	SimpleType
camera	SimpleName	SingleVariableDeclaration
)
{
Log	SimpleName	MethodInvocation
.
d	SimpleName	MethodInvocation
(
"Log"	StringLiteral	MethodInvocation
,
"onPictureTaken - raw"	StringLiteral	MethodInvocation
)
;
}
}
;
shutterCallback	SimpleName	Assignment
=
new
ShutterCallback	SimpleName	SimpleType
(
)
{
public	Modifier	MethodDeclaration
void
onShutter	SimpleName	MethodDeclaration
(
)
{
Log	SimpleName	MethodInvocation
.
i	SimpleName	MethodInvocation
(
"Log"	StringLiteral	MethodInvocation
,
"onShutter'd"	StringLiteral	MethodInvocation
)
;
}
}
;
jpegCallback	SimpleName	Assignment
=
new
PictureCallback	SimpleName	SimpleType
(
)
{
public	Modifier	MethodDeclaration
void
onPictureTaken	SimpleName	MethodDeclaration
(
byte
[
]
data	SimpleName	SingleVariableDeclaration
,
Camera	SimpleName	SimpleType
camera	SimpleName	SingleVariableDeclaration
)
{
Intent	SimpleName	SimpleType
imageIntent	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
android	SimpleName	QualifiedName
.
provider	SimpleName	QualifiedName
.
MediaStore	SimpleName	QualifiedName
.
ACTION_IMAGE_CAPTURE	SimpleName	QualifiedName
)
;
File	SimpleName	SimpleType
imagesFolder	SimpleName	VariableDeclarationFragment
=
new
File	SimpleName	SimpleType
(
Environment	SimpleName	MethodInvocation
.
getExternalStorageDirectory	SimpleName	MethodInvocation
(
)
,
"Asw"	StringLiteral	ClassInstanceCreation
)
;
imagesFolder	SimpleName	MethodInvocation
.
mkdirs	SimpleName	MethodInvocation
(
)
;
Date	SimpleName	SimpleType
d	SimpleName	VariableDeclarationFragment
=
new
Date	SimpleName	SimpleType
(
)
;
CharSequence	SimpleName	SimpleType
s	SimpleName	VariableDeclarationFragment
=
DateFormat	SimpleName	MethodInvocation
.
format	SimpleName	MethodInvocation
(
"MM-dd-yy hh-mm-ss"	StringLiteral	MethodInvocation
,
d	SimpleName	MethodInvocation
.
getTime	SimpleName	MethodInvocation
(
)
)
;
File	SimpleName	SimpleType
output	SimpleName	VariableDeclarationFragment
=
new
File	SimpleName	SimpleType
(
imagesFolder	SimpleName	ClassInstanceCreation
,
s	SimpleName	MethodInvocation
.
toString	SimpleName	MethodInvocation
(
)
+
".jpg"	StringLiteral	InfixExpression
)
;
Uri	SimpleName	SimpleType
uriSavedImage	SimpleName	VariableDeclarationFragment
=
Uri	SimpleName	MethodInvocation
.
fromFile	SimpleName	MethodInvocation
(
output	SimpleName	MethodInvocation
)
;
imageIntent	SimpleName	MethodInvocation
.
putExtra	SimpleName	MethodInvocation
(
MediaStore	SimpleName	QualifiedName
.
EXTRA_OUTPUT	SimpleName	QualifiedName
,
uriSavedImage	SimpleName	MethodInvocation
)
;
OutputStream	SimpleName	SimpleType
imageFileOS	SimpleName	VariableDeclarationFragment
;
try
{
imageFileOS	SimpleName	Assignment
=
getContentResolver	SimpleName	MethodInvocation
(
)
.
openOutputStream	SimpleName	MethodInvocation
(
uriSavedImage	SimpleName	MethodInvocation
)
;
imageFileOS	SimpleName	MethodInvocation
.
write	SimpleName	MethodInvocation
(
data	SimpleName	MethodInvocation
)
;
imageFileOS	SimpleName	MethodInvocation
.
flush	SimpleName	MethodInvocation
(
)
;
imageFileOS	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
AndroidCamera	SimpleName	ThisExpression
.
this
,
"Image saved: "	StringLiteral	MethodInvocation
,
Toast	SimpleName	QualifiedName
.
LENGTH_LONG	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
}
catch
(
FileNotFoundException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
catch
(
IOException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
finally
{
}
Log	SimpleName	MethodInvocation
.
d	SimpleName	MethodInvocation
(
"Log"	StringLiteral	MethodInvocation
,
"onPictureTaken - jpeg"	StringLiteral	MethodInvocation
)
;
}
}
;
buttonStartCameraPreview	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
Button	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
@
TargetApi	SimpleName	SingleMemberAnnotation
(
Build	SimpleName	QualifiedName
.
VERSION_CODES	SimpleName	QualifiedName
.
GINGERBREAD	SimpleName	QualifiedName
)
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
if
(
!
previewing	SimpleName	PrefixExpression
)
{
camera	SimpleName	Assignment
=
Camera	SimpleName	MethodInvocation
.
open	SimpleName	MethodInvocation
(
0	NumberLiteral	MethodInvocation
)
;
if
(
camera	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
{
try
{
camera	SimpleName	MethodInvocation
.
setPreviewDisplay	SimpleName	MethodInvocation
(
surfaceHolder	SimpleName	MethodInvocation
)
;
camera	SimpleName	MethodInvocation
.
startPreview	SimpleName	MethodInvocation
(
)
;
previewing	SimpleName	Assignment
=
true	BooleanLiteral	Assignment
;
}
catch
(
IOException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
}
else
txtData	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
"null"	StringLiteral	MethodInvocation
)
;
}
}
}
)
;
buttonCapturePreview	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
OnClickListener	SimpleName	SimpleType
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
captureImage	SimpleName	MethodInvocation
(
)
;
}
private	Modifier	MethodDeclaration
void
captureImage	SimpleName	MethodDeclaration
(
)
{
camera	SimpleName	MethodInvocation
.
takePicture	SimpleName	MethodInvocation
(
shutterCallback	SimpleName	MethodInvocation
,
rawCallback	SimpleName	MethodInvocation
,
jpegCallback	SimpleName	MethodInvocation
)
;
}
}
)
;
buttonStopCameraPreview	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
Button	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
if
(
camera	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
&
amp	SimpleName	InfixExpression
;
&
amp	SimpleName	ExpressionMethodReference
;
previewing	SimpleName	ExpressionMethodReference
)
{
camera	SimpleName	MethodInvocation
.
stopPreview	SimpleName	MethodInvocation
(
)
;
camera	SimpleName	MethodInvocation
.
release	SimpleName	MethodInvocation
(
)
;
camera	SimpleName	Assignment
=
null	NullLiteral	Assignment
;
previewing	SimpleName	Assignment
=
false	BooleanLiteral	Assignment
;
}
}
}
)
;
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
boolean
onCreateOptionsMenu	SimpleName	MethodDeclaration
(
Menu	SimpleName	SimpleType
menu	SimpleName	SingleVariableDeclaration
)
{
getMenuInflater	SimpleName	MethodInvocation
(
)
.
inflate	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
menu	SimpleName	QualifiedName
.
android_camera	SimpleName	QualifiedName
,
menu	SimpleName	MethodInvocation
)
;
return
true	BooleanLiteral	ReturnStatement
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
surfaceChanged	SimpleName	MethodDeclaration
(
SurfaceHolder	SimpleName	SimpleType
holder	SimpleName	SingleVariableDeclaration
,
int
format	SimpleName	SingleVariableDeclaration
,
int
width	SimpleName	SingleVariableDeclaration
,
int
height	SimpleName	SingleVariableDeclaration
)
{
}
SurfaceHolder	SimpleName	SimpleType
surfaceHolder	SimpleName	VariableDeclarationFragment
;
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
surfaceCreated	SimpleName	MethodDeclaration
(
SurfaceHolder	SimpleName	SimpleType
holder	SimpleName	SingleVariableDeclaration
)
{
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
surfaceDestroyed	SimpleName	MethodDeclaration
(
SurfaceHolder	SimpleName	SimpleType
holder	SimpleName	SingleVariableDeclaration
)
{
}
public	Modifier	MethodDeclaration
boolean
onTouch	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
,
MotionEvent	SimpleName	SimpleType
event	SimpleName	SingleVariableDeclaration
)
{
if
(
event	SimpleName	MethodInvocation
.
getAction	SimpleName	MethodInvocation
(
)
==
MotionEvent	SimpleName	QualifiedName
.
ACTION_MOVE	SimpleName	QualifiedName
)
{
camera	SimpleName	MethodInvocation
.
takePicture	SimpleName	MethodInvocation
(
shutterCallback	SimpleName	MethodInvocation
,
rawCallback	SimpleName	MethodInvocation
,
jpegCallback	SimpleName	MethodInvocation
)
;
}
return
super
.
onTouchEvent	SimpleName	SuperMethodInvocation
(
event	SimpleName	SuperMethodInvocation
)
;
}
boolean
previewing	SimpleName	VariableDeclarationFragment
=
false	BooleanLiteral	VariableDeclarationFragment
;
;	EmptyStatement	Block
PictureCallback	SimpleName	SimpleType
rawCallback	SimpleName	VariableDeclarationFragment
;
ShutterCallback	SimpleName	SimpleType
shutterCallback	SimpleName	VariableDeclarationFragment
;
PictureCallback	SimpleName	SimpleType
jpegCallback	SimpleName	VariableDeclarationFragment
;
EditText	SimpleName	SimpleType
txtData	SimpleName	VariableDeclarationFragment
,
Info	SimpleName	VariableDeclarationFragment
,
Age	SimpleName	VariableDeclarationFragment
;
@
Override	SimpleName	MarkerAnnotation
protected	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
Public	Modifier	TypeDeclaration
AClass	SimpleName	TypeDeclaration
extends
BClass	SimpleName	SimpleType
{
AClass	SimpleName	MethodDeclaration
(
Context	SimpleName	SimpleType
c	SimpleName	SingleVariableDeclaration
)
{
super
(
c	SimpleName	SuperConstructorInvocation
)
;
}
AClass	SimpleName	MethodDeclaration
(
Context	SimpleName	SimpleType
c	SimpleName	SingleVariableDeclaration
,
Attr	SimpleName	SimpleType
a	SimpleName	SingleVariableDeclaration
)
{
super
(
c	SimpleName	SuperConstructorInvocation
,
a	SimpleName	SuperConstructorInvocation
)
;
this
(
c	SimpleName	ConstructorInvocation
)
}
}
AClass	SimpleName	MethodDeclaration
(
Context	SimpleName	SimpleType
c	SimpleName	SingleVariableDeclaration
,
Attr	SimpleName	SimpleType
a	SimpleName	SingleVariableDeclaration
)
:
this
(
c	SimpleName	ConstructorInvocation
)
{
super
(
c	SimpleName	SuperConstructorInvocation
,
a	SimpleName	SuperConstructorInvocation
)
;
}
public	Modifier	TypeDeclaration
class
MainActivity	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
implements
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
{
Button	SimpleName	SimpleType
calculate	SimpleName	VariableDeclarationFragment
;
EditText	SimpleName	SimpleType
grade	SimpleName	VariableDeclarationFragment
,
wantedGrade	SimpleName	VariableDeclarationFragment
,
finalValue	SimpleName	VariableDeclarationFragment
;
calculate	SimpleName	Assignment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button1	SimpleName	QualifiedName
)
;
grade	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
editText1	SimpleName	QualifiedName
)
;
wantedGrade	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
editText2	SimpleName	QualifiedName
)
;
finalValue	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
editText3	SimpleName	QualifiedName
)
;
@
Override	SimpleName	MarkerAnnotation
protected	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
activity_main	SimpleName	QualifiedName
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
boolean
onCreateOptionsMenu	SimpleName	MethodDeclaration
(
Menu	SimpleName	SimpleType
menu	SimpleName	SingleVariableDeclaration
)
{
getMenuInflater	SimpleName	MethodInvocation
(
)
.
inflate	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
menu	SimpleName	QualifiedName
.
main	SimpleName	QualifiedName
,
menu	SimpleName	MethodInvocation
)
;
return
true	BooleanLiteral	ReturnStatement
;
}
public	Modifier	MethodDeclaration
void
reCalc	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
view	SimpleName	SingleVariableDeclaration
)
{
double
target	SimpleName	VariableDeclarationFragment
;
double
current	SimpleName	VariableDeclarationFragment
=
Double	SimpleName	MethodInvocation
.
parseDouble	SimpleName	MethodInvocation
(
grade	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
)
;
double
desired	SimpleName	VariableDeclarationFragment
=
Double	SimpleName	MethodInvocation
.
parseDouble	SimpleName	MethodInvocation
(
wantedGrade	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
)
;
double
finalWeight	SimpleName	VariableDeclarationFragment
=
Double	SimpleName	MethodInvocation
.
parseDouble	SimpleName	MethodInvocation
(
finalValue	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
)
/
100	NumberLiteral	InfixExpression
;
double
normalWeight	SimpleName	VariableDeclarationFragment
=
1.0	NumberLiteral	InfixExpression
-
finalWeight	SimpleName	InfixExpression
;
target	SimpleName	Assignment
=
(
desired	SimpleName	InfixExpression
-
(
current	SimpleName	InfixExpression
*
normalWeight	SimpleName	InfixExpression
)
)
/
finalWeight	SimpleName	InfixExpression
;
AlertDialog	SimpleName	SimpleType
gradeMessenger	SimpleName	VariableDeclarationFragment
=
new
AlertDialog	SimpleName	QualifiedName
.
Builder	SimpleName	QualifiedName
(
this
)
.
create	SimpleName	MethodInvocation
(
)
;
gradeMessenger	SimpleName	MethodInvocation
.
setMessage	SimpleName	MethodInvocation
(
"You need a "	StringLiteral	InfixExpression
+
target	SimpleName	InfixExpression
+
" percent on the final to get a "	StringLiteral	InfixExpression
+
desired	SimpleName	InfixExpression
+
" in the class."	StringLiteral	InfixExpression
)
;
gradeMessenger	SimpleName	MethodInvocation
.
setCancelable	SimpleName	MethodInvocation
(
true	BooleanLiteral	MethodInvocation
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
}
}
public	Modifier	VariableDeclarationStatement
void
Add	SimpleName	VariableDeclarationFragment
(
View	SimpleName	SimpleType
view	SimpleName	VariableDeclarationFragment
)
{
float
a	SimpleName	VariableDeclarationFragment
=
0	NumberLiteral	VariableDeclarationFragment
,
b	SimpleName	VariableDeclarationFragment
=
0	NumberLiteral	VariableDeclarationFragment
,
res	SimpleName	VariableDeclarationFragment
=
0	NumberLiteral	VariableDeclarationFragment
;
EditText	SimpleName	SimpleType
num1	SimpleName	VariableDeclarationFragment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
editText1	SimpleName	QualifiedName
)
;
EditText	SimpleName	SimpleType
num2	SimpleName	VariableDeclarationFragment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
editText2	SimpleName	QualifiedName
)
;
TextView	SimpleName	SimpleType
function	SimpleName	VariableDeclarationFragment
=
(
TextView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
textView4	SimpleName	QualifiedName
)
;
TextView	SimpleName	SimpleType
ans	SimpleName	VariableDeclarationFragment
=
(
TextView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
textView5	SimpleName	QualifiedName
)
;
a	SimpleName	Assignment
=
Float	SimpleName	MethodInvocation
.
parseFloat	SimpleName	MethodInvocation
(
num1	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
)
;
b	SimpleName	Assignment
=
Float	SimpleName	MethodInvocation
.
parseFloat	SimpleName	MethodInvocation
(
num2	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
)
;
String	SimpleName	SimpleType
str1	SimpleName	VariableDeclarationFragment
=
Float	SimpleName	MethodInvocation
.
toString	SimpleName	MethodInvocation
(
a	SimpleName	MethodInvocation
)
;
String	SimpleName	SimpleType
str2	SimpleName	VariableDeclarationFragment
=
Float	SimpleName	MethodInvocation
.
toString	SimpleName	MethodInvocation
(
b	SimpleName	MethodInvocation
)
;
if
(
str1	SimpleName	InfixExpression
==
""	StringLiteral	InfixExpression
)
{
function	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
"Enter both Numbers"	StringLiteral	MethodInvocation
)
;
ans	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
""	StringLiteral	MethodInvocation
)
;
return
;
}
if
(
str2	SimpleName	InfixExpression
==
""	StringLiteral	InfixExpression
)
{
function	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
"Enter both Numbers"	StringLiteral	MethodInvocation
)
;
ans	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
""	StringLiteral	MethodInvocation
)
;
return
;
}
res	SimpleName	Assignment
=
a	SimpleName	InfixExpression
+
b	SimpleName	InfixExpression
;
String	SimpleName	SimpleType
str	SimpleName	VariableDeclarationFragment
=
Float	SimpleName	MethodInvocation
.
toString	SimpleName	MethodInvocation
(
res	SimpleName	MethodInvocation
)
;
function	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
"addition"	StringLiteral	MethodInvocation
)
;
ans	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
str	SimpleName	MethodInvocation
)
;
}
if
(
str1	SimpleName	InfixExpression
==
'\0'	CharacterLiteral	InfixExpression
)
{
function	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
"Enter both Numbers"	StringLiteral	MethodInvocation
)
;
ans	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
""	StringLiteral	MethodInvocation
)
;
return
;
}
package
com	SimpleName	QualifiedName
.
example	SimpleName	QualifiedName
.
prs	SimpleName	QualifiedName
;
import
java	SimpleName	QualifiedName
.
io	SimpleName	QualifiedName
.
BufferedReader	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
Menu	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
TextView	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
PrsActivity	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
private	Modifier	FieldDeclaration
TextView	SimpleName	SimpleType
title	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
String	SimpleName	SimpleType
url	SimpleName	VariableDeclarationFragment
=
"http://www.google.com"	StringLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
String	SimpleName	SimpleType
pageHtml	SimpleName	VariableDeclarationFragment
;
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
activity_prs	SimpleName	QualifiedName
)
;
title	SimpleName	Assignment
=
(
TextView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
title	SimpleName	QualifiedName
)
;
HttpClient	SimpleName	SimpleType
client	SimpleName	VariableDeclarationFragment
=
new
DefaultHttpClient	SimpleName	SimpleType
(
)
;
HttpGet	SimpleName	SimpleType
request	SimpleName	VariableDeclarationFragment
=
new
HttpGet	SimpleName	SimpleType
(
url	SimpleName	ClassInstanceCreation
)
;
HttpResponse	SimpleName	SimpleType
response	SimpleName	VariableDeclarationFragment
=
client	SimpleName	MethodInvocation
.
execute	SimpleName	MethodInvocation
(
request	SimpleName	MethodInvocation
)
;
String	SimpleName	SimpleType
html	SimpleName	VariableDeclarationFragment
=
""	StringLiteral	VariableDeclarationFragment
;
InputStream	SimpleName	SimpleType
in	SimpleName	VariableDeclarationFragment
=
response	SimpleName	MethodInvocation
.
getEntity	SimpleName	MethodInvocation
(
)
.
getContent	SimpleName	MethodInvocation
(
)
;
BufferedReader	SimpleName	SimpleType
reader	SimpleName	VariableDeclarationFragment
=
new
BufferedReader	SimpleName	SimpleType
(
new
InputStreamReader	SimpleName	SimpleType
(
in	SimpleName	ClassInstanceCreation
)
)
;
StringBuilder	SimpleName	SimpleType
str	SimpleName	VariableDeclarationFragment
=
new
StringBuilder	SimpleName	SimpleType
(
)
;
String	SimpleName	SimpleType
line	SimpleName	VariableDeclarationFragment
=
null	NullLiteral	VariableDeclarationFragment
;
while
(
(
line	SimpleName	Assignment
=
reader	SimpleName	MethodInvocation
.
readLine	SimpleName	MethodInvocation
(
)
)
!=
null	NullLiteral	InfixExpression
)
{
str	SimpleName	MethodInvocation
.
append	SimpleName	MethodInvocation
(
line	SimpleName	MethodInvocation
)
;
}
in	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
html	SimpleName	Assignment
=
str	SimpleName	MethodInvocation
.
toString	SimpleName	MethodInvocation
(
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
boolean
onCreateOptionsMenu	SimpleName	MethodDeclaration
(
Menu	SimpleName	SimpleType
menu	SimpleName	SingleVariableDeclaration
)
{
getMenuInflater	SimpleName	MethodInvocation
(
)
.
inflate	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
menu	SimpleName	QualifiedName
.
activity_prs	SimpleName	QualifiedName
,
menu	SimpleName	MethodInvocation
)
;
return
true	BooleanLiteral	ReturnStatement
;
}
}
package
com	SimpleName	QualifiedName
.
example	SimpleName	QualifiedName
.
prs	SimpleName	QualifiedName
;
import
java	SimpleName	QualifiedName
.
io	SimpleName	QualifiedName
.
BufferedReader	SimpleName	QualifiedName
;
import
java	SimpleName	QualifiedName
.
io	SimpleName	QualifiedName
.
IOException	SimpleName	QualifiedName
;
import
java	SimpleName	QualifiedName
.
io	SimpleName	QualifiedName
.
InputStream	SimpleName	QualifiedName
;
import
java	SimpleName	QualifiedName
.
io	SimpleName	QualifiedName
.
InputStreamReader	SimpleName	QualifiedName
;
import
org	SimpleName	QualifiedName
.
apache	SimpleName	QualifiedName
.
http	SimpleName	QualifiedName
.
HttpResponse	SimpleName	QualifiedName
;
import
java	SimpleName	QualifiedName
.
io	SimpleName	QualifiedName
.
InputStream	SimpleName	QualifiedName
;
import
org	SimpleName	QualifiedName
.
apache	SimpleName	QualifiedName
.
http	SimpleName	QualifiedName
.
client	SimpleName	QualifiedName
.
ClientProtocolException	SimpleName	QualifiedName
;
import
org	SimpleName	QualifiedName
.
apache	SimpleName	QualifiedName
.
http	SimpleName	QualifiedName
.
client	SimpleName	QualifiedName
.
HttpClient	SimpleName	QualifiedName
;
import
org	SimpleName	QualifiedName
.
apache	SimpleName	QualifiedName
.
http	SimpleName	QualifiedName
.
client	SimpleName	QualifiedName
.
methods	SimpleName	QualifiedName
.
HttpGet	SimpleName	QualifiedName
;
import
org	SimpleName	QualifiedName
.
apache	SimpleName	QualifiedName
.
http	SimpleName	QualifiedName
.
impl	SimpleName	QualifiedName
.
client	SimpleName	QualifiedName
.
DefaultHttpClient	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Activity	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
Menu	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
TextView	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
PrsActivity	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
private	Modifier	FieldDeclaration
TextView	SimpleName	SimpleType
title	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
String	SimpleName	SimpleType
url	SimpleName	VariableDeclarationFragment
=
"http://www.google.com"	StringLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
String	SimpleName	SimpleType
pageHtml	SimpleName	VariableDeclarationFragment
;
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
activity_prs	SimpleName	QualifiedName
)
;
title	SimpleName	Assignment
=
(
TextView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
title	SimpleName	QualifiedName
)
;
HttpClient	SimpleName	SimpleType
client	SimpleName	VariableDeclarationFragment
=
new
DefaultHttpClient	SimpleName	SimpleType
(
)
;
HttpGet	SimpleName	SimpleType
request	SimpleName	VariableDeclarationFragment
=
new
HttpGet	SimpleName	SimpleType
(
url	SimpleName	ClassInstanceCreation
)
;
HttpResponse	SimpleName	SimpleType
response	SimpleName	VariableDeclarationFragment
;
try
{
response	SimpleName	Assignment
=
client	SimpleName	MethodInvocation
.
execute	SimpleName	MethodInvocation
(
request	SimpleName	MethodInvocation
)
;
}
catch
(
ClientProtocolException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
catch
(
IOException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
String	SimpleName	SimpleType
html	SimpleName	VariableDeclarationFragment
=
""	StringLiteral	VariableDeclarationFragment
;
InputStream	SimpleName	SimpleType
in	SimpleName	VariableDeclarationFragment
;
try
{
in	SimpleName	Assignment
=
response	SimpleName	MethodInvocation
.
getEntity	SimpleName	MethodInvocation
(
)
.
getContent	SimpleName	MethodInvocation
(
)
;
}
catch
(
IllegalStateException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
catch
(
IOException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
BufferedReader	SimpleName	SimpleType
reader	SimpleName	VariableDeclarationFragment
=
new
BufferedReader	SimpleName	SimpleType
(
new
InputStreamReader	SimpleName	SimpleType
(
in	SimpleName	ClassInstanceCreation
)
)
;
StringBuilder	SimpleName	SimpleType
str	SimpleName	VariableDeclarationFragment
=
new
StringBuilder	SimpleName	SimpleType
(
)
;
String	SimpleName	SimpleType
line	SimpleName	VariableDeclarationFragment
=
null	NullLiteral	VariableDeclarationFragment
;
try
{
while
(
(
line	SimpleName	Assignment
=
reader	SimpleName	MethodInvocation
.
readLine	SimpleName	MethodInvocation
(
)
)
!=
null	NullLiteral	InfixExpression
)
{
str	SimpleName	MethodInvocation
.
append	SimpleName	MethodInvocation
(
line	SimpleName	MethodInvocation
)
;
}
}
catch
(
IOException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
try
{
in	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
}
catch
(
IOException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
html	SimpleName	Assignment
=
str	SimpleName	MethodInvocation
.
toString	SimpleName	MethodInvocation
(
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
boolean
onCreateOptionsMenu	SimpleName	MethodDeclaration
(
Menu	SimpleName	SimpleType
menu	SimpleName	SingleVariableDeclaration
)
{
getMenuInflater	SimpleName	MethodInvocation
(
)
.
inflate	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
menu	SimpleName	QualifiedName
.
activity_prs	SimpleName	QualifiedName
,
menu	SimpleName	MethodInvocation
)
;
return
true	BooleanLiteral	ReturnStatement
;
}
}
import
java	SimpleName	QualifiedName
.
io	SimpleName	QualifiedName
.
InputStreamReader	SimpleName	QualifiedName
;
import
org	SimpleName	QualifiedName
.
apache	SimpleName	QualifiedName
.
http	SimpleName	QualifiedName
.
HttpResponse	SimpleName	QualifiedName
;
import
org	SimpleName	QualifiedName
.
apache	SimpleName	QualifiedName
.
http	SimpleName	QualifiedName
.
client	SimpleName	QualifiedName
.
HttpClient	SimpleName	QualifiedName
;
import
org	SimpleName	QualifiedName
.
apache	SimpleName	QualifiedName
.
http	SimpleName	QualifiedName
.
client	SimpleName	QualifiedName
.
methods	SimpleName	QualifiedName
.
HttpGet	SimpleName	QualifiedName
;
import
org	SimpleName	QualifiedName
.
apache	SimpleName	QualifiedName
.
http	SimpleName	QualifiedName
.
impl	SimpleName	QualifiedName
.
client	SimpleName	QualifiedName
.
DefaultHttpClient	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Activity	SimpleName	QualifiedName
;
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
boolean
onOptionsItemSelected	SimpleName	MethodDeclaration
(
MenuItem	SimpleName	SimpleType
item	SimpleName	SingleVariableDeclaration
)
{
int
id	SimpleName	VariableDeclarationFragment
=
item	SimpleName	MethodInvocation
.
getItemId	SimpleName	MethodInvocation
(
)
;
if
(
id	SimpleName	InfixExpression
==
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
action_settings	SimpleName	QualifiedName
)
{
return
true	BooleanLiteral	ReturnStatement
;
if
(
id	SimpleName	InfixExpression
==
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
action_search	SimpleName	QualifiedName
)
{
return
true	BooleanLiteral	ReturnStatement
;
}
return
super
.
onOptionsItemSelected	SimpleName	SuperMethodInvocation
(
item	SimpleName	SuperMethodInvocation
)
;
switch
(
item	SimpleName	MethodInvocation
.
getItemId	SimpleName	MethodInvocation
(
)
)
{
case
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
action_search	SimpleName	QualifiedName
:
openSearch	SimpleName	MethodInvocation
(
)
;
return
true	BooleanLiteral	ReturnStatement
;
case
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
action_settings	SimpleName	QualifiedName
:
openSettings	SimpleName	MethodInvocation
(
)
;
return
true	BooleanLiteral	ReturnStatement
;
default
:
return
super
.
onOptionsItemSelected	SimpleName	SuperMethodInvocation
(
item	SimpleName	SuperMethodInvocation
)
;
}
}
public	Modifier	TypeDeclaration
class
saeedHelperBD	SimpleName	TypeDeclaration
extends
SQLiteOpenHelper	SimpleName	SimpleType
{
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
String	SimpleName	SimpleType
DATABASE_NAME	SimpleName	VariableDeclarationFragment
=
"saeedDataBase"	StringLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
String	SimpleName	SimpleType
TABLE_NAME	SimpleName	VariableDeclarationFragment
=
"saeedTable"	StringLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
int
DATABASE_VERSION	SimpleName	VariableDeclarationFragment
=
1	NumberLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
String	SimpleName	SimpleType
UID	SimpleName	VariableDeclarationFragment
=
"_id"	StringLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
String	SimpleName	SimpleType
NAME	SimpleName	VariableDeclarationFragment
=
"Name"	StringLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
String	SimpleName	SimpleType
ADRESS	SimpleName	VariableDeclarationFragment
=
"Adress"	StringLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
String	SimpleName	SimpleType
CREAT_TABLE	SimpleName	VariableDeclarationFragment
=
"CREATE TABLE "	StringLiteral	InfixExpression
+
TABLE_NAME	SimpleName	InfixExpression
+
" ("	StringLiteral	InfixExpression
+
UID	SimpleName	InfixExpression
+
"                INTEGER PRIMARY KEY AUTOINCREMENT , "	StringLiteral	InfixExpression
+
NAME	SimpleName	InfixExpression
+
" VARCHAR(225));"	StringLiteral	InfixExpression
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
String	SimpleName	SimpleType
DROP_TABLE	SimpleName	VariableDeclarationFragment
=
"DROP TABLE IF EXISTS "	StringLiteral	InfixExpression
+
TABLE_NAME	SimpleName	InfixExpression
;
private	Modifier	FieldDeclaration
Context	SimpleName	SimpleType
context	SimpleName	VariableDeclarationFragment
;
public	Modifier	MethodDeclaration
saeedHelperBD	SimpleName	MethodDeclaration
(
Context	SimpleName	SimpleType
con	SimpleName	SingleVariableDeclaration
)
{
super
(
con	SimpleName	SuperConstructorInvocation
,
DATABASE_NAME	SimpleName	SuperConstructorInvocation
,
null	NullLiteral	SuperConstructorInvocation
,
DATABASE_VERSION	SimpleName	SuperConstructorInvocation
)
;
this
.
context	SimpleName	FieldAccess
=
con	SimpleName	Assignment
;
Message	SimpleName	MethodInvocation
.
message	SimpleName	MethodInvocation
(
context	SimpleName	MethodInvocation
,
"constructor called"	StringLiteral	MethodInvocation
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
SQLiteDatabase	SimpleName	SimpleType
db	SimpleName	SingleVariableDeclaration
)
{
try
{
Message	SimpleName	MethodInvocation
.
message	SimpleName	MethodInvocation
(
context	SimpleName	MethodInvocation
,
"onCreate was called"	StringLiteral	MethodInvocation
)
;
db	SimpleName	MethodInvocation
.
execSQL	SimpleName	MethodInvocation
(
CREAT_TABLE	SimpleName	MethodInvocation
)
;
}
catch
(
SQLException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
Message	SimpleName	MethodInvocation
.
message	SimpleName	MethodInvocation
(
context	SimpleName	MethodInvocation
,
""	StringLiteral	InfixExpression
+
e	SimpleName	InfixExpression
)
;
}
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onUpgrade	SimpleName	MethodDeclaration
(
SQLiteDatabase	SimpleName	SimpleType
db	SimpleName	SingleVariableDeclaration
,
int
arg1	SimpleName	SingleVariableDeclaration
,
int
arg2	SimpleName	SingleVariableDeclaration
)
{
db	SimpleName	MethodInvocation
.
execSQL	SimpleName	MethodInvocation
(
DROP_TABLE	SimpleName	MethodInvocation
)
;
try
{
Message	SimpleName	MethodInvocation
.
message	SimpleName	MethodInvocation
(
context	SimpleName	MethodInvocation
,
"onUpgrade was called"	StringLiteral	MethodInvocation
)
;
onCreate	SimpleName	MethodInvocation
(
db	SimpleName	MethodInvocation
)
;
}
catch
(
SQLException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
Message	SimpleName	MethodInvocation
.
message	SimpleName	MethodInvocation
(
context	SimpleName	MethodInvocation
,
""	StringLiteral	InfixExpression
+
e	SimpleName	InfixExpression
)
;
}
}
main	SimpleName	MethodDeclaration
(
)
}
saeedHelperBD	SimpleName	SimpleType
firstBD	SimpleName	VariableDeclarationFragment
;
public	Modifier	TypeDeclaration
class
MainActivity	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
saeedHelperBD	SimpleName	SimpleType
firstBD	SimpleName	VariableDeclarationFragment
;
SQLiteDatabase	SimpleName	SimpleType
sqlBD	SimpleName	VariableDeclarationFragment
=
firstBD	SimpleName	VariableDeclarationFragment
;
}
package
com	SimpleName	QualifiedName
.
example	SimpleName	QualifiedName
.
net	SimpleName	QualifiedName
.
saeed	SimpleName	QualifiedName
.
sqlitedb	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Activity	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
database	SimpleName	QualifiedName
.
sqlite	SimpleName	QualifiedName
.
SQLiteDatabase	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
Menu	SimpleName	QualifiedName
;
Intent	SimpleName	SimpleType
go	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
"android.intent.action.NEWTOURNAMENT"	StringLiteral	ClassInstanceCreation
)
;
startActivityForResult	SimpleName	MethodInvocation
(
go	SimpleName	MethodInvocation
,
2	NumberLiteral	MethodInvocation
)
;
public	Modifier	MethodDeclaration
boolean
checkValues	SimpleName	MethodDeclaration
(
)
{
allValuesCorrect	SimpleName	Assignment
=
true	BooleanLiteral	Assignment
;
if
(
venue	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
.
equals	SimpleName	MethodInvocation
(
""	StringLiteral	MethodInvocation
)
)
{
allValuesCorrect	SimpleName	Assignment
=
false	BooleanLiteral	Assignment
;
}
if
(
buyin	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
.
equals	SimpleName	MethodInvocation
(
null	NullLiteral	MethodInvocation
)
)
{
allValuesCorrect	SimpleName	Assignment
=
false	BooleanLiteral	Assignment
;
}
if
(
fee	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
.
equals	SimpleName	MethodInvocation
(
null	NullLiteral	MethodInvocation
)
)
{
allValuesCorrect	SimpleName	Assignment
=
false	BooleanLiteral	Assignment
;
}
if
(
mm	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
.
equals	SimpleName	MethodInvocation
(
null	NullLiteral	MethodInvocation
)
)
{
allValuesCorrect	SimpleName	Assignment
=
false	BooleanLiteral	Assignment
;
}
if
(
dd	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
.
equals	SimpleName	MethodInvocation
(
null	NullLiteral	MethodInvocation
)
)
{
allValuesCorrect	SimpleName	Assignment
=
false	BooleanLiteral	Assignment
;
}
if
(
yyyy	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
.
equals	SimpleName	MethodInvocation
(
null	NullLiteral	MethodInvocation
)
)
{
allValuesCorrect	SimpleName	Assignment
=
false	BooleanLiteral	Assignment
;
}
return
allValuesCorrect	SimpleName	ReturnStatement
;
}
public	Modifier	MethodDeclaration
void
send	SimpleName	MethodDeclaration
(
)
{
if
(
checkValues	SimpleName	MethodInvocation
(
)
)
{
Intent	SimpleName	SimpleType
returnData	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
)
;
returnData	SimpleName	MethodInvocation
.
putExtra	SimpleName	MethodInvocation
(
"venueData"	StringLiteral	MethodInvocation
,
venue	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
)
;
returnData	SimpleName	MethodInvocation
.
putExtra	SimpleName	MethodInvocation
(
"monthData"	StringLiteral	MethodInvocation
,
Integer	SimpleName	MethodInvocation
.
parseInt	SimpleName	MethodInvocation
(
mm	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
)
)
;
returnData	SimpleName	MethodInvocation
.
putExtra	SimpleName	MethodInvocation
(
"dayData"	StringLiteral	MethodInvocation
,
Integer	SimpleName	MethodInvocation
.
parseInt	SimpleName	MethodInvocation
(
dd	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
)
)
;
returnData	SimpleName	MethodInvocation
.
putExtra	SimpleName	MethodInvocation
(
"yearData"	StringLiteral	MethodInvocation
,
Integer	SimpleName	MethodInvocation
.
parseInt	SimpleName	MethodInvocation
(
yyyy	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
)
)
;
returnData	SimpleName	MethodInvocation
.
putExtra	SimpleName	MethodInvocation
(
"buyinData"	StringLiteral	MethodInvocation
,
Integer	SimpleName	MethodInvocation
.
parseInt	SimpleName	MethodInvocation
(
buyin	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
)
)
;
returnData	SimpleName	MethodInvocation
.
putExtra	SimpleName	MethodInvocation
(
"feeData"	StringLiteral	MethodInvocation
,
Integer	SimpleName	MethodInvocation
.
parseInt	SimpleName	MethodInvocation
(
fee	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
)
)
;
setResult	SimpleName	MethodInvocation
(
RESULT_OK	SimpleName	MethodInvocation
,
returnData	SimpleName	MethodInvocation
)
;
finish	SimpleName	MethodInvocation
(
)
;
}
protected	Modifier	MethodDeclaration
void
onActivityResult	SimpleName	MethodDeclaration
(
int
requestCode	SimpleName	SingleVariableDeclaration
,
int
resultCode	SimpleName	SingleVariableDeclaration
,
Intent	SimpleName	SimpleType
data	SimpleName	SingleVariableDeclaration
)
{
if
(
requestCode	SimpleName	InfixExpression
==
2	NumberLiteral	InfixExpression
)
{
if
(
resultCode	SimpleName	InfixExpression
==
RESULT_OK	SimpleName	InfixExpression
)
{
tournaments	SimpleName	MethodInvocation
.
add	SimpleName	MethodInvocation
(
new
Tournament	SimpleName	SimpleType
(
data	SimpleName	MethodInvocation
.
getStringExtra	SimpleName	MethodInvocation
(
"venueData"	StringLiteral	MethodInvocation
)
,
data	SimpleName	MethodInvocation
.
getIntExtra	SimpleName	MethodInvocation
(
"monthData"	StringLiteral	MethodInvocation
,
0	NumberLiteral	MethodInvocation
)
,
data	SimpleName	MethodInvocation
.
getIntExtra	SimpleName	MethodInvocation
(
"dayData"	StringLiteral	MethodInvocation
,
0	NumberLiteral	MethodInvocation
)
,
data	SimpleName	MethodInvocation
.
getIntExtra	SimpleName	MethodInvocation
(
"yearData"	StringLiteral	MethodInvocation
,
0	NumberLiteral	MethodInvocation
)
,
data	SimpleName	MethodInvocation
.
getIntExtra	SimpleName	MethodInvocation
(
"buyinData"	StringLiteral	MethodInvocation
,
0	NumberLiteral	MethodInvocation
)
,
data	SimpleName	MethodInvocation
.
getIntExtra	SimpleName	MethodInvocation
(
"feeData"	StringLiteral	MethodInvocation
,
0	NumberLiteral	MethodInvocation
)
)
)
;
calculations	SimpleName	MethodInvocation
(
)
;
}
}
TextView	SimpleName	SimpleType
result	SimpleName	VariableDeclarationFragment
=
(
TextView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
textviewres	SimpleName	QualifiedName
)
;
result	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
dbhand	SimpleName	MethodInvocation
.
collect	SimpleName	MethodInvocation
(
getIntent	SimpleName	MethodInvocation
(
)
.
getExtras	SimpleName	MethodInvocation
(
)
.
getString	SimpleName	MethodInvocation
(
"temple_type"	StringLiteral	MethodInvocation
)
,
getIntent	SimpleName	MethodInvocation
(
)
.
getExtras	SimpleName	MethodInvocation
(
)
.
getString	SimpleName	MethodInvocation
(
"notemples"	StringLiteral	MethodInvocation
)
)
)
;
public	Modifier	MethodDeclaration
String	SimpleName	SimpleType
collect	SimpleName	MethodDeclaration
(
String	SimpleName	SimpleType
temptype	SimpleName	SingleVariableDeclaration
,
String	SimpleName	SimpleType
limit	SimpleName	SingleVariableDeclaration
)
{
SQLiteDatabase	SimpleName	SimpleType
ourDatabase	SimpleName	VariableDeclarationFragment
=
this
.
getWritableDatabase	SimpleName	MethodInvocation
(
)
;
String	SimpleName	SimpleType
result	SimpleName	VariableDeclarationFragment
=
""	StringLiteral	VariableDeclarationFragment
;
String	SimpleName	SimpleType
[
]
column	SimpleName	VariableDeclarationFragment
=
new
String	SimpleName	SimpleType
[
]
{
KEY_ID	SimpleName	ArrayInitializer
,
KEY_TMPNAME	SimpleName	ArrayInitializer
,
KEY_TMPTYPE	SimpleName	ArrayInitializer
,
KEY_LATITUDE	SimpleName	ArrayInitializer
,
KEY_LONGITUDE	SimpleName	ArrayInitializer
,
KEY_IMGNAME	SimpleName	ArrayInitializer
,
KEY_YEARBUILD	SimpleName	ArrayInitializer
,
KEY_ADDRESS	SimpleName	ArrayInitializer
,
KEY_CITY	SimpleName	ArrayInitializer
,
KEY_EMAIL	SimpleName	ArrayInitializer
,
KEY_WEB	SimpleName	ArrayInitializer
,
KEY_TEL1	SimpleName	ArrayInitializer
,
KEY_TEL2	SimpleName	ArrayInitializer
,
KEY_DESCRI	SimpleName	ArrayInitializer
}
;
Cursor	SimpleName	SimpleType
c	SimpleName	VariableDeclarationFragment
=
ourDatabase	SimpleName	MethodInvocation
.
query	SimpleName	MethodInvocation
(
"templ"	StringLiteral	MethodInvocation
,
column	SimpleName	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
limit	SimpleName	MethodInvocation
)
;
c	SimpleName	MethodInvocation
.
moveToFirst	SimpleName	MethodInvocation
(
)
;
int
iKEY_ID	SimpleName	VariableDeclarationFragment
=
c	SimpleName	MethodInvocation
.
getColumnIndex	SimpleName	MethodInvocation
(
KEY_ID	SimpleName	MethodInvocation
)
;
int
iKEY_TMPNAME	SimpleName	VariableDeclarationFragment
=
c	SimpleName	MethodInvocation
.
getColumnIndex	SimpleName	MethodInvocation
(
KEY_TMPNAME	SimpleName	MethodInvocation
)
;
int
iKEY_TMPTYPE	SimpleName	VariableDeclarationFragment
=
c	SimpleName	MethodInvocation
.
getColumnIndex	SimpleName	MethodInvocation
(
KEY_TMPTYPE	SimpleName	MethodInvocation
)
;
for
(
c	SimpleName	MethodInvocation
.
moveToFirst	SimpleName	MethodInvocation
(
)
;
!
c	SimpleName	MethodInvocation
.
isAfterLast	SimpleName	MethodInvocation
(
)
;
c	SimpleName	MethodInvocation
.
moveToNext	SimpleName	MethodInvocation
(
)
)
{
if
(
c	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
iKEY_TMPTYPE	SimpleName	MethodInvocation
)
==
temptype	SimpleName	InfixExpression
)
{
result	SimpleName	Assignment
=
result	SimpleName	InfixExpression
+
c	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
iKEY_ID	SimpleName	MethodInvocation
)
+
"		"	StringLiteral	InfixExpression
+
c	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
iKEY_TMPNAME	SimpleName	MethodInvocation
)
+
"		"	StringLiteral	InfixExpression
+
c	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
iKEY_TMPTYPE	SimpleName	MethodInvocation
)
+
""	StringLiteral	InfixExpression
;
}
}
return
result	SimpleName	ReturnStatement
;
}
public	Modifier	MethodDeclaration
static	Modifier	MethodDeclaration
String	SimpleName	SimpleType
newupdateProf	SimpleName	MethodDeclaration
(
String	SimpleName	SimpleType
memid	SimpleName	SingleVariableDeclaration
,
String	SimpleName	SimpleType
gender	SimpleName	SingleVariableDeclaration
,
String	SimpleName	SimpleType
pdata	SimpleName	SingleVariableDeclaration
,
String	SimpleName	SimpleType
dob	SimpleName	SingleVariableDeclaration
,
String	SimpleName	SimpleType
pimg	SimpleName	SingleVariableDeclaration
)
throws
IOException	SimpleName	SimpleType
,
JSONException	SimpleName	SimpleType
{
final	Modifier	VariableDeclarationStatement
HttpClient	SimpleName	SimpleType
httpClient	SimpleName	VariableDeclarationFragment
=
new
DefaultHttpClient	SimpleName	SimpleType
(
)
;
final	Modifier	VariableDeclarationStatement
HttpPost	SimpleName	SimpleType
httpost	SimpleName	VariableDeclarationFragment
=
new
HttpPost	SimpleName	SimpleType
(
websrv	SimpleName	MethodInvocation
.
trim	SimpleName	MethodInvocation
(
)
+
"/newUpdtProf"	StringLiteral	InfixExpression
)
;
JSONStringer	SimpleName	SimpleType
img	SimpleName	VariableDeclarationFragment
=
new
JSONStringer	SimpleName	SimpleType
(
)
.
object	SimpleName	MethodInvocation
(
)
.
key	SimpleName	MethodInvocation
(
"prof"	StringLiteral	MethodInvocation
)
.
object	SimpleName	MethodInvocation
(
)
.
key	SimpleName	MethodInvocation
(
"memid"	StringLiteral	MethodInvocation
)
.
value	SimpleName	MethodInvocation
(
memid	SimpleName	MethodInvocation
.
trim	SimpleName	MethodInvocation
(
)
)
.
key	SimpleName	MethodInvocation
(
"gender"	StringLiteral	MethodInvocation
)
.
value	SimpleName	MethodInvocation
(
gender	SimpleName	MethodInvocation
.
trim	SimpleName	MethodInvocation
(
)
)
.
key	SimpleName	MethodInvocation
(
"pdata"	StringLiteral	MethodInvocation
)
.
value	SimpleName	MethodInvocation
(
pdata	SimpleName	MethodInvocation
.
trim	SimpleName	MethodInvocation
(
)
)
.
key	SimpleName	MethodInvocation
(
"dob"	StringLiteral	MethodInvocation
)
.
value	SimpleName	MethodInvocation
(
dob	SimpleName	MethodInvocation
.
trim	SimpleName	MethodInvocation
(
)
)
.
key	SimpleName	MethodInvocation
(
"pimg"	StringLiteral	MethodInvocation
)
.
value	SimpleName	MethodInvocation
(
pimg	SimpleName	MethodInvocation
.
trim	SimpleName	MethodInvocation
(
)
)
.
endObject	SimpleName	MethodInvocation
(
)
.
endObject	SimpleName	MethodInvocation
(
)
;
StringEntity	SimpleName	SimpleType
se	SimpleName	VariableDeclarationFragment
=
new
StringEntity	SimpleName	SimpleType
(
img	SimpleName	MethodInvocation
.
toString	SimpleName	MethodInvocation
(
)
)
;
httpost	SimpleName	MethodInvocation
.
setEntity	SimpleName	MethodInvocation
(
se	SimpleName	MethodInvocation
)
;
httpost	SimpleName	MethodInvocation
.
setHeader	SimpleName	MethodInvocation
(
"Accept"	StringLiteral	MethodInvocation
,
"application/json"	StringLiteral	MethodInvocation
)
;
httpost	SimpleName	MethodInvocation
.
setHeader	SimpleName	MethodInvocation
(
"Content-type"	StringLiteral	MethodInvocation
,
"application/json"	StringLiteral	MethodInvocation
)
;
HttpResponse	SimpleName	SimpleType
httpResponse	SimpleName	VariableDeclarationFragment
=
httpClient	SimpleName	MethodInvocation
.
execute	SimpleName	MethodInvocation
(
httpost	SimpleName	MethodInvocation
)
;
HttpEntity	SimpleName	SimpleType
httpEntity	SimpleName	VariableDeclarationFragment
=
httpResponse	SimpleName	MethodInvocation
.
getEntity	SimpleName	MethodInvocation
(
)
;
InputStream	SimpleName	SimpleType
stream	SimpleName	VariableDeclarationFragment
=
httpEntity	SimpleName	MethodInvocation
.
getContent	SimpleName	MethodInvocation
(
)
;
String	SimpleName	SimpleType
result	SimpleName	VariableDeclarationFragment
=
convertStreamToString	SimpleName	MethodInvocation
(
stream	SimpleName	MethodInvocation
)
;
return
result	SimpleName	MethodInvocation
.
trim	SimpleName	MethodInvocation
(
)
;
}
System	SimpleName	MethodInvocation
.
setProperty	SimpleName	MethodInvocation
(
"http.keepAlive"	StringLiteral	MethodInvocation
,
"false"	StringLiteral	MethodInvocation
)
;
protected	Modifier	VariableDeclarationStatement
void
onCreate	SimpleName	VariableDeclarationFragment
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	VariableDeclarationFragment
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
flickr_activity	SimpleName	QualifiedName
)
;
Button	SimpleName	SimpleType
btnFlickr	SimpleName	VariableDeclarationFragment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
btnFlickr	SimpleName	QualifiedName
)
;
btnFlickr	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
mFlickrClickListener	SimpleName	MethodInvocation
)
;
Button	SimpleName	SimpleType
btnPick	SimpleName	VariableDeclarationFragment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
btnPick	SimpleName	QualifiedName
)
;
btnPick	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
mPickClickListener	SimpleName	MethodInvocation
)
;
}
import
com	SimpleName	QualifiedName
.
carouseldemo	SimpleName	QualifiedName
.
main	SimpleName	QualifiedName
.
R	SimpleName	QualifiedName
;
File	SimpleName	SimpleType
F	SimpleName	VariableDeclarationFragment
=
new
File	SimpleName	SimpleType
(
Environment	SimpleName	MethodInvocation
.
getExternalStorageDirectory	SimpleName	MethodInvocation
(
)
+
File	SimpleName	QualifiedName
.
separator	SimpleName	QualifiedName
+
"MyBrand"	StringLiteral	InfixExpression
+
File	SimpleName	QualifiedName
.
separator	SimpleName	QualifiedName
+
"MyApp"	StringLiteral	InfixExpression
+
File	SimpleName	QualifiedName
.
separator	SimpleName	QualifiedName
+
"MyFile.srl"	StringLiteral	InfixExpression
)
;
if
(
F	SimpleName	MethodInvocation
.
exists	SimpleName	MethodInvocation
(
)
==
false	BooleanLiteral	InfixExpression
)
{
try
{
F	SimpleName	MethodInvocation
.
getParentFile	SimpleName	MethodInvocation
(
)
.
getParentFile	SimpleName	MethodInvocation
(
)
.
mkdir	SimpleName	MethodInvocation
(
)
;
F	SimpleName	MethodInvocation
.
getParentFile	SimpleName	MethodInvocation
(
)
.
mkdir	SimpleName	MethodInvocation
(
)
;
F	SimpleName	MethodInvocation
.
createNewFile	SimpleName	MethodInvocation
(
)
;
}
catch
(
IOException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
scr_save	SimpleName	MethodInvocation
(
)
;
}
else
scr_load	SimpleName	MethodInvocation
(
)
;
package
com	SimpleName	QualifiedName
.
colourity	SimpleName	QualifiedName
.
snatsh	SimpleName	QualifiedName
;
import
com	SimpleName	QualifiedName
.
colourity	SimpleName	QualifiedName
.
snatsh	SimpleName	QualifiedName
.
R	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
support	SimpleName	QualifiedName
.
v4	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
ActionBarDrawerToggle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
support	SimpleName	QualifiedName
.
v4	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
DrawerLayout	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
util	SimpleName	QualifiedName
.
Log	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
LayoutInflater	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
Menu	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
MenuInflater	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
View	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
ViewGroup	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
AdapterView	SimpleName	QualifiedName
;
import
java	SimpleName	QualifiedName
.
util	SimpleName	QualifiedName
.
ArrayList	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
ListView	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
HomeFragment	SimpleName	TypeDeclaration
extends
Fragment	SimpleName	SimpleType
{
public	Modifier	MethodDeclaration
HomeFragment	SimpleName	MethodDeclaration
(
)
{
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
View	SimpleName	SimpleType
onCreateView	SimpleName	MethodDeclaration
(
LayoutInflater	SimpleName	SimpleType
inflater	SimpleName	SingleVariableDeclaration
,
ViewGroup	SimpleName	SimpleType
container	SimpleName	SingleVariableDeclaration
,
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
View	SimpleName	SimpleType
rootView	SimpleName	VariableDeclarationFragment
=
inflater	SimpleName	MethodInvocation
.
inflate	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
fragment_home	SimpleName	QualifiedName
,
container	SimpleName	MethodInvocation
,
false	BooleanLiteral	MethodInvocation
)
;
return
rootView	SimpleName	ReturnStatement
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
boolean
onCreateOptionsMenu	SimpleName	MethodDeclaration
(
Menu	SimpleName	SimpleType
menu	SimpleName	SingleVariableDeclaration
)
{
MenuInflater	SimpleName	SimpleType
inflater	SimpleName	VariableDeclarationFragment
=
getMenuInflater	SimpleName	MethodInvocation
(
)
;
inflater	SimpleName	MethodInvocation
.
inflate	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
menu	SimpleName	QualifiedName
.
main	SimpleName	QualifiedName
,
menu	SimpleName	MethodInvocation
)
;
return
super
.
onCreateOptionsMenu	SimpleName	SuperMethodInvocation
(
menu	SimpleName	SuperMethodInvocation
)
;
}
}
package
com	SimpleName	QualifiedName
.
colourity	SimpleName	QualifiedName
.
snatsh	SimpleName	QualifiedName
;
import
com	SimpleName	QualifiedName
.
colourity	SimpleName	QualifiedName
.
snatsh	SimpleName	QualifiedName
.
R	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Fragment	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
LayoutInflater	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
Menu	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
MenuInflater	SimpleName	QualifiedName
;
import
com	SimpleName	QualifiedName
.
colourity	SimpleName	QualifiedName
.
snatsh	SimpleName	QualifiedName
.
adapter	SimpleName	QualifiedName
.
NavDrawerListAdapter	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
View	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
ViewGroup	SimpleName	QualifiedName
;
import
com	SimpleName	QualifiedName
.
colourity	SimpleName	QualifiedName
.
snatsh	SimpleName	QualifiedName
.
model	SimpleName	QualifiedName
.
NavDrawerItem	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Activity	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Fragment	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
FragmentManager	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
res	SimpleName	QualifiedName
.
Configuration	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
res	SimpleName	QualifiedName
.
TypedArray	SimpleName	QualifiedName
;
byte
[
]
keyBytes	SimpleName	VariableDeclarationFragment
=
Base64	SimpleName	MethodInvocation
.
decode	SimpleName	MethodInvocation
(
getPublicKey	SimpleName	MethodInvocation
(
)
)
;
PublicKey	SimpleName	SimpleType
publickey	SimpleName	VariableDeclarationFragment
=
strToPublicKey	SimpleName	MethodInvocation
(
new
String	SimpleName	SimpleType
(
keyBytes	SimpleName	ClassInstanceCreation
)
)
;
private	Modifier	MethodDeclaration
String	SimpleName	SimpleType
getPublicKey	SimpleName	MethodDeclaration
(
)
{
return
"LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0NCk1JR2ZNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0R05BRENCaVFLQmdRRE1PZGtaN28yMmJiSTAxZnY5QWtvMXFmTHd6MzRBYlA3ejgrcUMNCi9XZGNHdEFmdGk1QUFvZWUxOTV2NUd1QTZhak9JS3Y1cDkzdEdFNitWamdRdG03d0phS25kMno1UGpvZHIvc2R5bW9hNGdZT2dXcHQNCmVvamRybFZmeHZBbUxUN0JsWEExNGNuQUxDc3prYUtmTktSeEIrWDZlZGIyQkVaVnlKYThQcTBLYndJREFRQUINCi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQ=="	StringLiteral	ReturnStatement
;
}
public	Modifier	MethodDeclaration
static	Modifier	MethodDeclaration
PublicKey	SimpleName	SimpleType
strToPublicKey	SimpleName	MethodDeclaration
(
String	SimpleName	SimpleType
s	SimpleName	SingleVariableDeclaration
)
{
PublicKey	SimpleName	SimpleType
pbKey	SimpleName	VariableDeclarationFragment
=
null	NullLiteral	VariableDeclarationFragment
;
BufferedReader	SimpleName	SimpleType
br	SimpleName	VariableDeclarationFragment
=
new
BufferedReader	SimpleName	SimpleType
(
new
StringReader	SimpleName	SimpleType
(
s	SimpleName	ClassInstanceCreation
)
)
;
PEMReader	SimpleName	SimpleType
pr	SimpleName	VariableDeclarationFragment
=
new
PEMReader	SimpleName	SimpleType
(
br	SimpleName	ClassInstanceCreation
)
;
Object	SimpleName	SimpleType
obj	SimpleName	VariableDeclarationFragment
=
pr	SimpleName	MethodInvocation
.
readObject	SimpleName	MethodInvocation
(
)
;
if
(
obj	SimpleName	InstanceofExpression
instanceof
PublicKey	SimpleName	SimpleType
)
{
pbKey	SimpleName	Assignment
=
(
PublicKey	SimpleName	SimpleType
)
pr	SimpleName	MethodInvocation
.
readObject	SimpleName	MethodInvocation
(
)
;
}
else
if
(
obj	SimpleName	InstanceofExpression
instanceof
KeyPair	SimpleName	SimpleType
)
{
KeyPair	SimpleName	SimpleType
kp	SimpleName	VariableDeclarationFragment
=
(
KeyPair	SimpleName	SimpleType
)
pr	SimpleName	MethodInvocation
.
readObject	SimpleName	MethodInvocation
(
)
;
pbKey	SimpleName	Assignment
=
kp	SimpleName	MethodInvocation
.
getPublic	SimpleName	MethodInvocation
(
)
;
}
pr	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
return
pbKey	SimpleName	ReturnStatement
;
}
public	Modifier	VariableDeclarationStatement
static	Modifier	VariableDeclarationStatement
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
TAG	SimpleName	VariableDeclarationFragment
=
"MainActivity"	StringLiteral	VariableDeclarationFragment
;
EditText	SimpleName	SimpleType
userName	SimpleName	VariableDeclarationFragment
,
password	SimpleName	VariableDeclarationFragment
;
Log	SimpleName	MethodInvocation
.
d	SimpleName	MethodInvocation
(
"david"	StringLiteral	MethodInvocation
,
buffer	SimpleName	MethodInvocation
.
toString	SimpleName	MethodInvocation
(
)
)
;
userName	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
userName	SimpleName	QualifiedName
)
;
password	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
password	SimpleName	QualifiedName
)
;
}
public	Modifier	MethodDeclaration
void
save	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
view	SimpleName	SingleVariableDeclaration
)
{
String	SimpleName	SimpleType
text1	SimpleName	VariableDeclarationFragment
=
userName	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
;
String	SimpleName	SimpleType
text2	SimpleName	VariableDeclarationFragment
=
password	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
;
File	SimpleName	SimpleType
file	SimpleName	VariableDeclarationFragment
=
null	NullLiteral	VariableDeclarationFragment
;
text1	SimpleName	Assignment
=
text1	SimpleName	InfixExpression
+
" "	StringLiteral	InfixExpression
;
FileOutputStream	SimpleName	SimpleType
fileOutputStream	SimpleName	VariableDeclarationFragment
=
null	NullLiteral	VariableDeclarationFragment
;
try
{
file	SimpleName	Assignment
=
getFilesDir	SimpleName	MethodInvocation
(
)
;
fileOutputStream	SimpleName	Assignment
=
openFileOutput	SimpleName	MethodInvocation
(
"david"	StringLiteral	MethodInvocation
,
Context	SimpleName	QualifiedName
.
MODE_PRIVATE	SimpleName	QualifiedName
)
;
fileOutputStream	SimpleName	MethodInvocation
.
write	SimpleName	MethodInvocation
(
text1	SimpleName	MethodInvocation
.
getBytes	SimpleName	MethodInvocation
(
)
)
;
fileOutputStream	SimpleName	MethodInvocation
.
write	SimpleName	MethodInvocation
(
text2	SimpleName	MethodInvocation
.
getBytes	SimpleName	MethodInvocation
(
)
)
;
}
catch
(
FileNotFoundException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
Log	SimpleName	MethodInvocation
.
d	SimpleName	MethodInvocation
(
TAG	SimpleName	MethodInvocation
,
e	SimpleName	MethodInvocation
.
toString	SimpleName	MethodInvocation
(
)
)
;
}
catch
(
IOException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
Log	SimpleName	MethodInvocation
.
d	SimpleName	MethodInvocation
(
TAG	SimpleName	MethodInvocation
,
e	SimpleName	MethodInvocation
.
toString	SimpleName	MethodInvocation
(
)
)
;
}
finally
{
try
{
fileOutputStream	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
}
catch
(
IOException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
Log	SimpleName	MethodInvocation
.
d	SimpleName	MethodInvocation
(
TAG	SimpleName	MethodInvocation
,
e	SimpleName	MethodInvocation
.
toString	SimpleName	MethodInvocation
(
)
)
;
}
}
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
this
,
"Saved successfully"	StringLiteral	InfixExpression
+
file	SimpleName	InfixExpression
+
" /david.txt"	StringLiteral	InfixExpression
,
Toast	SimpleName	QualifiedName
.
LENGTH_LONG	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
}
EditText	SimpleName	SimpleType
userName	SimpleName	VariableDeclarationFragment
,
password	SimpleName	VariableDeclarationFragment
;
@
Override	SimpleName	MarkerAnnotation
protected	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
activity_second	SimpleName	QualifiedName
)
;
userName	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
editText2	SimpleName	QualifiedName
)
;
password	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
editText4	SimpleName	QualifiedName
)
;
}
public	Modifier	MethodDeclaration
void
load	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
view	SimpleName	SingleVariableDeclaration
)
{
Log	SimpleName	MethodInvocation
.
d	SimpleName	MethodInvocation
(
"david"	StringLiteral	MethodInvocation
,
"starting fileInputStream"	StringLiteral	MethodInvocation
)
;
try
{
FileInputStream	SimpleName	SimpleType
fileInputStream	SimpleName	VariableDeclarationFragment
=
openFileInput	SimpleName	MethodInvocation
(
"david.txt"	StringLiteral	MethodInvocation
)
;
int
read	SimpleName	VariableDeclarationFragment
=
-
1	NumberLiteral	PrefixExpression
;
StringBuffer	SimpleName	SimpleType
buffer	SimpleName	VariableDeclarationFragment
=
new
StringBuffer	SimpleName	SimpleType
(
)
;
while
(
(
read	SimpleName	Assignment
=
fileInputStream	SimpleName	MethodInvocation
.
read	SimpleName	MethodInvocation
(
)
)
!=
-
1	NumberLiteral	PrefixExpression
)
;	EmptyStatement	WhileStatement
{
buffer	SimpleName	MethodInvocation
.
append	SimpleName	MethodInvocation
(
(
char
)
read	SimpleName	CastExpression
)
;
}
Log	SimpleName	MethodInvocation
.
d	SimpleName	MethodInvocation
(
"david"	StringLiteral	MethodInvocation
,
buffer	SimpleName	MethodInvocation
.
toString	SimpleName	MethodInvocation
(
)
)
;
String	SimpleName	SimpleType
user	SimpleName	VariableDeclarationFragment
=
buffer	SimpleName	MethodInvocation
.
substring	SimpleName	MethodInvocation
(
0	NumberLiteral	MethodInvocation
,
buffer	SimpleName	MethodInvocation
.
indexOf	SimpleName	MethodInvocation
(
""	StringLiteral	MethodInvocation
)
)
;
String	SimpleName	SimpleType
pass	SimpleName	VariableDeclarationFragment
=
buffer	SimpleName	MethodInvocation
.
substring	SimpleName	MethodInvocation
(
buffer	SimpleName	MethodInvocation
.
indexOf	SimpleName	MethodInvocation
(
""	StringLiteral	MethodInvocation
)
+
1	NumberLiteral	InfixExpression
)
;
userName	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
user	SimpleName	MethodInvocation
)
;
password	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
pass	SimpleName	MethodInvocation
)
;
fileInputStream	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
}
catch
(
FileNotFoundException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
catch
(
IOException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
this
,
"Load successful"	StringLiteral	MethodInvocation
,
Toast	SimpleName	QualifiedName
.
LENGTH_SHORT	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
}
public	Modifier	TypeDeclaration
class
BackgroundService	SimpleName	TypeDeclaration
extends
Service	SimpleName	SimpleType
{
private	Modifier	VariableDeclarationStatement
int
interval1	SimpleName	VariableDeclarationFragment
=
60	NumberLiteral	VariableDeclarationFragment
;
private	Modifier	VariableDeclarationStatement
int
interval2	SimpleName	VariableDeclarationFragment
=
60	NumberLiteral	VariableDeclarationFragment
;
private	Modifier	VariableDeclarationStatement
Handler	SimpleName	SimpleType
mTimer1	SimpleName	VariableDeclarationFragment
=
new
Handler	SimpleName	SimpleType
(
)
;
private	Modifier	VariableDeclarationStatement
Runnable	SimpleName	SimpleType
mTask1	SimpleName	VariableDeclarationFragment
=
new
Runnable	SimpleName	SimpleType
(
)
{
public	Modifier	MethodDeclaration
void
run	SimpleName	MethodDeclaration
(
)
{
Looper	SimpleName	MethodInvocation
.
prepare	SimpleName	MethodInvocation
(
)
;
Log	SimpleName	MethodInvocation
.
w	SimpleName	MethodInvocation
(
"GPS Tracker"	StringLiteral	MethodInvocation
,
"Tracker going to run "	StringLiteral	InfixExpression
+
new
Date	SimpleName	SimpleType
(
)
)
;
LocationManager	SimpleName	SimpleType
mlocManager	SimpleName	VariableDeclarationFragment
=
(
LocationManager	SimpleName	SimpleType
)
getSystemService	SimpleName	MethodInvocation
(
Context	SimpleName	QualifiedName
.
LOCATION_SERVICE	SimpleName	QualifiedName
)
;
LocationListener	SimpleName	SimpleType
mlocListener	SimpleName	VariableDeclarationFragment
=
new
MyLocationListener	SimpleName	SimpleType
(
)
;
mlocManager	SimpleName	MethodInvocation
.
requestLocationUpdates	SimpleName	MethodInvocation
(
LocationManager	SimpleName	QualifiedName
.
GPS_PROVIDER	SimpleName	QualifiedName
,
0	NumberLiteral	MethodInvocation
,
0	NumberLiteral	MethodInvocation
,
mlocListener	SimpleName	MethodInvocation
)
;
mTimer1	SimpleName	MethodInvocation
.
postDelayed	SimpleName	MethodInvocation
(
this
,
interval1	SimpleName	InfixExpression
*
1000L	NumberLiteral	InfixExpression
)
;
Looper	SimpleName	MethodInvocation
.
loop	SimpleName	MethodInvocation
(
)
;
}
}
;
private	Modifier	VariableDeclarationStatement
Handler	SimpleName	SimpleType
mTimer2	SimpleName	VariableDeclarationFragment
=
new
Handler	SimpleName	SimpleType
(
)
;
private	Modifier	VariableDeclarationStatement
Runnable	SimpleName	SimpleType
mTask2	SimpleName	VariableDeclarationFragment
=
new
Runnable	SimpleName	SimpleType
(
)
{
public	Modifier	MethodDeclaration
void
run	SimpleName	MethodDeclaration
(
)
{
if
(
isOnline	SimpleName	MethodInvocation
(
)
==
true	BooleanLiteral	InfixExpression
)
{
Log	SimpleName	MethodInvocation
.
w	SimpleName	MethodInvocation
(
"Method 2"	StringLiteral	MethodInvocation
,
"setUpdateCardAcceptTag"	StringLiteral	MethodInvocation
)
;
setUpdateCardAcceptTag	SimpleName	MethodInvocation
(
)
;
Log	SimpleName	MethodInvocation
.
w	SimpleName	MethodInvocation
(
"Method 3"	StringLiteral	MethodInvocation
,
"getCardBulkSerialData"	StringLiteral	MethodInvocation
)
;
getCardBulkSerialData	SimpleName	MethodInvocation
(
)
;
Log	SimpleName	MethodInvocation
.
w	SimpleName	MethodInvocation
(
"Method 12"	StringLiteral	MethodInvocation
,
"updateStockDataFromRemote"	StringLiteral	MethodInvocation
)
;
updateStockDataFromRemote	SimpleName	MethodInvocation
(
)
;
Log	SimpleName	MethodInvocation
.
w	SimpleName	MethodInvocation
(
"Method 5"	StringLiteral	MethodInvocation
,
"SetRemarksData"	StringLiteral	MethodInvocation
)
;
SetRemarksData	SimpleName	MethodInvocation
(
)
;
Log	SimpleName	MethodInvocation
.
w	SimpleName	MethodInvocation
(
"Method 6"	StringLiteral	MethodInvocation
,
"SetCardSaleData"	StringLiteral	MethodInvocation
)
;
SetCardSaleData	SimpleName	MethodInvocation
(
)
;
Log	SimpleName	MethodInvocation
.
w	SimpleName	MethodInvocation
(
"Method 7"	StringLiteral	MethodInvocation
,
"synchMerchants"	StringLiteral	MethodInvocation
)
;
synchMerchants	SimpleName	MethodInvocation
(
)
;
Log	SimpleName	MethodInvocation
.
w	SimpleName	MethodInvocation
(
"Method 9"	StringLiteral	MethodInvocation
,
"getUpdatedCities"	StringLiteral	MethodInvocation
)
;
getUpdatedCities	SimpleName	MethodInvocation
(
)
;
Log	SimpleName	MethodInvocation
.
w	SimpleName	MethodInvocation
(
"Method 10"	StringLiteral	MethodInvocation
,
"getNotifications"	StringLiteral	MethodInvocation
)
;
getNotifications	SimpleName	MethodInvocation
(
)
;
Log	SimpleName	MethodInvocation
.
w	SimpleName	MethodInvocation
(
"Method 11"	StringLiteral	MethodInvocation
,
"getNextSerialDetails"	StringLiteral	MethodInvocation
)
;
getNextSerialDetails	SimpleName	MethodInvocation
(
)
;
Log	SimpleName	MethodInvocation
.
w	SimpleName	MethodInvocation
(
"Method 12"	StringLiteral	MethodInvocation
,
"getNextSerialDetails"	StringLiteral	MethodInvocation
)
;
Log	SimpleName	MethodInvocation
.
w	SimpleName	MethodInvocation
(
"Method 13"	StringLiteral	MethodInvocation
,
"synchLocations"	StringLiteral	MethodInvocation
)
;
}
mTimer2	SimpleName	MethodInvocation
.
postDelayed	SimpleName	MethodInvocation
(
this
,
interval2	SimpleName	InfixExpression
*
1000L	NumberLiteral	InfixExpression
)
;
}
}
;
public	Modifier	MethodDeclaration
void
outputBitmap	SimpleName	MethodDeclaration
(
)
{
String	SimpleName	SimpleType
path	SimpleName	VariableDeclarationFragment
=
Environment	SimpleName	QualifiedName
.
DIRECTORY_PICTURES	SimpleName	QualifiedName
.
toString	SimpleName	MethodInvocation
(
)
;
File	SimpleName	SimpleType
folder	SimpleName	VariableDeclarationFragment
=
new
File	SimpleName	SimpleType
(
path	SimpleName	InfixExpression
+
"/Blabla"	StringLiteral	InfixExpression
)
;
String	SimpleName	SimpleType
filename	SimpleName	VariableDeclarationFragment
=
new
SimpleDateFormat	SimpleName	SimpleType
(
"yyMMddHHmmss"	StringLiteral	ClassInstanceCreation
)
.
format	SimpleName	MethodInvocation
(
Calendar	SimpleName	MethodInvocation
.
getInstance	SimpleName	MethodInvocation
(
)
.
getTime	SimpleName	MethodInvocation
(
)
)
+
".png"	StringLiteral	InfixExpression
;
try
{
if
(
!
folder	SimpleName	MethodInvocation
.
exists	SimpleName	MethodInvocation
(
)
)
{
folder	SimpleName	MethodInvocation
.
mkdirs	SimpleName	MethodInvocation
(
)
;
System	SimpleName	QualifiedName
.
out	SimpleName	QualifiedName
.
println	SimpleName	MethodInvocation
(
"Making dirs"	StringLiteral	MethodInvocation
)
;
}
File	SimpleName	SimpleType
myFile	SimpleName	VariableDeclarationFragment
=
new
File	SimpleName	SimpleType
(
folder	SimpleName	MethodInvocation
.
getAbsolutePath	SimpleName	MethodInvocation
(
)
,
filename	SimpleName	ClassInstanceCreation
)
;
myFile	SimpleName	MethodInvocation
.
createNewFile	SimpleName	MethodInvocation
(
)
;
FileOutputStream	SimpleName	SimpleType
out	SimpleName	VariableDeclarationFragment
=
new
FileOutputStream	SimpleName	SimpleType
(
myFile	SimpleName	ClassInstanceCreation
)
;
myBitmap	SimpleName	MethodInvocation
.
compress	SimpleName	MethodInvocation
(
Bitmap	SimpleName	QualifiedName
.
CompressFormat	SimpleName	QualifiedName
.
PNG	SimpleName	QualifiedName
,
100	NumberLiteral	MethodInvocation
,
out	SimpleName	MethodInvocation
)
;
out	SimpleName	MethodInvocation
.
flush	SimpleName	MethodInvocation
(
)
;
out	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
}
catch
(
Exception	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
System	SimpleName	QualifiedName
.
out	SimpleName	QualifiedName
.
println	SimpleName	MethodInvocation
(
e	SimpleName	MethodInvocation
.
getMessage	SimpleName	MethodInvocation
(
)
)
;
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
}
myFile	SimpleName	MethodInvocation
.
createNewFile	SimpleName	MethodInvocation
(
)
;
protected	Modifier	MethodDeclaration
void
onDraw	SimpleName	MethodDeclaration
(
Canvas	SimpleName	SimpleType
canvas	SimpleName	SingleVariableDeclaration
)
{
super
.
onDraw	SimpleName	SuperMethodInvocation
(
canvas	SimpleName	SuperMethodInvocation
)
;
myBitmap	SimpleName	Assignment
=
Bitmap	SimpleName	MethodInvocation
.
createBitmap	SimpleName	MethodInvocation
(
viewWidth	SimpleName	MethodInvocation
,
viewHeight	SimpleName	MethodInvocation
,
Bitmap	SimpleName	QualifiedName
.
Config	SimpleName	QualifiedName
.
RGB_565	SimpleName	QualifiedName
)
;
Canvas	SimpleName	SimpleType
pngCanvas	SimpleName	VariableDeclarationFragment
=
new
Canvas	SimpleName	SimpleType
(
myBitmap	SimpleName	ClassInstanceCreation
)
;
canvas	SimpleName	MethodInvocation
.
drawLine	SimpleName	MethodInvocation
(
)
;	EmptyStatement	Block
pngCanvas	SimpleName	MethodInvocation
.
drawLine	SimpleName	MethodInvocation
(
)
;	EmptyStatement	Block
}
public	Modifier	MethodDeclaration
void
appendLog	SimpleName	MethodDeclaration
(
String	SimpleName	SimpleType
text	SimpleName	SingleVariableDeclaration
)
{
File	SimpleName	SimpleType
logFile	SimpleName	VariableDeclarationFragment
=
new
File	SimpleName	SimpleType
(
mLogin	SimpleName	MethodInvocation
.
getFilesDir	SimpleName	MethodInvocation
(
)
,
"logFile.txt"	StringLiteral	ClassInstanceCreation
)
;
if
(
!
logFile	SimpleName	MethodInvocation
.
exists	SimpleName	MethodInvocation
(
)
)
{
try
{
logFile	SimpleName	MethodInvocation
.
createNewFile	SimpleName	MethodInvocation
(
)
;
}
catch
(
IOException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
}
try
{
BufferedWriter	SimpleName	SimpleType
buf	SimpleName	VariableDeclarationFragment
=
new
BufferedWriter	SimpleName	SimpleType
(
new
FileWriter	SimpleName	SimpleType
(
logFile	SimpleName	ClassInstanceCreation
,
true	BooleanLiteral	ClassInstanceCreation
)
)
;
buf	SimpleName	MethodInvocation
.
append	SimpleName	MethodInvocation
(
text	SimpleName	MethodInvocation
)
;
buf	SimpleName	MethodInvocation
.
newLine	SimpleName	MethodInvocation
(
)
;
buf	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
}
catch
(
IOException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
}
void
startCamera	SimpleName	MethodDeclaration
(
)
{
Intent	SimpleName	SimpleType
cameraIntent	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
android	SimpleName	QualifiedName
.
provider	SimpleName	QualifiedName
.
MediaStore	SimpleName	QualifiedName
.
ACTION_IMAGE_CAPTURE	SimpleName	QualifiedName
)
;
capture_image_via_camera	SimpleName	Assignment
=
false	BooleanLiteral	Assignment
;
startActivityForResult	SimpleName	MethodInvocation
(
cameraIntent	SimpleName	MethodInvocation
,
CAM_REQUREST	SimpleName	MethodInvocation
)
;
}
order	SimpleName	MethodInvocation
.
addOrder	SimpleName	MethodInvocation
(
s	SimpleName	MethodInvocation
,
i	SimpleName	MethodInvocation
)
database	SimpleName	MethodInvocation
.
insert	SimpleName	MethodInvocation
(
"CUS_MENU"	StringLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
ocv	SimpleName	MethodInvocation
)
TextCaptcha	SimpleName	MethodInvocation
(
int
,
int
,
int
,
TextCaptcha	SimpleName	QualifiedName
.
TextOptions	SimpleName	QualifiedName
)
public	Modifier	MethodDeclaration
TextCaptcha	SimpleName	MethodDeclaration
(
int
wordLength	SimpleName	SingleVariableDeclaration
,
TextOptions	SimpleName	SimpleType
opt	SimpleName	SingleVariableDeclaration
)
{
TextCaptcha	SimpleName	MethodInvocation
(
0	NumberLiteral	MethodInvocation
,
0	NumberLiteral	MethodInvocation
,
wordLength	SimpleName	MethodInvocation
,
opt	SimpleName	MethodInvocation
)
;
}
im	SimpleName	MethodInvocation
.
setLayoutParams	SimpleName	MethodInvocation
(
new
LinearLayout	SimpleName	QualifiedName
.
LayoutParams	SimpleName	QualifiedName
(
c	SimpleName	QualifiedName
.
width	SimpleName	QualifiedName
*
2	NumberLiteral	InfixExpression
,
c	SimpleName	QualifiedName
.
height	SimpleName	QualifiedName
*
2	NumberLiteral	InfixExpression
)
)
;
MathCaptcha	SimpleName	MethodInvocation
(
int
,
int
,
MathCaptcha	SimpleName	QualifiedName
.
MathOptions	SimpleName	QualifiedName
)
Captcha	SimpleName	SimpleType
c	SimpleName	VariableDeclarationFragment
=
new
MathCaptcha	SimpleName	SimpleType
(
300	NumberLiteral	ClassInstanceCreation
,
100	NumberLiteral	ClassInstanceCreation
,
MathOptions	SimpleName	QualifiedName
.
PLUS_MINUS_MULTIPLY	SimpleName	QualifiedName
)
;
public	Modifier	TypeDeclaration
class
PlayerAudioActivity	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
implements
Listenercalling	SimpleName	SimpleType
{
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
activity_player_audio	SimpleName	QualifiedName
)
;
MyReceiver	SimpleName	SimpleType
mReciever	SimpleName	VariableDeclarationFragment
=
new
MyReceiver	SimpleName	SimpleType
(
)
;
mReciever	SimpleName	MethodInvocation
.
setMyInterface	SimpleName	MethodInvocation
(
PlayerAudioActivity	SimpleName	ThisExpression
.
this
)
;
}
public	Modifier	MethodDeclaration
void
getplay	SimpleName	MethodDeclaration
(
)
{
Log	SimpleName	MethodInvocation
.
d	SimpleName	MethodInvocation
(
"yeppppppppppppppppp"	StringLiteral	MethodInvocation
,
"jsdhijdiowejd"	StringLiteral	MethodInvocation
)
;
if
(
mp	SimpleName	MethodInvocation
.
isPlaying	SimpleName	MethodInvocation
(
)
)
{
if
(
mp	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
{
mp	SimpleName	MethodInvocation
.
pause	SimpleName	MethodInvocation
(
)
;
btnplay	SimpleName	MethodInvocation
.
setImageResource	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
drawable	SimpleName	QualifiedName
.
btn_play	SimpleName	QualifiedName
)
;
}
}
else
{
if
(
mp	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
{
mp	SimpleName	MethodInvocation
.
start	SimpleName	MethodInvocation
(
)
;
btnplay	SimpleName	MethodInvocation
.
setImageResource	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
drawable	SimpleName	QualifiedName
.
btn_pause	SimpleName	QualifiedName
)
;
}
}
}
}
public	Modifier	TypeDeclaration
class
MyReceiver	SimpleName	TypeDeclaration
extends
BroadcastReceiver	SimpleName	SimpleType
implements
Listenercalling	SimpleName	SimpleType
{
private	Modifier	FieldDeclaration
Listenercalling	SimpleName	SimpleType
ls	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
String	SimpleName	SimpleType
TAG	SimpleName	VariableDeclarationFragment
=
"waaaawoooooooooOOOOOOjnjkhdfku"	StringLiteral	VariableDeclarationFragment
;
public	Modifier	MethodDeclaration
void
onReceive	SimpleName	MethodDeclaration
(
Context	SimpleName	SimpleType
context	SimpleName	SingleVariableDeclaration
,
Intent	SimpleName	SimpleType
intent	SimpleName	SingleVariableDeclaration
)
{
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
action	SimpleName	VariableDeclarationFragment
=
intent	SimpleName	MethodInvocation
.
getAction	SimpleName	MethodInvocation
(
)
;
if
(
action	SimpleName	InfixExpression
==
"btnplay"	StringLiteral	InfixExpression
)
{
getplay	SimpleName	MethodInvocation
(
)
;
Log	SimpleName	MethodInvocation
.
d	SimpleName	MethodInvocation
(
TAG	SimpleName	MethodInvocation
,
""	StringLiteral	InfixExpression
+
action	SimpleName	InfixExpression
)
;
}
}
public	Modifier	MethodDeclaration
void
setMyInterface	SimpleName	MethodDeclaration
(
PlayerAudioActivity	SimpleName	SimpleType
pl	SimpleName	SingleVariableDeclaration
)
{
Log	SimpleName	MethodInvocation
.
d	SimpleName	MethodInvocation
(
"wawwwooo"	StringLiteral	InfixExpression
+
pl	SimpleName	InfixExpression
,
"lfkero"	StringLiteral	MethodInvocation
)
;
ls	SimpleName	Assignment
=
pl	SimpleName	Assignment
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
getplay	SimpleName	MethodDeclaration
(
)
{
Log	SimpleName	MethodInvocation
.
d	SimpleName	MethodInvocation
(
"wawwwooo"	StringLiteral	MethodInvocation
,
"getplayreciever calling"	StringLiteral	MethodInvocation
)
;
ls	SimpleName	Assignment
=
new
PlayerAudioActivity	SimpleName	SimpleType
(
)
;
ls	SimpleName	MethodInvocation
.
getplay	SimpleName	MethodInvocation
(
)
;
}
}
package
com	SimpleName	QualifiedName
.
Audio	SimpleName	QualifiedName
.
audioplayer	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
Intent	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
media	SimpleName	QualifiedName
.
MediaPlayer	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
Menu	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
MenuItem	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
SeekBar	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
interface
Listenercalling	SimpleName	TypeDeclaration
{
public	Modifier	MethodDeclaration
void
getplay	SimpleName	MethodDeclaration
(
)
;
}
public	Modifier	TypeDeclaration
class
GifPreference	SimpleName	TypeDeclaration
extends
PreferenceActivity	SimpleName	SimpleType
implements
SharedPreferences	SimpleName	QualifiedName
.
OnSharedPreferenceChangeListener	SimpleName	QualifiedName
{
@
SuppressWarnings	SimpleName	SingleMemberAnnotation
(
"deprecation"	StringLiteral	SingleMemberAnnotation
)
@
Override	SimpleName	MarkerAnnotation
protected	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
getPreferenceManager	SimpleName	MethodInvocation
(
)
.
setSharedPreferencesName	SimpleName	MethodInvocation
(
"custom_gif"	StringLiteral	MethodInvocation
)
;
addPreferencesFromResource	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
xml	SimpleName	QualifiedName
.
prefsettings	SimpleName	QualifiedName
)
;
getPreferenceManager	SimpleName	MethodInvocation
(
)
.
getSharedPreferences	SimpleName	MethodInvocation
(
)
.
registerOnSharedPreferenceChangeListener	SimpleName	MethodInvocation
(
this
)
;
getPreferenceManager	SimpleName	MethodInvocation
(
)
.
findPreference	SimpleName	MethodInvocation
(
"custom_gif"	StringLiteral	MethodInvocation
)
.
setOnPreferenceClickListener	SimpleName	MethodInvocation
(
new
OnPreferenceClickListener	SimpleName	SimpleType
(
)
{
public	Modifier	MethodDeclaration
boolean
onPreferenceClick	SimpleName	MethodDeclaration
(
Preference	SimpleName	SimpleType
preference	SimpleName	SingleVariableDeclaration
)
{
Display	SimpleName	SimpleType
display	SimpleName	VariableDeclarationFragment
=
getWindowManager	SimpleName	MethodInvocation
(
)
.
getDefaultDisplay	SimpleName	MethodInvocation
(
)
;
int
width	SimpleName	VariableDeclarationFragment
=
display	SimpleName	MethodInvocation
.
getWidth	SimpleName	MethodInvocation
(
)
;
int
height	SimpleName	VariableDeclarationFragment
=
display	SimpleName	MethodInvocation
.
getHeight	SimpleName	MethodInvocation
(
)
;
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
getBaseContext	SimpleName	MethodInvocation
(
)
,
"Select a GIF - "	StringLiteral	InfixExpression
+
(
width	SimpleName	ParenthesizedExpression
)
+
" x "	StringLiteral	InfixExpression
+
height	SimpleName	InfixExpression
,
Toast	SimpleName	QualifiedName
.
LENGTH_LONG	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
Intent	SimpleName	SimpleType
photoPickerIntent	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
Intent	SimpleName	QualifiedName
.
ACTION_PICK	SimpleName	QualifiedName
,
android	SimpleName	QualifiedName
.
provider	SimpleName	QualifiedName
.
MediaStore	SimpleName	QualifiedName
.
Images	SimpleName	QualifiedName
.
Media	SimpleName	QualifiedName
.
EXTERNAL_CONTENT_URI	SimpleName	QualifiedName
)
;
photoPickerIntent	SimpleName	MethodInvocation
.
setType	SimpleName	MethodInvocation
(
"image/*"	StringLiteral	MethodInvocation
)
;
startActivityForResult	SimpleName	MethodInvocation
(
photoPickerIntent	SimpleName	MethodInvocation
,
1	NumberLiteral	MethodInvocation
)
;
return
true	BooleanLiteral	ReturnStatement
;
}
}
)
;
}
public	Modifier	MethodDeclaration
String	SimpleName	SimpleType
getRealPathFromURI	SimpleName	MethodDeclaration
(
Uri	SimpleName	SimpleType
contentUri	SimpleName	SingleVariableDeclaration
)
{
String	SimpleName	SimpleType
[
]
proj	SimpleName	VariableDeclarationFragment
=
{
MediaColumns	SimpleName	QualifiedName
.
DATA	SimpleName	QualifiedName
}
;
Cursor	SimpleName	SimpleType
cursor	SimpleName	VariableDeclarationFragment
=
managedQuery	SimpleName	MethodInvocation
(
contentUri	SimpleName	MethodInvocation
,
proj	SimpleName	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
)
;
int
column_index	SimpleName	VariableDeclarationFragment
=
cursor	SimpleName	MethodInvocation
.
getColumnIndexOrThrow	SimpleName	MethodInvocation
(
MediaColumns	SimpleName	QualifiedName
.
DATA	SimpleName	QualifiedName
)
;
cursor	SimpleName	MethodInvocation
.
moveToFirst	SimpleName	MethodInvocation
(
)
;
return
cursor	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
column_index	SimpleName	MethodInvocation
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onActivityResult	SimpleName	MethodDeclaration
(
int
requestCode	SimpleName	SingleVariableDeclaration
,
int
resultCode	SimpleName	SingleVariableDeclaration
,
Intent	SimpleName	SimpleType
data	SimpleName	SingleVariableDeclaration
)
{
super
.
onActivityResult	SimpleName	SuperMethodInvocation
(
requestCode	SimpleName	SuperMethodInvocation
,
resultCode	SimpleName	SuperMethodInvocation
,
data	SimpleName	SuperMethodInvocation
)
;
if
(
requestCode	SimpleName	InfixExpression
==
1	NumberLiteral	InfixExpression
)
{
if
(
resultCode	SimpleName	InfixExpression
==
Activity	SimpleName	QualifiedName
.
RESULT_OK	SimpleName	QualifiedName
)
{
Uri	SimpleName	SimpleType
selectedImage	SimpleName	VariableDeclarationFragment
=
data	SimpleName	MethodInvocation
.
getData	SimpleName	MethodInvocation
(
)
;
String	SimpleName	SimpleType
RealPath	SimpleName	VariableDeclarationFragment
;
SharedPreferences	SimpleName	SimpleType
customSharedPreference	SimpleName	VariableDeclarationFragment
=
getSharedPreferences	SimpleName	MethodInvocation
(
"custom_gif"	StringLiteral	MethodInvocation
,
Context	SimpleName	QualifiedName
.
MODE_PRIVATE	SimpleName	QualifiedName
)
;
SharedPreferences	SimpleName	QualifiedName
.
Editor	SimpleName	QualifiedName
editor	SimpleName	VariableDeclarationFragment
=
customSharedPreference	SimpleName	MethodInvocation
.
edit	SimpleName	MethodInvocation
(
)
;
RealPath	SimpleName	Assignment
=
getRealPathFromURI	SimpleName	MethodInvocation
(
selectedImage	SimpleName	MethodInvocation
)
;
editor	SimpleName	MethodInvocation
.
putString	SimpleName	MethodInvocation
(
"custom_gif"	StringLiteral	MethodInvocation
,
RealPath	SimpleName	MethodInvocation
)
;
editor	SimpleName	MethodInvocation
.
commit	SimpleName	MethodInvocation
(
)
;
ComponentName	SimpleName	SimpleType
component	SimpleName	VariableDeclarationFragment
=
new
ComponentName	SimpleName	SimpleType
(
getPackageName	SimpleName	MethodInvocation
(
)
,
getPackageName	SimpleName	MethodInvocation
(
)
+
".LWPEngine"	StringLiteral	InfixExpression
)
;
Intent	SimpleName	SimpleType
intent	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
WallpaperManager	SimpleName	QualifiedName
.
ACTION_CHANGE_LIVE_WALLPAPER	SimpleName	QualifiedName
)
;
intent	SimpleName	MethodInvocation
.
putExtra	SimpleName	MethodInvocation
(
WallpaperManager	SimpleName	QualifiedName
.
EXTRA_LIVE_WALLPAPER_COMPONENT	SimpleName	QualifiedName
,
component	SimpleName	MethodInvocation
)
;
startActivity	SimpleName	MethodInvocation
(
intent	SimpleName	MethodInvocation
)
;
}
}
}
@
Override	SimpleName	MarkerAnnotation
protected	Modifier	MethodDeclaration
void
onResume	SimpleName	MethodDeclaration
(
)
{
super
.
onResume	SimpleName	SuperMethodInvocation
(
)
;
}
@
Override	SimpleName	MarkerAnnotation
protected	Modifier	MethodDeclaration
void
onDestroy	SimpleName	MethodDeclaration
(
)
{
getPreferenceManager	SimpleName	MethodInvocation
(
)
.
getSharedPreferences	SimpleName	MethodInvocation
(
)
.
unregisterOnSharedPreferenceChangeListener	SimpleName	MethodInvocation
(
this
)
;
super
.
onDestroy	SimpleName	SuperMethodInvocation
(
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onSharedPreferenceChanged	SimpleName	MethodDeclaration
(
SharedPreferences	SimpleName	SimpleType
sharedPreferences	SimpleName	SingleVariableDeclaration
,
String	SimpleName	SimpleType
key	SimpleName	SingleVariableDeclaration
)
{
}
}
public	Modifier	TypeDeclaration
class
LWPEngine	SimpleName	TypeDeclaration
extends
WallpaperService	SimpleName	SimpleType
{
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
int
RESULT_LOAD_IMAGE1	SimpleName	VariableDeclarationFragment
=
1	NumberLiteral	VariableDeclarationFragment
;
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
Handler	SimpleName	SimpleType
mGIFHandler	SimpleName	VariableDeclarationFragment
=
new
Handler	SimpleName	SimpleType
(
)
;
public	Modifier	MethodDeclaration
Engine	SimpleName	SimpleType
onCreateEngine	SimpleName	MethodDeclaration
(
)
{
try
{
LWPEngine	SimpleName	QualifiedName
.
GIFEngine	SimpleName	QualifiedName
var1	SimpleName	VariableDeclarationFragment
=
new
LWPEngine	SimpleName	QualifiedName
.
GIFEngine	SimpleName	QualifiedName
(
)
;
return
var1	SimpleName	ReturnStatement
;
}
catch
(
IOException	SimpleName	SimpleType
var3	SimpleName	SingleVariableDeclaration
)
{
return
null	NullLiteral	ReturnStatement
;
}
}
class
GIFEngine	SimpleName	TypeDeclaration
extends
Engine	SimpleName	SimpleType
{
private	Modifier	FieldDeclaration
LWPEngineHelper	SimpleName	SimpleType
lWPEngineHelper	SimpleName	VariableDeclarationFragment
=
new
LWPEngineHelper	SimpleName	SimpleType
(
LWPEngine	SimpleName	ThisExpression
.
this
.
getApplicationContext	SimpleName	MethodInvocation
(
)
,
LWPEngine	SimpleName	ThisExpression
.
this
.
getResources	SimpleName	MethodInvocation
(
)
)
;
private	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
Movie	SimpleName	SimpleType
mGIF	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
int
mGIFDuration	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
int
mGIFHeight	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
Runnable	SimpleName	SimpleType
mGIFRunnable	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
int
mGIFWidth	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
String	SimpleName	SimpleType
mImageScale	SimpleName	VariableDeclarationFragment
=
"Stretch to screen"	StringLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
long
mStart	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
int
mWhen	SimpleName	VariableDeclarationFragment
;
@
SuppressWarnings	SimpleName	SingleMemberAnnotation
(
"unused"	StringLiteral	SingleMemberAnnotation
)
public	Modifier	MethodDeclaration
GIFEngine	SimpleName	MethodDeclaration
(
)
throws
IOException	SimpleName	SimpleType
{
SharedPreferences	SimpleName	SimpleType
prefs	SimpleName	VariableDeclarationFragment
=
PreferenceManager	SimpleName	MethodInvocation
.
getDefaultSharedPreferences	SimpleName	MethodInvocation
(
LWPEngine	SimpleName	ThisExpression
.
this
)
;
String	SimpleName	SimpleType
gifBG	SimpleName	VariableDeclarationFragment
=
prefs	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
"custom_gif"	StringLiteral	MethodInvocation
,
"This file does not work"	StringLiteral	MethodInvocation
)
;
InputStream	SimpleName	SimpleType
var2	SimpleName	VariableDeclarationFragment
=
new
FileInputStream	SimpleName	SimpleType
(
gifBG	SimpleName	ClassInstanceCreation
)
;
if
(
var2	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
{
try
{
this
.
mGIF	SimpleName	FieldAccess
=
Movie	SimpleName	MethodInvocation
.
decodeStream	SimpleName	MethodInvocation
(
var2	SimpleName	MethodInvocation
)
;
this
.
mGIFDuration	SimpleName	FieldAccess
=
this
.
mGIF	SimpleName	FieldAccess
.
duration	SimpleName	MethodInvocation
(
)
;
}
finally
{
var2	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
}
this
.
mGIFWidth	SimpleName	FieldAccess
=
this
.
mGIF	SimpleName	FieldAccess
.
width	SimpleName	MethodInvocation
(
)
;
this
.
mGIFHeight	SimpleName	FieldAccess
=
this
.
mGIF	SimpleName	FieldAccess
.
height	SimpleName	MethodInvocation
(
)
;
this
.
mWhen	SimpleName	FieldAccess
=
-
1	NumberLiteral	PrefixExpression
;
this
.
mGIFRunnable	SimpleName	FieldAccess
=
new
Runnable	SimpleName	SimpleType
(
)
{
public	Modifier	MethodDeclaration
void
run	SimpleName	MethodDeclaration
(
)
{
GIFEngine	SimpleName	ThisExpression
.
this
.
animGIF	SimpleName	MethodInvocation
(
)
;
}
}
;
}
else
{
throw
new
IOException	SimpleName	SimpleType
(
"Can't open GIF"	StringLiteral	ClassInstanceCreation
)
;
}
}
void
animGIF	SimpleName	MethodDeclaration
(
)
{
tick	SimpleName	MethodInvocation
(
)
;
SurfaceHolder	SimpleName	SimpleType
localSurfaceHolder	SimpleName	VariableDeclarationFragment
=
getSurfaceHolder	SimpleName	MethodInvocation
(
)
;
Canvas	SimpleName	SimpleType
localCanvas	SimpleName	VariableDeclarationFragment
=
null	NullLiteral	VariableDeclarationFragment
;
localCanvas	SimpleName	Assignment
=
localSurfaceHolder	SimpleName	MethodInvocation
.
lockCanvas	SimpleName	MethodInvocation
(
)
;
if
(
localCanvas	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
animGIFDraw	SimpleName	MethodInvocation
(
localCanvas	SimpleName	MethodInvocation
)
;
if
(
localCanvas	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
localSurfaceHolder	SimpleName	MethodInvocation
.
unlockCanvasAndPost	SimpleName	MethodInvocation
(
localCanvas	SimpleName	MethodInvocation
)
;
LWPEngine	SimpleName	QualifiedName
.
mGIFHandler	SimpleName	QualifiedName
.
removeCallbacks	SimpleName	MethodInvocation
(
this
.
mGIFRunnable	SimpleName	FieldAccess
)
;
if
(
isVisible	SimpleName	MethodInvocation
(
)
)
LWPEngine	SimpleName	QualifiedName
.
mGIFHandler	SimpleName	QualifiedName
.
postDelayed	SimpleName	MethodInvocation
(
this
.
mGIFRunnable	SimpleName	FieldAccess
,
40L	NumberLiteral	MethodInvocation
)
;
return
;
}
void
animGIFDraw	SimpleName	MethodDeclaration
(
Canvas	SimpleName	SimpleType
var1	SimpleName	SingleVariableDeclaration
)
{
this
.
lWPEngineHelper	SimpleName	FieldAccess
.
setBackground	SimpleName	MethodInvocation
(
var1	SimpleName	MethodInvocation
)
;
var1	SimpleName	MethodInvocation
.
save	SimpleName	MethodInvocation
(
)
;
PointF	SimpleName	SimpleType
var3	SimpleName	VariableDeclarationFragment
=
this
.
lWPEngineHelper	SimpleName	FieldAccess
.
getCanvasScale	SimpleName	MethodInvocation
(
this
.
mImageScale	SimpleName	FieldAccess
,
this
.
mGIFWidth	SimpleName	FieldAccess
,
this
.
mGIFHeight	SimpleName	FieldAccess
)
;
var1	SimpleName	MethodInvocation
.
scale	SimpleName	MethodInvocation
(
var3	SimpleName	QualifiedName
.
x	SimpleName	QualifiedName
,
var3	SimpleName	QualifiedName
.
y	SimpleName	QualifiedName
)
;
this
.
mGIF	SimpleName	FieldAccess
.
setTime	SimpleName	MethodInvocation
(
this
.
mWhen	SimpleName	FieldAccess
)
;
Point	SimpleName	SimpleType
var5	SimpleName	VariableDeclarationFragment
=
this
.
lWPEngineHelper	SimpleName	FieldAccess
.
getImagePos	SimpleName	MethodInvocation
(
var3	SimpleName	MethodInvocation
,
this
.
mGIFWidth	SimpleName	FieldAccess
,
this
.
mGIFHeight	SimpleName	FieldAccess
)
;
this
.
mGIF	SimpleName	FieldAccess
.
draw	SimpleName	MethodInvocation
(
var1	SimpleName	MethodInvocation
,
(
float
)
var5	SimpleName	QualifiedName
.
x	SimpleName	QualifiedName
,
(
float
)
var5	SimpleName	QualifiedName
.
y	SimpleName	QualifiedName
)
;
var1	SimpleName	MethodInvocation
.
restore	SimpleName	MethodInvocation
(
)
;
}
public	Modifier	MethodDeclaration
void
onDestroy	SimpleName	MethodDeclaration
(
)
{
super
.
onDestroy	SimpleName	SuperMethodInvocation
(
)
;
LWPEngine	SimpleName	QualifiedName
.
mGIFHandler	SimpleName	QualifiedName
.
removeCallbacks	SimpleName	MethodInvocation
(
this
.
mGIFRunnable	SimpleName	FieldAccess
)
;
}
public	Modifier	MethodDeclaration
void
onOffsetsChanged	SimpleName	MethodDeclaration
(
float
var1	SimpleName	SingleVariableDeclaration
,
float
var2	SimpleName	SingleVariableDeclaration
,
float
var3	SimpleName	SingleVariableDeclaration
,
float
var4	SimpleName	SingleVariableDeclaration
,
int
var5	SimpleName	SingleVariableDeclaration
,
int
var6	SimpleName	SingleVariableDeclaration
)
{
super
.
onOffsetsChanged	SimpleName	SuperMethodInvocation
(
var1	SimpleName	SuperMethodInvocation
,
var2	SimpleName	SuperMethodInvocation
,
var3	SimpleName	SuperMethodInvocation
,
var4	SimpleName	SuperMethodInvocation
,
var5	SimpleName	SuperMethodInvocation
,
var6	SimpleName	SuperMethodInvocation
)
;
this
.
animGIF	SimpleName	MethodInvocation
(
)
;
}
public	Modifier	MethodDeclaration
void
onSurfaceChanged	SimpleName	MethodDeclaration
(
SurfaceHolder	SimpleName	SimpleType
var1	SimpleName	SingleVariableDeclaration
,
int
var2	SimpleName	SingleVariableDeclaration
,
int
var3	SimpleName	SingleVariableDeclaration
,
int
var4	SimpleName	SingleVariableDeclaration
)
{
super
.
onSurfaceChanged	SimpleName	SuperMethodInvocation
(
var1	SimpleName	SuperMethodInvocation
,
var2	SimpleName	SuperMethodInvocation
,
var3	SimpleName	SuperMethodInvocation
,
var4	SimpleName	SuperMethodInvocation
)
;
this
.
animGIF	SimpleName	MethodInvocation
(
)
;
}
public	Modifier	MethodDeclaration
void
onVisibilityChanged	SimpleName	MethodDeclaration
(
boolean
var1	SimpleName	SingleVariableDeclaration
)
{
super
.
onVisibilityChanged	SimpleName	SuperMethodInvocation
(
var1	SimpleName	SuperMethodInvocation
)
;
if
(
var1	SimpleName	IfStatement
)
{
this
.
animGIF	SimpleName	MethodInvocation
(
)
;
}
else
{
LWPEngine	SimpleName	QualifiedName
.
mGIFHandler	SimpleName	QualifiedName
.
removeCallbacks	SimpleName	MethodInvocation
(
this
.
mGIFRunnable	SimpleName	FieldAccess
)
;
}
}
public	Modifier	MethodDeclaration
void
onSharedPreferenceChanged	SimpleName	MethodDeclaration
(
SharedPreferences	SimpleName	SimpleType
prefs	SimpleName	SingleVariableDeclaration
,
String	SimpleName	SimpleType
key	SimpleName	SingleVariableDeclaration
)
{
String	SimpleName	SimpleType
gifBG	SimpleName	VariableDeclarationFragment
=
prefs	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
"custom_gif"	StringLiteral	MethodInvocation
,
"This file does not work"	StringLiteral	MethodInvocation
)
;
}
void
tick	SimpleName	MethodDeclaration
(
)
{
if
(
(
long
)
this
.
mWhen	SimpleName	FieldAccess
==
-
1L	NumberLiteral	PrefixExpression
)
{
this
.
mWhen	SimpleName	FieldAccess
=
0	NumberLiteral	Assignment
;
this
.
mStart	SimpleName	FieldAccess
=
SystemClock	SimpleName	MethodInvocation
.
uptimeMillis	SimpleName	MethodInvocation
(
)
;
}
else
{
if
(
this
.
mGIFDuration	SimpleName	FieldAccess
!=
0	NumberLiteral	InfixExpression
)
{
this
.
mWhen	SimpleName	FieldAccess
=
(
int
)
(
(
SystemClock	SimpleName	MethodInvocation
.
uptimeMillis	SimpleName	MethodInvocation
(
)
-
this
.
mStart	SimpleName	FieldAccess
)
%
(
long
)
this
.
mGIFDuration	SimpleName	FieldAccess
)
;
}
}
}
}
}
protected	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
konsumsi	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
konsumsi	SimpleName	SuperMethodInvocation
)
;
radioAktivitasGroup	SimpleName	Assignment
=
(
RadioGroup	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
radioAktivitasGroup	SimpleName	QualifiedName
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
aktivitas_user	SimpleName	QualifiedName
)
;
usernameP	SimpleName	Assignment
=
Login	SimpleName	QualifiedName
.
usernameP	SimpleName	QualifiedName
;
System	SimpleName	QualifiedName
.
out	SimpleName	QualifiedName
.
println	SimpleName	MethodInvocation
(
usernameP	SimpleName	MethodInvocation
)
;
buttonDone	SimpleName	MethodInvocation
(
)
;
}
public	Modifier	MethodDeclaration
void
buttonDone	SimpleName	MethodDeclaration
(
)
{
selesai	SimpleName	Assignment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
buttonProses	SimpleName	QualifiedName
)
;
selesai	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
OnClickListener	SimpleName	SimpleType
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
int
selectedId	SimpleName	VariableDeclarationFragment
=
radioAktivitasGroup	SimpleName	MethodInvocation
.
getCheckedRadioButtonId	SimpleName	MethodInvocation
(
)
;
radioAktivitasButton	SimpleName	Assignment
=
(
RadioButton	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
selectedId	SimpleName	MethodInvocation
)
;
String	SimpleName	SimpleType
Aktivitas	SimpleName	VariableDeclarationFragment
=
radioAktivitasButton	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
;
}
}
)
;
}
intent	SimpleName	Assignment
=
new
Intent	SimpleName	SimpleType
(
getApplicationContext	SimpleName	MethodInvocation
(
)
,
SaveService	SimpleName	SimpleType
.
class
)
;
intent	SimpleName	MethodInvocation
.
putExtra	SimpleName	MethodInvocation
(
"lt"	StringLiteral	MethodInvocation
,
latituteField	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
.
trim	SimpleName	MethodInvocation
(
)
)
;
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
int
onStartCommand	SimpleName	MethodDeclaration
(
Intent	SimpleName	SimpleType
intent	SimpleName	SingleVariableDeclaration
,
int
flags	SimpleName	SingleVariableDeclaration
,
int
startId	SimpleName	SingleVariableDeclaration
)
{
Bundle	SimpleName	SimpleType
extras	SimpleName	VariableDeclarationFragment
=
intent	SimpleName	MethodInvocation
.
getExtras	SimpleName	MethodInvocation
(
)
;
if
(
extras	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
LAT	SimpleName	Assignment
=
extras	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
"lt"	StringLiteral	MethodInvocation
)
;
LNGT	SimpleName	Assignment
=
extras	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
"lg"	StringLiteral	MethodInvocation
)
;
SPEED	SimpleName	Assignment
=
extras	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
"sp"	StringLiteral	MethodInvocation
)
;
ALT	SimpleName	Assignment
=
extras	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
"alt"	StringLiteral	MethodInvocation
)
;
LATDMS	SimpleName	Assignment
=
extras	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
"ltDMS"	StringLiteral	MethodInvocation
)
;
LONGDMS	SimpleName	Assignment
=
extras	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
"lgDMS"	StringLiteral	MethodInvocation
)
;
ADD	SimpleName	Assignment
=
extras	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
"Add"	StringLiteral	MethodInvocation
)
;
TNUM	SimpleName	Assignment
=
extras	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
"TNum"	StringLiteral	MethodInvocation
)
;
startDate	SimpleName	Assignment
=
new
Date	SimpleName	SimpleType
(
)
;
displayToast	SimpleName	MethodInvocation
(
"Service started at: "	StringLiteral	InfixExpression
+
startDate	SimpleName	InfixExpression
)
;
new
Save	SimpleName	SimpleType
(
)
.
execute	SimpleName	MethodInvocation
(
"http://192.168.30.1/androidphp/SaveValues.php"	StringLiteral	MethodInvocation
)
;
return
START_STICKY	SimpleName	ReturnStatement
;
}
LNGT	SimpleName	Assignment
=
extras	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
"lg"	StringLiteral	MethodInvocation
)
;
LAT	SimpleName	Assignment
=
extras	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
"lt"	StringLiteral	MethodInvocation
)
;
intent	SimpleName	MethodInvocation
.
putExtra	SimpleName	MethodInvocation
(
"lg"	StringLiteral	MethodInvocation
,
longitudeField	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
.
trim	SimpleName	MethodInvocation
(
)
)
;
intent	SimpleName	MethodInvocation
.
putExtra	SimpleName	MethodInvocation
(
"sp"	StringLiteral	MethodInvocation
,
SpeedField	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
.
trim	SimpleName	MethodInvocation
(
)
)
;
intent	SimpleName	MethodInvocation
.
putExtra	SimpleName	MethodInvocation
(
"alt"	StringLiteral	MethodInvocation
,
AltitudeField	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
.
trim	SimpleName	MethodInvocation
(
)
)
;
intent	SimpleName	MethodInvocation
.
putExtra	SimpleName	MethodInvocation
(
"ltDMS"	StringLiteral	MethodInvocation
,
lbllatitude	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
.
trim	SimpleName	MethodInvocation
(
)
)
;
intent	SimpleName	MethodInvocation
.
putExtra	SimpleName	MethodInvocation
(
"lgDMS"	StringLiteral	MethodInvocation
,
lbllongitude	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
.
trim	SimpleName	MethodInvocation
(
)
)
;
intent	SimpleName	MethodInvocation
.
putExtra	SimpleName	MethodInvocation
(
"Add"	StringLiteral	MethodInvocation
,
AddressLabel	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
.
trim	SimpleName	MethodInvocation
(
)
)
;
intent	SimpleName	MethodInvocation
.
putExtra	SimpleName	MethodInvocation
(
"TNum"	StringLiteral	MethodInvocation
,
TNumber	SimpleName	MethodInvocation
)
;
public	Modifier	TypeDeclaration
static	Modifier	TypeDeclaration
class
PagerAdapter	SimpleName	TypeDeclaration
extends
FragmentPagerAdapter	SimpleName	SimpleType
{
public	Modifier	MethodDeclaration
PagerAdapter	SimpleName	MethodDeclaration
(
FragmentManager	SimpleName	SimpleType
fm	SimpleName	SingleVariableDeclaration
)
{
super
(
fm	SimpleName	SuperConstructorInvocation
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
Fragment	SimpleName	SimpleType
getItem	SimpleName	MethodDeclaration
(
int
position	SimpleName	SingleVariableDeclaration
)
{
Fragment	SimpleName	SimpleType
fragment	SimpleName	VariableDeclarationFragment
=
null	NullLiteral	VariableDeclarationFragment
;
switch
(
position	SimpleName	SwitchStatement
)
{
case
0	NumberLiteral	SwitchCase
:
fragment	SimpleName	Assignment
=
new
FragmentTest	SimpleName	SimpleType
(
)
;
break
;
case
1	NumberLiteral	SwitchCase
:
fragment	SimpleName	Assignment
=
new
FragmentMap	SimpleName	SimpleType
(
)
;
break
;
}
return
fragment	SimpleName	ReturnStatement
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
int
getItemPosition	SimpleName	MethodDeclaration
(
Object	SimpleName	SimpleType
object	SimpleName	SingleVariableDeclaration
)
{
return
POSITION_NONE	SimpleName	ReturnStatement
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
int
getCount	SimpleName	MethodDeclaration
(
)
{
return
2	NumberLiteral	ReturnStatement
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
CharSequence	SimpleName	SimpleType
getPageTitle	SimpleName	MethodDeclaration
(
int
position	SimpleName	SingleVariableDeclaration
)
{
return
null	NullLiteral	ReturnStatement
;
}
}
}
public	Modifier	TypeDeclaration
class
FragmentMap	SimpleName	TypeDeclaration
extends
Fragment	SimpleName	SimpleType
{
Context	SimpleName	SimpleType
context	SimpleName	VariableDeclarationFragment
;
MapView	SimpleName	SimpleType
mapView	SimpleName	VariableDeclarationFragment
;
GoogleMap	SimpleName	SimpleType
map	SimpleName	VariableDeclarationFragment
;
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
View	SimpleName	SimpleType
onCreateView	SimpleName	MethodDeclaration
(
LayoutInflater	SimpleName	SimpleType
inflater	SimpleName	SingleVariableDeclaration
,
ViewGroup	SimpleName	SimpleType
container	SimpleName	SingleVariableDeclaration
,
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
View	SimpleName	SimpleType
v	SimpleName	VariableDeclarationFragment
=
inflater	SimpleName	MethodInvocation
.
inflate	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
people_map_fragment_layout	SimpleName	QualifiedName
,
container	SimpleName	MethodInvocation
,
false	BooleanLiteral	MethodInvocation
)
;
context	SimpleName	Assignment
=
getActivity	SimpleName	MethodInvocation
(
)
.
getApplicationContext	SimpleName	MethodInvocation
(
)
;
try
{
MapsInitializer	SimpleName	MethodInvocation
.
initialize	SimpleName	MethodInvocation
(
context	SimpleName	MethodInvocation
)
;
}
catch
(
GooglePlayServicesNotAvailableException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
Log	SimpleName	MethodInvocation
.
e	SimpleName	MethodInvocation
(
"Address Map"	StringLiteral	MethodInvocation
,
"Could not initialize google play"	StringLiteral	MethodInvocation
,
e	SimpleName	MethodInvocation
)
;
}
switch
(
GooglePlayServicesUtil	SimpleName	MethodInvocation
.
isGooglePlayServicesAvailable	SimpleName	MethodInvocation
(
getActivity	SimpleName	MethodInvocation
(
)
)
)
{
case
ConnectionResult	SimpleName	QualifiedName
.
SUCCESS	SimpleName	QualifiedName
:
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
getActivity	SimpleName	MethodInvocation
(
)
,
"SUCCESS"	StringLiteral	MethodInvocation
,
Toast	SimpleName	QualifiedName
.
LENGTH_SHORT	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
mapView	SimpleName	Assignment
=
(
MapView	SimpleName	SimpleType
)
v	SimpleName	MethodInvocation
.
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
mapView	SimpleName	QualifiedName
)
;
mapView	SimpleName	MethodInvocation
.
onCreate	SimpleName	MethodInvocation
(
savedInstanceState	SimpleName	MethodInvocation
)
;
if
(
mapView	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
{
map	SimpleName	Assignment
=
mapView	SimpleName	MethodInvocation
.
getMap	SimpleName	MethodInvocation
(
)
;
map	SimpleName	MethodInvocation
.
getUiSettings	SimpleName	MethodInvocation
(
)
.
setMyLocationButtonEnabled	SimpleName	MethodInvocation
(
false	BooleanLiteral	MethodInvocation
)
;
map	SimpleName	MethodInvocation
.
setMyLocationEnabled	SimpleName	MethodInvocation
(
true	BooleanLiteral	MethodInvocation
)
;
CameraUpdate	SimpleName	SimpleType
cameraUpdate	SimpleName	VariableDeclarationFragment
=
CameraUpdateFactory	SimpleName	MethodInvocation
.
newLatLngZoom	SimpleName	MethodInvocation
(
new
LatLng	SimpleName	SimpleType
(
43.1	NumberLiteral	ClassInstanceCreation
,
-
87.9	NumberLiteral	PrefixExpression
)
,
10	NumberLiteral	MethodInvocation
)
;
map	SimpleName	MethodInvocation
.
animateCamera	SimpleName	MethodInvocation
(
cameraUpdate	SimpleName	MethodInvocation
)
;
}
break
;
case
ConnectionResult	SimpleName	QualifiedName
.
SERVICE_MISSING	SimpleName	QualifiedName
:
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
getActivity	SimpleName	MethodInvocation
(
)
,
"SERVICE MISSING"	StringLiteral	MethodInvocation
,
Toast	SimpleName	QualifiedName
.
LENGTH_SHORT	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
break
;
case
ConnectionResult	SimpleName	QualifiedName
.
SERVICE_VERSION_UPDATE_REQUIRED	SimpleName	QualifiedName
:
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
getActivity	SimpleName	MethodInvocation
(
)
,
"UPDATE REQUIRED"	StringLiteral	MethodInvocation
,
Toast	SimpleName	QualifiedName
.
LENGTH_SHORT	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
break
;
default
:
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
getActivity	SimpleName	MethodInvocation
(
)
,
GooglePlayServicesUtil	SimpleName	MethodInvocation
.
isGooglePlayServicesAvailable	SimpleName	MethodInvocation
(
getActivity	SimpleName	MethodInvocation
(
)
)
,
Toast	SimpleName	QualifiedName
.
LENGTH_SHORT	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
}
return
v	SimpleName	ReturnStatement
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onResume	SimpleName	MethodDeclaration
(
)
{
super
.
onResume	SimpleName	SuperMethodInvocation
(
)
;
if
(
mapView	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
mapView	SimpleName	MethodInvocation
.
onResume	SimpleName	MethodInvocation
(
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onDestroy	SimpleName	MethodDeclaration
(
)
{
super
.
onDestroy	SimpleName	SuperMethodInvocation
(
)
;
if
(
mapView	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
mapView	SimpleName	MethodInvocation
.
onDestroy	SimpleName	MethodInvocation
(
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onLowMemory	SimpleName	MethodDeclaration
(
)
{
super
.
onLowMemory	SimpleName	SuperMethodInvocation
(
)
;
if
(
mapView	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
mapView	SimpleName	MethodInvocation
.
onLowMemory	SimpleName	MethodInvocation
(
)
;
}
}
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
activity_main	SimpleName	QualifiedName
)
;
if
(
savedInstanceState	SimpleName	InfixExpression
==
null	NullLiteral	InfixExpression
)
{
getFragmentManager	SimpleName	MethodInvocation
(
)
.
beginTransaction	SimpleName	MethodInvocation
(
)
.
add	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
container	SimpleName	QualifiedName
,
new
PlaceholderFragment	SimpleName	SimpleType
(
)
)
.
commit	SimpleName	MethodInvocation
(
)
;
}
public	Modifier	TypeDeclaration
static	Modifier	TypeDeclaration
class
PlaceholderFragment	SimpleName	TypeDeclaration
extends
Fragment	SimpleName	SimpleType
{
public	Modifier	MethodDeclaration
PlaceholderFragment	SimpleName	MethodDeclaration
(
)
{
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
View	SimpleName	SimpleType
onCreateView	SimpleName	MethodDeclaration
(
LayoutInflater	SimpleName	SimpleType
inflater	SimpleName	SingleVariableDeclaration
,
ViewGroup	SimpleName	SimpleType
container	SimpleName	SingleVariableDeclaration
,
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
View	SimpleName	SimpleType
rootView	SimpleName	VariableDeclarationFragment
=
inflater	SimpleName	MethodInvocation
.
inflate	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
fragment_main	SimpleName	QualifiedName
,
container	SimpleName	MethodInvocation
,
false	BooleanLiteral	MethodInvocation
)
;
return
rootView	SimpleName	ReturnStatement
;
}
}
public	Modifier	TypeDeclaration
class
sendSMS	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
public	Modifier	MethodDeclaration
sendSMS	SimpleName	MethodDeclaration
(
final	Modifier	SingleVariableDeclaration
String	SimpleName	SimpleType
phoneNo	SimpleName	SingleVariableDeclaration
,
final	Modifier	SingleVariableDeclaration
String	SimpleName	SimpleType
sms	SimpleName	SingleVariableDeclaration
)
{
DialogInterface	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
dialogClickListener	SimpleName	VariableDeclarationFragment
=
new
DialogInterface	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
DialogInterface	SimpleName	SimpleType
dialog	SimpleName	SingleVariableDeclaration
,
int
which	SimpleName	SingleVariableDeclaration
)
{
switch
(
which	SimpleName	SwitchStatement
)
{
case
DialogInterface	SimpleName	QualifiedName
.
BUTTON_POSITIVE	SimpleName	QualifiedName
:
try
{
SmsManager	SimpleName	SimpleType
smsManager	SimpleName	VariableDeclarationFragment
=
SmsManager	SimpleName	MethodInvocation
.
getDefault	SimpleName	MethodInvocation
(
)
;
smsManager	SimpleName	MethodInvocation
.
sendTextMessage	SimpleName	MethodInvocation
(
phoneNo	SimpleName	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
sms	SimpleName	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
)
;
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
getApplicationContext	SimpleName	MethodInvocation
(
)
,
"Request Sent!"	StringLiteral	MethodInvocation
,
Toast	SimpleName	QualifiedName
.
LENGTH_LONG	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
}
catch
(
Exception	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
getApplicationContext	SimpleName	MethodInvocation
(
)
,
"Request faild, please try again later!"	StringLiteral	MethodInvocation
,
Toast	SimpleName	QualifiedName
.
LENGTH_LONG	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
break
;
case
DialogInterface	SimpleName	QualifiedName
.
BUTTON_NEGATIVE	SimpleName	QualifiedName
:
dialog	SimpleName	MethodInvocation
.
cancel	SimpleName	MethodInvocation
(
)
;
break
;
}
}
}
;
AlertDialog	SimpleName	QualifiedName
.
Builder	SimpleName	QualifiedName
ab	SimpleName	VariableDeclarationFragment
=
new
AlertDialog	SimpleName	QualifiedName
.
Builder	SimpleName	QualifiedName
(
this
)
;
ab	SimpleName	MethodInvocation
.
setMessage	SimpleName	MethodInvocation
(
"Are you sure to delete?"	StringLiteral	MethodInvocation
)
.
setPositiveButton	SimpleName	MethodInvocation
(
"Yes"	StringLiteral	MethodInvocation
,
dialogClickListener	SimpleName	MethodInvocation
)
.
setNegativeButton	SimpleName	MethodInvocation
(
"No"	StringLiteral	MethodInvocation
,
dialogClickListener	SimpleName	MethodInvocation
)
.
show	SimpleName	MethodInvocation
(
)
;
return
;
}
}
new
sendSMS	SimpleName	SimpleType
(
phoneNo	SimpleName	ClassInstanceCreation
,
sms	SimpleName	ClassInstanceCreation
)
;
package
com	SimpleName	QualifiedName
.
lyricscloud	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
ActionBar	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
FragmentTransaction	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
ActionBar	SimpleName	QualifiedName
.
Tab	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
support	SimpleName	QualifiedName
.
v4	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
FragmentActivity	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
support	SimpleName	QualifiedName
.
v4	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
ViewPager	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
HomeActivity	SimpleName	TypeDeclaration
extends
FragmentActivity	SimpleName	SimpleType
implements
ActionBar	SimpleName	QualifiedName
.
TabListener	SimpleName	QualifiedName
{
private	Modifier	FieldDeclaration
ViewPager	SimpleName	SimpleType
viewPager	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
TabsPagerAdapter	SimpleName	SimpleType
mAdapter	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
ActionBar	SimpleName	SimpleType
actionBar	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
String	SimpleName	SimpleType
[
]
tabs	SimpleName	VariableDeclarationFragment
=
{
"Generate lyrics"	StringLiteral	ArrayInitializer
,
"Bookmarks"	StringLiteral	ArrayInitializer
,
"Top 100"	StringLiteral	ArrayInitializer
}
;
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
home	SimpleName	QualifiedName
)
;
viewPager	SimpleName	Assignment
=
(
ViewPager	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
pager	SimpleName	QualifiedName
)
;
actionBar	SimpleName	Assignment
=
getActionBar	SimpleName	MethodInvocation
(
)
;
mAdapter	SimpleName	Assignment
=
new
TabsPagerAdapter	SimpleName	SimpleType
(
getSupportFragmentManager	SimpleName	MethodInvocation
(
)
)
;
viewPager	SimpleName	MethodInvocation
.
setAdapter	SimpleName	MethodInvocation
(
mAdapter	SimpleName	MethodInvocation
)
;
actionBar	SimpleName	MethodInvocation
.
setHomeButtonEnabled	SimpleName	MethodInvocation
(
false	BooleanLiteral	MethodInvocation
)
;
actionBar	SimpleName	MethodInvocation
.
setNavigationMode	SimpleName	MethodInvocation
(
ActionBar	SimpleName	QualifiedName
.
NAVIGATION_MODE_TABS	SimpleName	QualifiedName
)
;
for
(
String	SimpleName	SimpleType
tab_name	SimpleName	SingleVariableDeclaration
:
tabs	SimpleName	EnhancedForStatement
)
{
actionBar	SimpleName	MethodInvocation
.
addTab	SimpleName	MethodInvocation
(
actionBar	SimpleName	MethodInvocation
.
newTab	SimpleName	MethodInvocation
(
)
.
setText	SimpleName	MethodInvocation
(
tab_name	SimpleName	MethodInvocation
)
.
setTabListener	SimpleName	MethodInvocation
(
this
)
)
;
}
viewPager	SimpleName	MethodInvocation
.
setOnPageChangeListener	SimpleName	MethodInvocation
(
new
ViewPager	SimpleName	QualifiedName
.
OnPageChangeListener	SimpleName	QualifiedName
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onPageSelected	SimpleName	MethodDeclaration
(
int
position	SimpleName	SingleVariableDeclaration
)
{
actionBar	SimpleName	MethodInvocation
.
setSelectedNavigationItem	SimpleName	MethodInvocation
(
position	SimpleName	MethodInvocation
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onPageScrolled	SimpleName	MethodDeclaration
(
int
arg0	SimpleName	SingleVariableDeclaration
,
float
arg1	SimpleName	SingleVariableDeclaration
,
int
arg2	SimpleName	SingleVariableDeclaration
)
{
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onPageScrollStateChanged	SimpleName	MethodDeclaration
(
int
arg0	SimpleName	SingleVariableDeclaration
)
{
}
}
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onTabReselected	SimpleName	MethodDeclaration
(
Tab	SimpleName	SimpleType
tab	SimpleName	SingleVariableDeclaration
,
FragmentTransaction	SimpleName	SimpleType
ft	SimpleName	SingleVariableDeclaration
)
{
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onTabSelected	SimpleName	MethodDeclaration
(
Tab	SimpleName	SimpleType
tab	SimpleName	SingleVariableDeclaration
,
FragmentTransaction	SimpleName	SimpleType
ft	SimpleName	SingleVariableDeclaration
)
{
viewPager	SimpleName	MethodInvocation
.
setCurrentItem	SimpleName	MethodInvocation
(
tab	SimpleName	MethodInvocation
.
getPosition	SimpleName	MethodInvocation
(
)
)
;
if
(
tab	SimpleName	MethodInvocation
.
getPosition	SimpleName	MethodInvocation
(
)
==
1	NumberLiteral	InfixExpression
)
{
}
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onTabUnselected	SimpleName	MethodDeclaration
(
Tab	SimpleName	SimpleType
tab	SimpleName	SingleVariableDeclaration
,
FragmentTransaction	SimpleName	SimpleType
ft	SimpleName	SingleVariableDeclaration
)
{
}
}
package
com	SimpleName	QualifiedName
.
example	SimpleName	QualifiedName
.
tipcalculator	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Activity	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
text	SimpleName	QualifiedName
.
Editable	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
text	SimpleName	QualifiedName
.
TextWatcher	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
EditText	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
SeekBar	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
SeekBar	SimpleName	QualifiedName
.
OnSeekBarChangeListener	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
TextView	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
MainActivity	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
String	SimpleName	SimpleType
BILL_TOTAL	SimpleName	VariableDeclarationFragment
=
"BILL_TOTAL"	StringLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
String	SimpleName	SimpleType
CUSTOM_PERCENT	SimpleName	VariableDeclarationFragment
=
"CUSTOM_PERCENT"	StringLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
double
currentBillTotal	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
int
currentCustomPercent	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
EditText	SimpleName	SimpleType
tip10EditText	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
EditText	SimpleName	SimpleType
total10EditText	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
EditText	SimpleName	SimpleType
tip15EditText	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
EditText	SimpleName	SimpleType
total15EditText	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
EditText	SimpleName	SimpleType
billEditText	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
EditText	SimpleName	SimpleType
tip20EditText	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
EditText	SimpleName	SimpleType
total20EditText	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
TextView	SimpleName	SimpleType
customTipTextView	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
EditText	SimpleName	SimpleType
tipCustomEditText	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
EditText	SimpleName	SimpleType
totalCustomEditText	SimpleName	VariableDeclarationFragment
;
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
activity_main	SimpleName	QualifiedName
)
;
if
(
savedInstanceState	SimpleName	InfixExpression
==
null	NullLiteral	InfixExpression
)
{
currentBillTotal	SimpleName	Assignment
=
0.0	NumberLiteral	Assignment
;
currentCustomPercent	SimpleName	Assignment
=
18	NumberLiteral	Assignment
;
}
else
{
currentBillTotal	SimpleName	Assignment
=
savedInstanceState	SimpleName	MethodInvocation
.
getDouble	SimpleName	MethodInvocation
(
BILL_TOTAL	SimpleName	MethodInvocation
)
;
currentCustomPercent	SimpleName	Assignment
=
savedInstanceState	SimpleName	MethodInvocation
.
getInt	SimpleName	MethodInvocation
(
CUSTOM_PERCENT	SimpleName	MethodInvocation
)
;
}
tip10EditText	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
tip10EditText	SimpleName	QualifiedName
)
;
total10EditText	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
total10EditText	SimpleName	QualifiedName
)
;
tip15EditText	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
tip15EditText	SimpleName	QualifiedName
)
;
total15EditText	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
total15EditText	SimpleName	QualifiedName
)
;
tip20EditText	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
tip20EditText	SimpleName	QualifiedName
)
;
total20EditText	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
total20EditText	SimpleName	QualifiedName
)
;
customTipTextView	SimpleName	Assignment
=
(
TextView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
customTipTextView	SimpleName	QualifiedName
)
;
tipCustomEditText	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
customTipTextView	SimpleName	QualifiedName
)
;
totalCustomEditText	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
totalCustomEditText	SimpleName	QualifiedName
)
;
billEditText	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
billEditText	SimpleName	QualifiedName
)
;
billEditText	SimpleName	MethodInvocation
.
addTextChangedListener	SimpleName	MethodInvocation
(
billEditTextWatcher	SimpleName	MethodInvocation
)
;
SeekBar	SimpleName	SimpleType
customSeekBar	SimpleName	VariableDeclarationFragment
=
(
SeekBar	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
customSeekBar	SimpleName	QualifiedName
)
;
customSeekBar	SimpleName	MethodInvocation
.
setOnSeekBarChangeListener	SimpleName	MethodInvocation
(
customSeekBarListener	SimpleName	MethodInvocation
)
;
}
private	Modifier	MethodDeclaration
void
updateStandard	SimpleName	MethodDeclaration
(
)
{
double
tenPercentTip	SimpleName	VariableDeclarationFragment
=
currentBillTotal	SimpleName	InfixExpression
*
.1	NumberLiteral	InfixExpression
;
double
tenPercentTotal	SimpleName	VariableDeclarationFragment
=
currentBillTotal	SimpleName	InfixExpression
+
tenPercentTip	SimpleName	InfixExpression
;
tip10EditText	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
String	SimpleName	MethodInvocation
.
format	SimpleName	MethodInvocation
(
"%.02f"	StringLiteral	MethodInvocation
,
tenPercentTip	SimpleName	MethodInvocation
)
)
;
total10EditText	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
String	SimpleName	MethodInvocation
.
format	SimpleName	MethodInvocation
(
"%.02f"	StringLiteral	MethodInvocation
,
tenPercentTotal	SimpleName	MethodInvocation
)
)
;
double
fifteenPercentTip	SimpleName	VariableDeclarationFragment
=
currentBillTotal	SimpleName	InfixExpression
*
.15	NumberLiteral	InfixExpression
;
double
fifteenPercentTotal	SimpleName	VariableDeclarationFragment
=
currentBillTotal	SimpleName	InfixExpression
+
fifteenPercentTip	SimpleName	InfixExpression
;
tip15EditText	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
String	SimpleName	MethodInvocation
.
format	SimpleName	MethodInvocation
(
"%.02f"	StringLiteral	MethodInvocation
,
fifteenPercentTip	SimpleName	MethodInvocation
)
)
;
total15EditText	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
String	SimpleName	MethodInvocation
.
format	SimpleName	MethodInvocation
(
"%.02f"	StringLiteral	MethodInvocation
,
fifteenPercentTotal	SimpleName	MethodInvocation
)
)
;
double
twentyPercentTip	SimpleName	VariableDeclarationFragment
=
currentBillTotal	SimpleName	InfixExpression
*
.2	NumberLiteral	InfixExpression
;
double
twentyPercentTotal	SimpleName	VariableDeclarationFragment
=
currentBillTotal	SimpleName	InfixExpression
+
twentyPercentTip	SimpleName	InfixExpression
;
tip20EditText	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
String	SimpleName	MethodInvocation
.
format	SimpleName	MethodInvocation
(
"%.02f"	StringLiteral	MethodInvocation
,
twentyPercentTip	SimpleName	MethodInvocation
)
)
;
total20EditText	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
String	SimpleName	MethodInvocation
.
format	SimpleName	MethodInvocation
(
"%.02f"	StringLiteral	MethodInvocation
,
twentyPercentTotal	SimpleName	MethodInvocation
)
)
;
}
private	Modifier	MethodDeclaration
void
updateCustom	SimpleName	MethodDeclaration
(
)
{
customTipTextView	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
currentCustomPercent	SimpleName	InfixExpression
+
"%"	StringLiteral	InfixExpression
)
;
double
customTipAmount	SimpleName	VariableDeclarationFragment
=
currentBillTotal	SimpleName	InfixExpression
*
currentCustomPercent	SimpleName	InfixExpression
*
.01	NumberLiteral	InfixExpression
;
double
customTotalAmount	SimpleName	VariableDeclarationFragment
=
currentBillTotal	SimpleName	InfixExpression
+
customTipAmount	SimpleName	InfixExpression
;
tipCustomEditText	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
String	SimpleName	MethodInvocation
.
format	SimpleName	MethodInvocation
(
"%.02f"	StringLiteral	MethodInvocation
,
customTipAmount	SimpleName	MethodInvocation
)
)
;
totalCustomEditText	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
String	SimpleName	MethodInvocation
.
format	SimpleName	MethodInvocation
(
"%.02f"	StringLiteral	MethodInvocation
,
customTotalAmount	SimpleName	MethodInvocation
)
)
;
}
@
Override	SimpleName	MarkerAnnotation
protected	Modifier	MethodDeclaration
void
onSaveInstanceState	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
outState	SimpleName	SingleVariableDeclaration
)
{
super
.
onSaveInstanceState	SimpleName	SuperMethodInvocation
(
outState	SimpleName	SuperMethodInvocation
)
;
outState	SimpleName	MethodInvocation
.
putDouble	SimpleName	MethodInvocation
(
BILL_TOTAL	SimpleName	MethodInvocation
,
currentBillTotal	SimpleName	MethodInvocation
)
;
outState	SimpleName	MethodInvocation
.
putInt	SimpleName	MethodInvocation
(
CUSTOM_PERCENT	SimpleName	MethodInvocation
,
currentCustomPercent	SimpleName	MethodInvocation
)
;
}
private	Modifier	FieldDeclaration
OnSeekBarChangeListener	SimpleName	SimpleType
customSeekBarListener	SimpleName	VariableDeclarationFragment
=
new
OnSeekBarChangeListener	SimpleName	SimpleType
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onProgressChanged	SimpleName	MethodDeclaration
(
SeekBar	SimpleName	SimpleType
seekBar	SimpleName	SingleVariableDeclaration
,
int
progress	SimpleName	SingleVariableDeclaration
,
boolean
fromUser	SimpleName	SingleVariableDeclaration
)
{
currentCustomPercent	SimpleName	Assignment
=
seekBar	SimpleName	MethodInvocation
.
getProgress	SimpleName	MethodInvocation
(
)
;
updateCustom	SimpleName	MethodInvocation
(
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onStartTrackingTouch	SimpleName	MethodDeclaration
(
SeekBar	SimpleName	SimpleType
seekBar	SimpleName	SingleVariableDeclaration
)
{
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onStopTrackingTouch	SimpleName	MethodDeclaration
(
SeekBar	SimpleName	SimpleType
seekBar	SimpleName	SingleVariableDeclaration
)
{
}
}
;
private	Modifier	FieldDeclaration
TextWatcher	SimpleName	SimpleType
billEditTextWatcher	SimpleName	VariableDeclarationFragment
=
new
TextWatcher	SimpleName	SimpleType
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onTextChanged	SimpleName	MethodDeclaration
(
CharSequence	SimpleName	SimpleType
s	SimpleName	SingleVariableDeclaration
,
int
start	SimpleName	SingleVariableDeclaration
,
int
before	SimpleName	SingleVariableDeclaration
,
int
count	SimpleName	SingleVariableDeclaration
)
{
try
{
currentBillTotal	SimpleName	Assignment
=
Double	SimpleName	MethodInvocation
.
parseDouble	SimpleName	MethodInvocation
(
s	SimpleName	MethodInvocation
.
toString	SimpleName	MethodInvocation
(
)
)
;
}
catch
(
NumberFormatException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
currentBillTotal	SimpleName	Assignment
=
0.0	NumberLiteral	Assignment
;
}
updateStandard	SimpleName	MethodInvocation
(
)
;
updateCustom	SimpleName	MethodInvocation
(
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
afterTextChanged	SimpleName	MethodDeclaration
(
Editable	SimpleName	SimpleType
s	SimpleName	SingleVariableDeclaration
)
{
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
beforeTextChanged	SimpleName	MethodDeclaration
(
CharSequence	SimpleName	SimpleType
s	SimpleName	SingleVariableDeclaration
,
int
start	SimpleName	SingleVariableDeclaration
,
int
count	SimpleName	SingleVariableDeclaration
,
int
after	SimpleName	SingleVariableDeclaration
)
{
}
}
;
}
package
com	SimpleName	QualifiedName
.
example	SimpleName	QualifiedName
.
tipcalculator	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Activity	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
text	SimpleName	QualifiedName
.
Editable	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
text	SimpleName	QualifiedName
.
TextWatcher	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
EditText	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
SeekBar	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
SeekBar	SimpleName	QualifiedName
.
OnSeekBarChangeListener	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
TextView	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
MainActivity	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
String	SimpleName	SimpleType
BILL_TOTAL	SimpleName	VariableDeclarationFragment
=
"BILL_TOTAL"	StringLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
String	SimpleName	SimpleType
CUSTOM_PERCENT	SimpleName	VariableDeclarationFragment
=
"CUSTOM_PERCENT"	StringLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
double
currentBillTotal	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
int
currentCustomPercent	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
EditText	SimpleName	SimpleType
tip10EditText	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
EditText	SimpleName	SimpleType
total10EditText	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
EditText	SimpleName	SimpleType
tip15EditText	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
EditText	SimpleName	SimpleType
total15EditText	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
EditText	SimpleName	SimpleType
billEditText	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
EditText	SimpleName	SimpleType
tip20EditText	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
EditText	SimpleName	SimpleType
total20EditText	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
TextView	SimpleName	SimpleType
customTipTextView	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
EditText	SimpleName	SimpleType
tipCustomEditText	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
EditText	SimpleName	SimpleType
totalCustomEditText	SimpleName	VariableDeclarationFragment
;
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
activity_main	SimpleName	QualifiedName
)
;
if
(
savedInstanceState	SimpleName	InfixExpression
==
null	NullLiteral	InfixExpression
)
{
currentBillTotal	SimpleName	Assignment
=
0.0	NumberLiteral	Assignment
;
currentCustomPercent	SimpleName	Assignment
=
18	NumberLiteral	Assignment
;
}
else
{
currentBillTotal	SimpleName	Assignment
=
savedInstanceState	SimpleName	MethodInvocation
.
getDouble	SimpleName	MethodInvocation
(
BILL_TOTAL	SimpleName	MethodInvocation
)
;
currentCustomPercent	SimpleName	Assignment
=
savedInstanceState	SimpleName	MethodInvocation
.
getInt	SimpleName	MethodInvocation
(
CUSTOM_PERCENT	SimpleName	MethodInvocation
)
;
}
tip10EditText	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
tip10EditText	SimpleName	QualifiedName
)
;
total10EditText	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
total10EditText	SimpleName	QualifiedName
)
;
tip15EditText	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
tip15EditText	SimpleName	QualifiedName
)
;
total15EditText	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
total15EditText	SimpleName	QualifiedName
)
;
tip20EditText	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
tip20EditText	SimpleName	QualifiedName
)
;
total20EditText	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
total20EditText	SimpleName	QualifiedName
)
;
customTipTextView	SimpleName	Assignment
=
(
TextView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
customTipTextView	SimpleName	QualifiedName
)
;
tipCustomEditText	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
customTipTextView	SimpleName	QualifiedName
)
;
totalCustomEditText	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
totalCustomEditText	SimpleName	QualifiedName
)
;
billEditText	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
billEditText	SimpleName	QualifiedName
)
;
billEditText	SimpleName	MethodInvocation
.
addTextChangedListener	SimpleName	MethodInvocation
(
billEditTextWatcher	SimpleName	MethodInvocation
)
;
SeekBar	SimpleName	SimpleType
customSeekBar	SimpleName	VariableDeclarationFragment
=
(
SeekBar	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
customSeekBar	SimpleName	QualifiedName
)
;
customSeekBar	SimpleName	MethodInvocation
.
setOnSeekBarChangeListener	SimpleName	MethodInvocation
(
customSeekBarListener	SimpleName	MethodInvocation
)
;
}
private	Modifier	MethodDeclaration
void
updateStandard	SimpleName	MethodDeclaration
(
)
{
double
tenPercentTip	SimpleName	VariableDeclarationFragment
=
currentBillTotal	SimpleName	InfixExpression
*
.1	NumberLiteral	InfixExpression
;
double
tenPercentTotal	SimpleName	VariableDeclarationFragment
=
currentBillTotal	SimpleName	InfixExpression
+
tenPercentTip	SimpleName	InfixExpression
;
tip10EditText	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
String	SimpleName	MethodInvocation
.
format	SimpleName	MethodInvocation
(
"%.02f"	StringLiteral	MethodInvocation
,
tenPercentTip	SimpleName	MethodInvocation
)
)
;
total10EditText	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
String	SimpleName	MethodInvocation
.
format	SimpleName	MethodInvocation
(
"%.02f"	StringLiteral	MethodInvocation
,
tenPercentTotal	SimpleName	MethodInvocation
)
)
;
double
fifteenPercentTip	SimpleName	VariableDeclarationFragment
=
currentBillTotal	SimpleName	InfixExpression
*
.15	NumberLiteral	InfixExpression
;
double
fifteenPercentTotal	SimpleName	VariableDeclarationFragment
=
currentBillTotal	SimpleName	InfixExpression
+
fifteenPercentTip	SimpleName	InfixExpression
;
tip15EditText	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
String	SimpleName	MethodInvocation
.
format	SimpleName	MethodInvocation
(
"%.02f"	StringLiteral	MethodInvocation
,
fifteenPercentTip	SimpleName	MethodInvocation
)
)
;
total15EditText	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
String	SimpleName	MethodInvocation
.
format	SimpleName	MethodInvocation
(
"%.02f"	StringLiteral	MethodInvocation
,
fifteenPercentTotal	SimpleName	MethodInvocation
)
)
;
double
twentyPercentTip	SimpleName	VariableDeclarationFragment
=
currentBillTotal	SimpleName	InfixExpression
*
.2	NumberLiteral	InfixExpression
;
double
twentyPercentTotal	SimpleName	VariableDeclarationFragment
=
currentBillTotal	SimpleName	InfixExpression
+
twentyPercentTip	SimpleName	InfixExpression
;
tip20EditText	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
String	SimpleName	MethodInvocation
.
format	SimpleName	MethodInvocation
(
"%.02f"	StringLiteral	MethodInvocation
,
twentyPercentTip	SimpleName	MethodInvocation
)
)
;
total20EditText	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
String	SimpleName	MethodInvocation
.
format	SimpleName	MethodInvocation
(
"%.02f"	StringLiteral	MethodInvocation
,
twentyPercentTotal	SimpleName	MethodInvocation
)
)
;
}
private	Modifier	MethodDeclaration
void
updateCustom	SimpleName	MethodDeclaration
(
)
{
customTipTextView	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
currentCustomPercent	SimpleName	InfixExpression
+
"%"	StringLiteral	InfixExpression
)
;
double
customTipAmount	SimpleName	VariableDeclarationFragment
=
currentBillTotal	SimpleName	InfixExpression
*
currentCustomPercent	SimpleName	InfixExpression
*
.01	NumberLiteral	InfixExpression
;
double
customTotalAmount	SimpleName	VariableDeclarationFragment
=
currentBillTotal	SimpleName	InfixExpression
+
customTipAmount	SimpleName	InfixExpression
;
tipCustomEditText	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
String	SimpleName	MethodInvocation
.
format	SimpleName	MethodInvocation
(
"%.02f"	StringLiteral	MethodInvocation
,
customTipAmount	SimpleName	MethodInvocation
)
)
;
totalCustomEditText	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
String	SimpleName	MethodInvocation
.
format	SimpleName	MethodInvocation
(
"%.02f"	StringLiteral	MethodInvocation
,
customTotalAmount	SimpleName	MethodInvocation
)
)
;
}
@
Override	SimpleName	MarkerAnnotation
protected	Modifier	MethodDeclaration
void
onSaveInstanceState	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
outState	SimpleName	SingleVariableDeclaration
)
{
super
.
onSaveInstanceState	SimpleName	SuperMethodInvocation
(
outState	SimpleName	SuperMethodInvocation
)
;
outState	SimpleName	MethodInvocation
.
putDouble	SimpleName	MethodInvocation
(
BILL_TOTAL	SimpleName	MethodInvocation
,
currentBillTotal	SimpleName	MethodInvocation
)
;
outState	SimpleName	MethodInvocation
.
putInt	SimpleName	MethodInvocation
(
CUSTOM_PERCENT	SimpleName	MethodInvocation
,
currentCustomPercent	SimpleName	MethodInvocation
)
;
}
private	Modifier	FieldDeclaration
OnSeekBarChangeListener	SimpleName	SimpleType
customSeekBarListener	SimpleName	VariableDeclarationFragment
=
new
OnSeekBarChangeListener	SimpleName	SimpleType
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onProgressChanged	SimpleName	MethodDeclaration
(
SeekBar	SimpleName	SimpleType
seekBar	SimpleName	SingleVariableDeclaration
,
int
progress	SimpleName	SingleVariableDeclaration
,
boolean
fromUser	SimpleName	SingleVariableDeclaration
)
{
currentCustomPercent	SimpleName	Assignment
=
seekBar	SimpleName	MethodInvocation
.
getProgress	SimpleName	MethodInvocation
(
)
;
updateCustom	SimpleName	MethodInvocation
(
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onStartTrackingTouch	SimpleName	MethodDeclaration
(
SeekBar	SimpleName	SimpleType
seekBar	SimpleName	SingleVariableDeclaration
)
{
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onStopTrackingTouch	SimpleName	MethodDeclaration
(
SeekBar	SimpleName	SimpleType
seekBar	SimpleName	SingleVariableDeclaration
)
{
}
}
;
private	Modifier	FieldDeclaration
TextWatcher	SimpleName	SimpleType
billEditTextWatcher	SimpleName	VariableDeclarationFragment
=
new
TextWatcher	SimpleName	SimpleType
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onTextChanged	SimpleName	MethodDeclaration
(
CharSequence	SimpleName	SimpleType
s	SimpleName	SingleVariableDeclaration
,
int
start	SimpleName	SingleVariableDeclaration
,
int
before	SimpleName	SingleVariableDeclaration
,
int
count	SimpleName	SingleVariableDeclaration
)
{
try
{
currentBillTotal	SimpleName	Assignment
=
Double	SimpleName	MethodInvocation
.
parseDouble	SimpleName	MethodInvocation
(
s	SimpleName	MethodInvocation
.
toString	SimpleName	MethodInvocation
(
)
)
;
}
catch
(
NumberFormatException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
currentBillTotal	SimpleName	Assignment
=
0.0	NumberLiteral	Assignment
;
}
updateStandard	SimpleName	MethodInvocation
(
)
;
updateCustom	SimpleName	MethodInvocation
(
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
afterTextChanged	SimpleName	MethodDeclaration
(
Editable	SimpleName	SimpleType
s	SimpleName	SingleVariableDeclaration
)
{
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
beforeTextChanged	SimpleName	MethodDeclaration
(
CharSequence	SimpleName	SimpleType
s	SimpleName	SingleVariableDeclaration
,
int
start	SimpleName	SingleVariableDeclaration
,
int
count	SimpleName	SingleVariableDeclaration
,
int
after	SimpleName	SingleVariableDeclaration
)
{
}
}
;
}
public	Modifier	TypeDeclaration
class
DrawingClass	SimpleName	TypeDeclaration
extends
View	SimpleName	SimpleType
{
Bitmap	SimpleName	SimpleType
bitmap	SimpleName	VariableDeclarationFragment
;
Canvas	SimpleName	SimpleType
canvas	SimpleName	VariableDeclarationFragment
;
Paint	SimpleName	SimpleType
paint	SimpleName	VariableDeclarationFragment
;
public	Modifier	MethodDeclaration
DrawingClass	SimpleName	MethodDeclaration
(
Context	SimpleName	SimpleType
context	SimpleName	SingleVariableDeclaration
,
ImageView	SimpleName	SimpleType
img	SimpleName	SingleVariableDeclaration
)
{
super
(
context	SimpleName	SuperConstructorInvocation
)
;
bitmap	SimpleName	Assignment
=
Bitmap	SimpleName	MethodInvocation
.
createBitmap	SimpleName	MethodInvocation
(
480	NumberLiteral	MethodInvocation
,
800	NumberLiteral	MethodInvocation
,
Bitmap	SimpleName	QualifiedName
.
Config	SimpleName	QualifiedName
.
ARGB_8888	SimpleName	QualifiedName
)
;
canvas	SimpleName	Assignment
=
new
Canvas	SimpleName	SimpleType
(
bitmap	SimpleName	ClassInstanceCreation
)
;
canvas	SimpleName	MethodInvocation
.
drawColor	SimpleName	MethodInvocation
(
Color	SimpleName	QualifiedName
.
CYAN	SimpleName	QualifiedName
)
;
paint	SimpleName	Assignment
=
new
Paint	SimpleName	SimpleType
(
)
;
paint	SimpleName	MethodInvocation
.
setColor	SimpleName	MethodInvocation
(
Color	SimpleName	QualifiedName
.
RED	SimpleName	QualifiedName
)
;
img	SimpleName	MethodInvocation
.
setImageBitmap	SimpleName	MethodInvocation
(
bitmap	SimpleName	MethodInvocation
)
;
}
@
Override	SimpleName	MarkerAnnotation
protected	Modifier	MethodDeclaration
void
onDraw	SimpleName	MethodDeclaration
(
Canvas	SimpleName	SimpleType
canvas	SimpleName	SingleVariableDeclaration
)
{
super
.
onDraw	SimpleName	SuperMethodInvocation
(
canvas	SimpleName	SuperMethodInvocation
)
;
System	SimpleName	QualifiedName
.
out	SimpleName	QualifiedName
.
println	SimpleName	MethodInvocation
(
"++++++++++inside on drwaw()"	StringLiteral	MethodInvocation
)
;
Paint	SimpleName	SimpleType
paint	SimpleName	VariableDeclarationFragment
=
new
Paint	SimpleName	SimpleType
(
)
;
paint	SimpleName	MethodInvocation
.
setColor	SimpleName	MethodInvocation
(
Color	SimpleName	QualifiedName
.
GREEN	SimpleName	QualifiedName
)
;
paint	SimpleName	MethodInvocation
.
setStrokeWidth	SimpleName	MethodInvocation
(
6	NumberLiteral	MethodInvocation
)
;
canvas	SimpleName	MethodInvocation
.
drawLine	SimpleName	MethodInvocation
(
50	NumberLiteral	MethodInvocation
,
50	NumberLiteral	MethodInvocation
,
300	NumberLiteral	MethodInvocation
,
400	NumberLiteral	MethodInvocation
,
paint	SimpleName	MethodInvocation
)
;
}
}
package
com	SimpleName	QualifiedName
.
example	SimpleName	QualifiedName
.
geoquiz2	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
support	SimpleName	QualifiedName
.
v7	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
ActionBarActivity	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Build	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
Button	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
Toast	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
QuizActivity	SimpleName	TypeDeclaration
extends
ActionBarActivity	SimpleName	SimpleType
{
private	Modifier	FieldDeclaration
Button	SimpleName	SimpleType
mTrueButton	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
Button	SimpleName	SimpleType
mFalseButton	SimpleName	VariableDeclarationFragment
;
@
Override	SimpleName	MarkerAnnotation
protected	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
activity_quiz	SimpleName	QualifiedName
)
;
mTrueButton	SimpleName	Assignment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
true_button	SimpleName	QualifiedName
)
;
mTrueButton	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
QuizActivity	SimpleName	ThisExpression
.
this
,
R	SimpleName	QualifiedName
.
string	SimpleName	QualifiedName
.
incorrect_toast	SimpleName	QualifiedName
,
Toast	SimpleName	QualifiedName
.
LENGTH_SHORT	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
}
}
)
;
mFalseButton	SimpleName	Assignment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
false_button	SimpleName	QualifiedName
)
;
mFalseButton	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
QuizActivity	SimpleName	ThisExpression
.
this
,
R	SimpleName	QualifiedName
.
string	SimpleName	QualifiedName
.
correct_toast	SimpleName	QualifiedName
,
Toast	SimpleName	QualifiedName
.
LENGTH_SHORT	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
}
}
)
;
if
(
savedInstanceState	SimpleName	InfixExpression
==
null	NullLiteral	InfixExpression
)
{
getSupportFragmentManager	SimpleName	MethodInvocation
(
)
.
beginTransaction	SimpleName	MethodInvocation
(
)
.
add	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
container	SimpleName	QualifiedName
,
new
PlaceholderFragment	SimpleName	SimpleType
(
)
)
.
commit	SimpleName	MethodInvocation
(
)
;
}
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
boolean
onCreateOptionsMenu	SimpleName	MethodDeclaration
(
Menu	SimpleName	SimpleType
menu	SimpleName	SingleVariableDeclaration
)
{
getMenuInflater	SimpleName	MethodInvocation
(
)
.
inflate	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
menu	SimpleName	QualifiedName
.
quiz	SimpleName	QualifiedName
,
menu	SimpleName	MethodInvocation
)
;
return
true	BooleanLiteral	ReturnStatement
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
boolean
onOptionsItemSelected	SimpleName	MethodDeclaration
(
MenuItem	SimpleName	SimpleType
item	SimpleName	SingleVariableDeclaration
)
{
int
id	SimpleName	VariableDeclarationFragment
=
item	SimpleName	MethodInvocation
.
getItemId	SimpleName	MethodInvocation
(
)
;
if
(
id	SimpleName	InfixExpression
==
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
action_settings	SimpleName	QualifiedName
)
{
return
true	BooleanLiteral	ReturnStatement
;
}
return
super
.
onOptionsItemSelected	SimpleName	SuperMethodInvocation
(
item	SimpleName	SuperMethodInvocation
)
;
}
public	Modifier	TypeDeclaration
static	Modifier	TypeDeclaration
class
PlaceholderFragment	SimpleName	TypeDeclaration
extends
Fragment	SimpleName	SimpleType
{
public	Modifier	MethodDeclaration
PlaceholderFragment	SimpleName	MethodDeclaration
(
)
{
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
View	SimpleName	SimpleType
onCreateView	SimpleName	MethodDeclaration
(
LayoutInflater	SimpleName	SimpleType
inflater	SimpleName	SingleVariableDeclaration
,
ViewGroup	SimpleName	SimpleType
container	SimpleName	SingleVariableDeclaration
,
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
View	SimpleName	SimpleType
rootView	SimpleName	VariableDeclarationFragment
=
inflater	SimpleName	MethodInvocation
.
inflate	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
fragment_quiz	SimpleName	QualifiedName
,
container	SimpleName	MethodInvocation
,
false	BooleanLiteral	MethodInvocation
)
;
return
rootView	SimpleName	ReturnStatement
;
}
}
}
import
android	SimpleName	QualifiedName
.
support	SimpleName	QualifiedName
.
v7	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
ActionBar	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
support	SimpleName	QualifiedName
.
v4	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Fragment	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
LayoutInflater	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
Menu	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
MenuItem	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
View	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
ViewGroup	SimpleName	QualifiedName
;
public	Modifier	MethodDeclaration
void
recordSound	SimpleName	MethodDeclaration
(
)
{
TextView	SimpleName	SimpleType
soundUmrandung	SimpleName	VariableDeclarationFragment
=
(
TextView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
soundumrandungtextview	SimpleName	QualifiedName
)
;
ImageButton	SimpleName	SimpleType
arrowRight	SimpleName	VariableDeclarationFragment
=
(
ImageButton	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
arrowRight	SimpleName	QualifiedName
)
;
arrowLeft	SimpleName	MethodInvocation
.
setVisibility	SimpleName	MethodInvocation
(
View	SimpleName	QualifiedName
.
VISIBLE	SimpleName	QualifiedName
)
;
arrowRight	SimpleName	MethodInvocation
.
setVisibility	SimpleName	MethodInvocation
(
View	SimpleName	QualifiedName
.
VISIBLE	SimpleName	QualifiedName
)
;
Resources	SimpleName	SimpleType
res	SimpleName	VariableDeclarationFragment
=
getApplicationContext	SimpleName	MethodInvocation
(
)
.
getResources	SimpleName	MethodInvocation
(
)
;
Drawable	SimpleName	SimpleType
leftgrey	SimpleName	VariableDeclarationFragment
=
res	SimpleName	MethodInvocation
.
getDrawable	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
drawable	SimpleName	QualifiedName
.
arrowleftgrey	SimpleName	QualifiedName
)
;
Drawable	SimpleName	SimpleType
rightgrey	SimpleName	VariableDeclarationFragment
=
res	SimpleName	MethodInvocation
.
getDrawable	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
drawable	SimpleName	QualifiedName
.
arrowrightgrey	SimpleName	QualifiedName
)
;
LayoutInflater	SimpleName	SimpleType
layoutinflater	SimpleName	VariableDeclarationFragment
=
(
LayoutInflater	SimpleName	SimpleType
)
this
.
getSystemService	SimpleName	MethodInvocation
(
LAYOUT_INFLATER_SERVICE	SimpleName	MethodInvocation
)
;
final	Modifier	VariableDeclarationStatement
View	SimpleName	SimpleType
openprojectView	SimpleName	VariableDeclarationFragment
=
layoutinflater	SimpleName	MethodInvocation
.
inflate	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
openproject	SimpleName	QualifiedName
,
null	NullLiteral	MethodInvocation
)
;
Resources	SimpleName	SimpleType
res	SimpleName	VariableDeclarationFragment
=
getApplicationContext	SimpleName	MethodInvocation
(
)
.
getResources	SimpleName	MethodInvocation
(
)
;
Intent	SimpleName	SimpleType
soundRecord	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
this
,
SoundRecord	SimpleName	SimpleType
.
class
)
;
startActivity	SimpleName	MethodInvocation
(
soundRecord	SimpleName	MethodInvocation
)
;
@
Override	SimpleName	MarkerAnnotation
protected	Modifier	VariableDeclarationStatement
void
onCreate	SimpleName	VariableDeclarationFragment
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	VariableDeclarationFragment
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
LayoutInflater	SimpleName	SimpleType
layoutinflater	SimpleName	VariableDeclarationFragment
=
(
LayoutInflater	SimpleName	SimpleType
)
this
.
getSystemService	SimpleName	MethodInvocation
(
LAYOUT_INFLATER_SERVICE	SimpleName	MethodInvocation
)
;
openprojectView	SimpleName	Assignment
=
layoutinflater	SimpleName	MethodInvocation
.
inflate	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
openproject	SimpleName	QualifiedName
,
null	NullLiteral	MethodInvocation
)
;
recordSound	SimpleName	MethodInvocation
(
)
;
}
TextView	SimpleName	SimpleType
soundUmrandung	SimpleName	VariableDeclarationFragment
=
(
TextView	SimpleName	SimpleType
)
openprojectView	SimpleName	MethodInvocation
.
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
soundumrandungtextview	SimpleName	QualifiedName
)
;
new
SoundRecord	SimpleName	SimpleType
(
context	SimpleName	ClassInstanceCreation
)
public	Modifier	TypeDeclaration
class
SoundRecord	SimpleName	TypeDeclaration
{
private	Modifier	FieldDeclaration
SharedPreferences	SimpleName	SimpleType
sharedPreferences	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
MediaRecorder	SimpleName	SimpleType
mediaRecorder	SimpleName	VariableDeclarationFragment
=
null	NullLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
File	SimpleName	SimpleType
soundFile	SimpleName	VariableDeclarationFragment
=
null	NullLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
String	SimpleName	SimpleType
soundFilePath	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
View	SimpleName	SimpleType
openprojectView	SimpleName	VariableDeclarationFragment
;
public	Modifier	MethodDeclaration
SoundRecord	SimpleName	MethodDeclaration
(
Context	SimpleName	SimpleType
context	SimpleName	SingleVariableDeclaration
)
{
LayoutInflater	SimpleName	SimpleType
layoutinflater	SimpleName	VariableDeclarationFragment
=
(
LayoutInflater	SimpleName	SimpleType
)
context	SimpleName	MethodInvocation
.
getSystemService	SimpleName	MethodInvocation
(
Context	SimpleName	QualifiedName
.
LAYOUT_INFLATER_SERVICE	SimpleName	QualifiedName
)
;
openprojectView	SimpleName	Assignment
=
layoutinflater	SimpleName	MethodInvocation
.
inflate	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
openproject	SimpleName	QualifiedName
,
null	NullLiteral	MethodInvocation
)
;
recordSound	SimpleName	MethodInvocation
(
context	SimpleName	MethodInvocation
)
;
}
}
new
SoundRecord	SimpleName	SimpleType
(
context	SimpleName	ClassInstanceCreation
)
;
Drawable	SimpleName	SimpleType
drawable	SimpleName	VariableDeclarationFragment
=
res	SimpleName	MethodInvocation
.
getDrawable	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
drawable	SimpleName	QualifiedName
.
soundshape	SimpleName	QualifiedName
)
;
soundUmrandung	SimpleName	MethodInvocation
.
setBackground	SimpleName	MethodInvocation
(
drawable	SimpleName	MethodInvocation
)
;
ImageButton	SimpleName	SimpleType
record	SimpleName	VariableDeclarationFragment
=
(
ImageButton	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
sound	SimpleName	QualifiedName
)
;
ImageButton	SimpleName	SimpleType
recordStop	SimpleName	VariableDeclarationFragment
=
(
ImageButton	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
soundstop	SimpleName	QualifiedName
)
;
public	Modifier	MethodDeclaration
void
builtButtonsRigtLeftPic	SimpleName	MethodDeclaration
(
)
{
ImageButton	SimpleName	SimpleType
arrowLeft	SimpleName	VariableDeclarationFragment
=
(
ImageButton	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
arrowLeft	SimpleName	QualifiedName
)
;
Environment	SimpleName	MethodInvocation
.
getExternalStorageDirectory	SimpleName	MethodInvocation
(
)
.
getPath	SimpleName	MethodInvocation
(
)
java	SimpleName	QualifiedName
.
io	SimpleName	QualifiedName
.
Environment	SimpleName	QualifiedName
private	Modifier	VariableDeclarationStatement
static	Modifier	VariableDeclarationStatement
void
throwIfUserRequired	SimpleName	VariableDeclarationFragment
(
)
{
if
(
sUserRequired	SimpleName	IfStatement
)
{
Log	SimpleName	MethodInvocation
.
wtf	SimpleName	MethodInvocation
(
TAG	SimpleName	MethodInvocation
,
"Path requests must specify a user by using UserEnvironment"	StringLiteral	MethodInvocation
,
new
Throwable	SimpleName	SimpleType
(
)
)
;
}
}
Environment	SimpleName	MethodInvocation
.
setUserRequired	SimpleName	MethodInvocation
(
false	BooleanLiteral	MethodInvocation
)
;
public	Modifier	VariableDeclarationStatement
static	Modifier	VariableDeclarationStatement
void
setUserRequired	SimpleName	VariableDeclarationFragment
(
boolean
userRequired	SimpleName	VariableDeclarationFragment
)
{
sUserRequired	SimpleName	Assignment
=
userRequired	SimpleName	Assignment
;
}
public	Modifier	TypeDeclaration
class
MainActivity	SimpleName	TypeDeclaration
extends
ActionBarActivity	SimpleName	SimpleType
{
@
Override	SimpleName	MarkerAnnotation
protected	Modifier	VariableDeclarationStatement
void
onCreate	SimpleName	VariableDeclarationFragment
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	VariableDeclarationFragment
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
activity_main	SimpleName	QualifiedName
)
;
Button	SimpleName	SimpleType
button	SimpleName	VariableDeclarationFragment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
toggleButton1	SimpleName	QualifiedName
)
;
button	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
_getLocation	SimpleName	MethodInvocation
(
)
;
}
}
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	VariableDeclarationStatement
boolean
onCreateOptionsMenu	SimpleName	VariableDeclarationFragment
(
Menu	SimpleName	SimpleType
menu	SimpleName	VariableDeclarationFragment
)
{
getMenuInflater	SimpleName	MethodInvocation
(
)
.
inflate	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
menu	SimpleName	QualifiedName
.
main	SimpleName	QualifiedName
,
menu	SimpleName	MethodInvocation
)
;
return
true	BooleanLiteral	ReturnStatement
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	VariableDeclarationStatement
boolean
onOptionsItemSelected	SimpleName	VariableDeclarationFragment
(
MenuItem	SimpleName	SimpleType
item	SimpleName	VariableDeclarationFragment
)
{
int
id	SimpleName	VariableDeclarationFragment
=
item	SimpleName	MethodInvocation
.
getItemId	SimpleName	MethodInvocation
(
)
;
if
(
id	SimpleName	InfixExpression
==
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
action_settings	SimpleName	QualifiedName
)
{
return
true	BooleanLiteral	ReturnStatement
;
}
return
super
.
onOptionsItemSelected	SimpleName	SuperMethodInvocation
(
item	SimpleName	SuperMethodInvocation
)
;
}
double
lat	SimpleName	VariableDeclarationFragment
=
0	NumberLiteral	VariableDeclarationFragment
;
double
lon	SimpleName	VariableDeclarationFragment
=
0	NumberLiteral	VariableDeclarationFragment
;
LocationListener	SimpleName	SimpleType
asd	SimpleName	VariableDeclarationFragment
=
new
MyLocationListener	SimpleName	SimpleType
(
)
;
Location	SimpleName	SimpleType
loc	SimpleName	VariableDeclarationFragment
;
private	Modifier	VariableDeclarationStatement
void
_getLocation	SimpleName	VariableDeclarationFragment
(
)
{
try
{
Criteria	SimpleName	SimpleType
criteria	SimpleName	VariableDeclarationFragment
=
new
Criteria	SimpleName	SimpleType
(
)
;
LocationManager	SimpleName	SimpleType
locationManager	SimpleName	VariableDeclarationFragment
=
(
LocationManager	SimpleName	SimpleType
)
getSystemService	SimpleName	MethodInvocation
(
LOCATION_SERVICE	SimpleName	MethodInvocation
)
;
String	SimpleName	SimpleType
bestProvider	SimpleName	VariableDeclarationFragment
=
locationManager	SimpleName	MethodInvocation
.
getBestProvider	SimpleName	MethodInvocation
(
criteria	SimpleName	MethodInvocation
,
false	BooleanLiteral	MethodInvocation
)
;
LocationManager	SimpleName	SimpleType
fasz	SimpleName	VariableDeclarationFragment
=
(
LocationManager	SimpleName	SimpleType
)
getSystemService	SimpleName	MethodInvocation
(
Context	SimpleName	QualifiedName
.
LOCATION_SERVICE	SimpleName	QualifiedName
)
;
fasz	SimpleName	MethodInvocation
.
requestLocationUpdates	SimpleName	MethodInvocation
(
LocationManager	SimpleName	QualifiedName
.
NETWORK_PROVIDER	SimpleName	QualifiedName
,
10	NumberLiteral	MethodInvocation
,
0	NumberLiteral	MethodInvocation
,
this
.
asd	SimpleName	FieldAccess
)
;
Location	SimpleName	SimpleType
asdasd	SimpleName	VariableDeclarationFragment
=
null	NullLiteral	VariableDeclarationFragment
;
MyLocationListener	SimpleName	SimpleType
kuki	SimpleName	VariableDeclarationFragment
=
new
MyLocationListener	SimpleName	SimpleType
(
)
;
kuki	SimpleName	MethodInvocation
.
onLocationChanged	SimpleName	MethodInvocation
(
asdasd	SimpleName	MethodInvocation
)
;
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
this
,
"Long: "	StringLiteral	InfixExpression
+
String	SimpleName	MethodInvocation
.
valueOf	SimpleName	MethodInvocation
(
asdasd	SimpleName	MethodInvocation
.
getLongitude	SimpleName	MethodInvocation
(
)
)
+
"    Lat: "	StringLiteral	InfixExpression
+
String	SimpleName	MethodInvocation
.
valueOf	SimpleName	MethodInvocation
(
asdasd	SimpleName	MethodInvocation
.
getLatitude	SimpleName	MethodInvocation
(
)
)
,
Toast	SimpleName	QualifiedName
.
LENGTH_LONG	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
}
catch
(
Exception	SimpleName	SimpleType
ex	SimpleName	SingleVariableDeclaration
)
{
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
this
,
ex	SimpleName	MethodInvocation
.
toString	SimpleName	MethodInvocation
(
)
,
Toast	SimpleName	QualifiedName
.
LENGTH_LONG	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
}
}
final	Modifier	TypeDeclaration
class
MyLocationListener	SimpleName	TypeDeclaration
implements
LocationListener	SimpleName	SimpleType
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onLocationChanged	SimpleName	MethodDeclaration
(
Location	SimpleName	SimpleType
locFromGps	SimpleName	SingleVariableDeclaration
)
{
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onProviderDisabled	SimpleName	MethodDeclaration
(
String	SimpleName	SimpleType
provider	SimpleName	SingleVariableDeclaration
)
{
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onProviderEnabled	SimpleName	MethodDeclaration
(
String	SimpleName	SimpleType
provider	SimpleName	SingleVariableDeclaration
)
{
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onStatusChanged	SimpleName	MethodDeclaration
(
String	SimpleName	SimpleType
provider	SimpleName	SingleVariableDeclaration
,
int
status	SimpleName	SingleVariableDeclaration
,
Bundle	SimpleName	SimpleType
extras	SimpleName	SingleVariableDeclaration
)
{
}
}
String	SimpleName	SimpleType
getName	SimpleName	VariableDeclarationFragment
=
name	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
;
public	Modifier	TypeDeclaration
class
Contact_Details	SimpleName	TypeDeclaration
extends
ActionBarActivity	SimpleName	SimpleType
{
Button	SimpleName	SimpleType
save	SimpleName	VariableDeclarationFragment
,
show	SimpleName	VariableDeclarationFragment
;
EditText	SimpleName	SimpleType
name	SimpleName	VariableDeclarationFragment
,
email	SimpleName	VariableDeclarationFragment
,
phnno	SimpleName	VariableDeclarationFragment
;
DataHandler	SimpleName	SimpleType
handler	SimpleName	VariableDeclarationFragment
;
long
id	SimpleName	VariableDeclarationFragment
;
@
Override	SimpleName	MarkerAnnotation
protected	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
activity_contact__details	SimpleName	QualifiedName
)
;
save	SimpleName	Assignment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
c_save	SimpleName	QualifiedName
)
;
show	SimpleName	Assignment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
c_show	SimpleName	QualifiedName
)
;
name	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
c_name	SimpleName	QualifiedName
)
;
email	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
c_email	SimpleName	QualifiedName
)
;
phnno	SimpleName	Assignment
=
(
EditText	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
c_phnno	SimpleName	QualifiedName
)
;
if
(
savedInstanceState	SimpleName	InfixExpression
==
null	NullLiteral	InfixExpression
)
{
getSupportFragmentManager	SimpleName	MethodInvocation
(
)
.
beginTransaction	SimpleName	MethodInvocation
(
)
.
add	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
container	SimpleName	QualifiedName
,
new
PlaceholderFragment	SimpleName	SimpleType
(
)
)
.
commit	SimpleName	MethodInvocation
(
)
;
}
}
public	Modifier	MethodDeclaration
void
detailSave	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
String	SimpleName	SimpleType
getName	SimpleName	VariableDeclarationFragment
=
name	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
;
String	SimpleName	SimpleType
getEmail	SimpleName	VariableDeclarationFragment
=
email	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
;
String	SimpleName	SimpleType
getPhnno	SimpleName	VariableDeclarationFragment
=
phnno	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
;
if
(
getName	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
&
&
getEmail	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
&
&
getPhnno	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
{
handler	SimpleName	Assignment
=
new
DataHandler	SimpleName	SimpleType
(
getBaseContext	SimpleName	MethodInvocation
(
)
)
;
handler	SimpleName	MethodInvocation
.
open	SimpleName	MethodInvocation
(
)
;
long
id	SimpleName	VariableDeclarationFragment
=
handler	SimpleName	MethodInvocation
.
insertData	SimpleName	MethodInvocation
(
getName	SimpleName	MethodInvocation
,
getEmail	SimpleName	MethodInvocation
,
getPhnno	SimpleName	MethodInvocation
)
;
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
getBaseContext	SimpleName	MethodInvocation
(
)
,
"Data inserted"	StringLiteral	MethodInvocation
,
Toast	SimpleName	QualifiedName
.
LENGTH_LONG	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
handler	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
}
}
public	Modifier	MethodDeclaration
void
detailShow	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
String	SimpleName	SimpleType
getName	SimpleName	VariableDeclarationFragment
,
getEmail	SimpleName	VariableDeclarationFragment
,
getPhnno	SimpleName	VariableDeclarationFragment
;
getName	SimpleName	Assignment
=
""	StringLiteral	Assignment
;
getEmail	SimpleName	Assignment
=
""	StringLiteral	Assignment
;
getPhnno	SimpleName	Assignment
=
""	StringLiteral	Assignment
;
handler	SimpleName	Assignment
=
new
DataHandler	SimpleName	SimpleType
(
getBaseContext	SimpleName	MethodInvocation
(
)
)
;
handler	SimpleName	MethodInvocation
.
open	SimpleName	MethodInvocation
(
)
;
Cursor	SimpleName	SimpleType
C	SimpleName	VariableDeclarationFragment
=
handler	SimpleName	MethodInvocation
.
returnData	SimpleName	MethodInvocation
(
)
;
if
(
C	SimpleName	MethodInvocation
.
moveToFirst	SimpleName	MethodInvocation
(
)
)
{
do
{
getName	SimpleName	Assignment
=
C	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
0	NumberLiteral	MethodInvocation
)
;
getEmail	SimpleName	Assignment
=
C	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
1	NumberLiteral	MethodInvocation
)
;
getPhnno	SimpleName	Assignment
=
C	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
2	NumberLiteral	MethodInvocation
)
;
}
while
(
C	SimpleName	MethodInvocation
.
moveToNext	SimpleName	MethodInvocation
(
)
)
;
}
handler	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
getBaseContext	SimpleName	MethodInvocation
(
)
,
"Name :"	StringLiteral	InfixExpression
+
getName	SimpleName	InfixExpression
+
"Email :"	StringLiteral	InfixExpression
+
getEmail	SimpleName	InfixExpression
+
"Contact No :"	StringLiteral	InfixExpression
+
getPhnno	SimpleName	InfixExpression
,
Toast	SimpleName	QualifiedName
.
LENGTH_LONG	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
}
package
com	SimpleName	QualifiedName
.
TicTacToe	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
;
import
com	SimpleName	QualifiedName
.
TicTacToe	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
R	SimpleName	QualifiedName
;
private	Modifier	MethodDeclaration
void
saveFullImage	SimpleName	MethodDeclaration
(
)
{
Intent	SimpleName	SimpleType
intent	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
MediaStore	SimpleName	QualifiedName
.
ACTION_IMAGE_CAPTURE	SimpleName	QualifiedName
)
;
File	SimpleName	SimpleType
file	SimpleName	VariableDeclarationFragment
=
new
File	SimpleName	SimpleType
(
Environment	SimpleName	MethodInvocation
.
getExternalStorageDirectory	SimpleName	MethodInvocation
(
)
,
"test.jpg"	StringLiteral	ClassInstanceCreation
)
;
outputFileUri	SimpleName	Assignment
=
Uri	SimpleName	MethodInvocation
.
fromFile	SimpleName	MethodInvocation
(
file	SimpleName	MethodInvocation
)
;
intent	SimpleName	MethodInvocation
.
putExtra	SimpleName	MethodInvocation
(
MediaStore	SimpleName	QualifiedName
.
EXTRA_OUTPUT	SimpleName	QualifiedName
,
outputFileUri	SimpleName	MethodInvocation
)
;
startActivityForResult	SimpleName	MethodInvocation
(
intent	SimpleName	MethodInvocation
,
TAKE_PICTURE	SimpleName	MethodInvocation
)
;
}
@
Override	SimpleName	MarkerAnnotation
protected	Modifier	MethodDeclaration
void
onActivityResult	SimpleName	MethodDeclaration
(
int
requestCode	SimpleName	SingleVariableDeclaration
,
int
resultCode	SimpleName	SingleVariableDeclaration
,
Intent	SimpleName	SimpleType
data	SimpleName	SingleVariableDeclaration
)
{
if
(
requestCode	SimpleName	InfixExpression
==
TAKE_PICTURE	SimpleName	InfixExpression
)
{
}
}
public	Modifier	VariableDeclarationStatement
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
LOG_NAME	SimpleName	VariableDeclarationFragment
=
"LogName"	StringLiteral	VariableDeclarationFragment
;
public	Modifier	VariableDeclarationStatement
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
LOG_NAME	SimpleName	VariableDeclarationFragment
=
(
String	SimpleName	SimpleType
)
getText	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
string	SimpleName	QualifiedName
.
app_name_nospaces	SimpleName	QualifiedName
)
;
public	Modifier	MethodDeclaration
static	Modifier	MethodDeclaration
void
getInput	SimpleName	MethodDeclaration
(
Context	SimpleName	SimpleType
context	SimpleName	SingleVariableDeclaration
)
{
final	Modifier	VariableDeclarationStatement
AlertDialog	SimpleName	QualifiedName
.
Builder	SimpleName	QualifiedName
alert	SimpleName	VariableDeclarationFragment
=
new
AlertDialog	SimpleName	QualifiedName
.
Builder	SimpleName	QualifiedName
(
context	SimpleName	ClassInstanceCreation
)
;
final	Modifier	VariableDeclarationStatement
EditText	SimpleName	SimpleType
input	SimpleName	VariableDeclarationFragment
=
new
EditText	SimpleName	SimpleType
(
context	SimpleName	ClassInstanceCreation
)
;
alert	SimpleName	MethodInvocation
.
setView	SimpleName	MethodInvocation
(
input	SimpleName	MethodInvocation
)
;
alert	SimpleName	MethodInvocation
.
setPositiveButton	SimpleName	MethodInvocation
(
"Ok"	StringLiteral	MethodInvocation
,
new
DialogInterface	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
DialogInterface	SimpleName	SimpleType
dialog	SimpleName	SingleVariableDeclaration
,
int
whichButton	SimpleName	SingleVariableDeclaration
)
{
String	SimpleName	SimpleType
value	SimpleName	VariableDeclarationFragment
=
input	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
.
trim	SimpleName	MethodInvocation
(
)
;
}
}
)
;
alert	SimpleName	MethodInvocation
.
setNegativeButton	SimpleName	MethodInvocation
(
"Cancel"	StringLiteral	MethodInvocation
,
new
DialogInterface	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
DialogInterface	SimpleName	SimpleType
dialog	SimpleName	SingleVariableDeclaration
,
int
whichButton	SimpleName	SingleVariableDeclaration
)
{
dialog	SimpleName	MethodInvocation
.
cancel	SimpleName	MethodInvocation
(
)
;
}
}
)
;
alert	SimpleName	MethodInvocation
.
show	SimpleName	MethodInvocation
(
)
;
}
Looper	SimpleName	MethodInvocation
.
prepare	SimpleName	MethodInvocation
(
)
Looper	SimpleName	MethodInvocation
.
loop	SimpleName	MethodInvocation
(
)
_path	SimpleName	Assignment
=
Environment	SimpleName	MethodInvocation
.
getExternalStorageDirectory	SimpleName	MethodInvocation
(
)
+
"/examplevideo.3gp"	StringLiteral	InfixExpression
;
File	SimpleName	SimpleType
file	SimpleName	VariableDeclarationFragment
=
new
File	SimpleName	SimpleType
(
_path	SimpleName	ClassInstanceCreation
)
;
Uri	SimpleName	SimpleType
outputFileUri	SimpleName	VariableDeclarationFragment
=
Uri	SimpleName	MethodInvocation
.
fromFile	SimpleName	MethodInvocation
(
file	SimpleName	MethodInvocation
)
;
Intent	SimpleName	SimpleType
intent	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
android	SimpleName	QualifiedName
.
provider	SimpleName	QualifiedName
.
MediaStore	SimpleName	QualifiedName
.
ACTION_VIDEO_CAPTURE	SimpleName	QualifiedName
)
;
intent	SimpleName	MethodInvocation
.
putExtra	SimpleName	MethodInvocation
(
MediaStore	SimpleName	QualifiedName
.
EXTRA_OUTPUT	SimpleName	QualifiedName
,
outputFileUri	SimpleName	MethodInvocation
)
;
startActivityForResult	SimpleName	MethodInvocation
(
intent	SimpleName	MethodInvocation
,
0	NumberLiteral	MethodInvocation
)
;
try
{
resID	SimpleName	Assignment
=
getResources	SimpleName	MethodInvocation
(
)
.
getIdentifier	SimpleName	MethodInvocation
(
name	SimpleName	MethodInvocation
,
"raw"	StringLiteral	MethodInvocation
,
"com.menteon.speedimage0102"	StringLiteral	MethodInvocation
)
;
saxparserfactory	SimpleName	Assignment
=
SAXParserFactory	SimpleName	MethodInvocation
.
newInstance	SimpleName	MethodInvocation
(
)
;
saxparser	SimpleName	Assignment
=
saxparserfactory	SimpleName	MethodInvocation
.
newSAXParser	SimpleName	MethodInvocation
(
)
;
xmlreader	SimpleName	Assignment
=
saxparser	SimpleName	MethodInvocation
.
getXMLReader	SimpleName	MethodInvocation
(
)
;
inputstream	SimpleName	Assignment
=
this
.
getResources	SimpleName	MethodInvocation
(
)
.
openRawResource	SimpleName	MethodInvocation
(
resID	SimpleName	MethodInvocation
)
;
xmlreader	SimpleName	MethodInvocation
.
setContentHandler	SimpleName	MethodInvocation
(
myXMLHandler	SimpleName	MethodInvocation
)
;
xmlreader	SimpleName	MethodInvocation
.
parse	SimpleName	MethodInvocation
(
new
InputSource	SimpleName	SimpleType
(
inputstream	SimpleName	ClassInstanceCreation
)
)
;
item	SimpleName	Assignment
=
myXMLHandler	SimpleName	MethodInvocation
.
getitem	SimpleName	MethodInvocation
(
)
;
menteon	SimpleName	Assignment
=
myXMLHandler	SimpleName	MethodInvocation
.
getmenteon	SimpleName	MethodInvocation
(
)
;
polygon	SimpleName	Assignment
=
myXMLHandler	SimpleName	MethodInvocation
.
getpolygon	SimpleName	MethodInvocation
(
)
;
point	SimpleName	Assignment
=
myXMLHandler	SimpleName	MethodInvocation
.
getpoint	SimpleName	MethodInvocation
(
)
;
orientation	SimpleName	Assignment
=
menteon	SimpleName	MethodInvocation
.
getOrientation	SimpleName	MethodInvocation
(
)
;
o	SimpleName	Assignment
=
menteon	SimpleName	MethodInvocation
.
getItem	SimpleName	MethodInvocation
(
)
.
size	SimpleName	MethodInvocation
(
)
;
Log	SimpleName	MethodInvocation
.
e	SimpleName	MethodInvocation
(
"ParsingActivity"	StringLiteral	MethodInvocation
,
"Orientation = "	StringLiteral	InfixExpression
+
orientation	SimpleName	InfixExpression
)
;
Log	SimpleName	MethodInvocation
.
e	SimpleName	MethodInvocation
(
"ParsingActivity"	StringLiteral	MethodInvocation
,
"menteon size = "	StringLiteral	InfixExpression
+
o	SimpleName	InfixExpression
)
;
qnumber	SimpleName	MethodInvocation
(
)
;
if
(
orientation	SimpleName	MethodInvocation
.
equalsIgnoreCase	SimpleName	MethodInvocation
(
"portrait"	StringLiteral	MethodInvocation
)
&
amp	SimpleName	InfixExpression
;
&
amp	SimpleName	ExpressionMethodReference
;
orientationvalue	SimpleName	ExpressionMethodReference
==
2	NumberLiteral	InfixExpression
)
{
alertportrait	SimpleName	MethodInvocation
(
orientation	SimpleName	MethodInvocation
,
orientationvalue	SimpleName	MethodInvocation
)
;
}
else
if
(
orientation	SimpleName	MethodInvocation
.
equalsIgnoreCase	SimpleName	MethodInvocation
(
"landscape"	StringLiteral	MethodInvocation
)
&
amp	SimpleName	InfixExpression
;
&
amp	SimpleName	ExpressionMethodReference
;
orientationvalue	SimpleName	ExpressionMethodReference
==
1	NumberLiteral	InfixExpression
)
{
alertlandscape	SimpleName	MethodInvocation
(
orientation	SimpleName	MethodInvocation
,
orientationvalue	SimpleName	MethodInvocation
)
;
}
if
(
orientation	SimpleName	MethodInvocation
.
equalsIgnoreCase	SimpleName	MethodInvocation
(
"portrait"	StringLiteral	MethodInvocation
)
&
amp	SimpleName	InfixExpression
;
&
amp	SimpleName	ExpressionMethodReference
;
orientationvalue	SimpleName	ExpressionMethodReference
==
1	NumberLiteral	InfixExpression
)
{
setRequestedOrientation	SimpleName	MethodInvocation
(
1	NumberLiteral	MethodInvocation
)
;
alertstart	SimpleName	MethodInvocation
(
)
;
}
else
if
(
orientation	SimpleName	MethodInvocation
.
equalsIgnoreCase	SimpleName	MethodInvocation
(
"landscape"	StringLiteral	MethodInvocation
)
&
amp	SimpleName	InfixExpression
;
&
amp	SimpleName	ExpressionMethodReference
;
orientationvalue	SimpleName	ExpressionMethodReference
==
2	NumberLiteral	InfixExpression
)
{
setRequestedOrientation	SimpleName	MethodInvocation
(
2	NumberLiteral	MethodInvocation
)
;
alertstart	SimpleName	MethodInvocation
(
)
;
}
}
catch
(
Exception	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
Log	SimpleName	MethodInvocation
.
e	SimpleName	MethodInvocation
(
"ParsingActivity oncreate"	StringLiteral	MethodInvocation
,
"ERROR = "	StringLiteral	InfixExpression
+
e	SimpleName	InfixExpression
)
;
}
}
mDbHelper	SimpleName	Assignment
=
new
CommonDbAdapter	SimpleName	SimpleType
(
this
)
;
mDbHelper	SimpleName	MethodInvocation
.
open	SimpleName	MethodInvocation
(
)
;
fillData	SimpleName	MethodInvocation
(
)
;
public	Modifier	MethodDeclaration
Cursor	SimpleName	SimpleType
fetchNote	SimpleName	MethodDeclaration
(
long
rowId	SimpleName	SingleVariableDeclaration
,
String	SimpleName	SimpleType
table	SimpleName	SingleVariableDeclaration
,
String	SimpleName	SimpleType
columns	SimpleName	SingleVariableDeclaration
)
throws
SQLException	SimpleName	SimpleType
{
if
(
rowId	SimpleName	InfixExpression
==
0	NumberLiteral	InfixExpression
)
{
String	SimpleName	SimpleType
query	SimpleName	VariableDeclarationFragment
=
"SELECT MAX(_id) FROM record"	StringLiteral	VariableDeclarationFragment
;
Cursor	SimpleName	SimpleType
cursor	SimpleName	VariableDeclarationFragment
=
mDb	SimpleName	MethodInvocation
.
rawQuery	SimpleName	MethodInvocation
(
query	SimpleName	MethodInvocation
,
null	NullLiteral	MethodInvocation
)
;
rowId	SimpleName	Assignment
=
0	NumberLiteral	Assignment
;
if
(
cursor	SimpleName	MethodInvocation
.
moveToFirst	SimpleName	MethodInvocation
(
)
)
{
rowId	SimpleName	Assignment
=
cursor	SimpleName	MethodInvocation
.
getInt	SimpleName	MethodInvocation
(
0	NumberLiteral	MethodInvocation
)
;
}
}
Cursor	SimpleName	SimpleType
mCursor	SimpleName	VariableDeclarationFragment
=
mDb	SimpleName	MethodInvocation
.
query	SimpleName	MethodInvocation
(
true	BooleanLiteral	MethodInvocation
,
table	SimpleName	MethodInvocation
,
new
String	SimpleName	SimpleType
[
]
{
KEY_ROWID	SimpleName	ArrayInitializer
,
columns	SimpleName	ArrayInitializer
}
,
KEY_ROWID	SimpleName	InfixExpression
+
"="	StringLiteral	InfixExpression
+
rowId	SimpleName	InfixExpression
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
)
;
if
(
mCursor	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
{
mCursor	SimpleName	MethodInvocation
.
moveToFirst	SimpleName	MethodInvocation
(
)
;
}
return
mCursor	SimpleName	ReturnStatement
;
}
super
.
onDestroy	SimpleName	SuperMethodInvocation
(
)
;
if
(
mDbHelper	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
{
mDbHelper	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
}
public	Modifier	TypeDeclaration
class
DB	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
private	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
String	SimpleName	SimpleType
imageInSD	SimpleName	VariableDeclarationFragment
=
"/sdcard/e5.jpg"	StringLiteral	VariableDeclarationFragment
;
Bitmap	SimpleName	SimpleType
bitmap	SimpleName	VariableDeclarationFragment
;
byte
[
]
buf	SimpleName	VariableDeclarationFragment
=
null	NullLiteral	VariableDeclarationFragment
;
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
main	SimpleName	QualifiedName
)
;
DBAdapter	SimpleName	SimpleType
db	SimpleName	VariableDeclarationFragment
=
new
DBAdapter	SimpleName	SimpleType
(
this
)
;
BitmapFactory	SimpleName	QualifiedName
.
Options	SimpleName	QualifiedName
BitmapFactoryOptionsbfo	SimpleName	VariableDeclarationFragment
=
new
BitmapFactory	SimpleName	QualifiedName
.
Options	SimpleName	QualifiedName
(
)
;
BitmapFactoryOptionsbfo	SimpleName	QualifiedName
.
inPreferredConfig	SimpleName	QualifiedName
=
Bitmap	SimpleName	QualifiedName
.
Config	SimpleName	QualifiedName
.
RGB_565	SimpleName	QualifiedName
;
bitmap	SimpleName	Assignment
=
BitmapFactory	SimpleName	MethodInvocation
.
decodeFile	SimpleName	MethodInvocation
(
imageInSD	SimpleName	MethodInvocation
,
BitmapFactoryOptionsbfo	SimpleName	MethodInvocation
)
;
ByteArrayOutputStream	SimpleName	SimpleType
bos	SimpleName	VariableDeclarationFragment
=
new
ByteArrayOutputStream	SimpleName	SimpleType
(
)
;
bitmap	SimpleName	MethodInvocation
.
compress	SimpleName	MethodInvocation
(
Bitmap	SimpleName	QualifiedName
.
CompressFormat	SimpleName	QualifiedName
.
JPEG	SimpleName	QualifiedName
,
100	NumberLiteral	MethodInvocation
,
bos	SimpleName	MethodInvocation
)
;
buf	SimpleName	Assignment
=
bos	SimpleName	MethodInvocation
.
toByteArray	SimpleName	MethodInvocation
(
)
;
db	SimpleName	MethodInvocation
.
open	SimpleName	MethodInvocation
(
)
;
long
id	SimpleName	VariableDeclarationFragment
;
id	SimpleName	Assignment
=
db	SimpleName	MethodInvocation
.
insertTitle	SimpleName	MethodInvocation
(
buf	SimpleName	MethodInvocation
)
;
db	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
System	SimpleName	QualifiedName
.
out	SimpleName	QualifiedName
.
println	SimpleName	MethodInvocation
(
"ID:"	StringLiteral	InfixExpression
+
id	SimpleName	InfixExpression
)
;
}
}
package
com	SimpleName	QualifiedName
.
test	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Activity	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
net	SimpleName	QualifiedName
.
ConnectivityManager	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
net	SimpleName	QualifiedName
.
NetworkInfo	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
net	SimpleName	QualifiedName
.
wifi	SimpleName	QualifiedName
.
WifiInfo	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
net	SimpleName	QualifiedName
.
wifi	SimpleName	QualifiedName
.
WifiManager	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
IBinder	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
Net	SimpleName	TypeDeclaration
{
WifiManager	SimpleName	SimpleType
wifi	SimpleName	VariableDeclarationFragment
;
ConnectivityManager	SimpleName	SimpleType
cm	SimpleName	VariableDeclarationFragment
;
NetworkInfo	SimpleName	SimpleType
netInfo	SimpleName	VariableDeclarationFragment
;
public	Modifier	MethodDeclaration
Net	SimpleName	MethodDeclaration
(
Context	SimpleName	SimpleType
ctx	SimpleName	SingleVariableDeclaration
)
{
cm	SimpleName	Assignment
=
(
ConnectivityManager	SimpleName	SimpleType
)
ctx	SimpleName	MethodInvocation
.
getSystemService	SimpleName	MethodInvocation
(
ctx	SimpleName	QualifiedName
.
CONNECTIVITY_SERVICE	SimpleName	QualifiedName
)
;
netInfo	SimpleName	Assignment
=
cm	SimpleName	MethodInvocation
.
getActiveNetworkInfo	SimpleName	MethodInvocation
(
)
;
wifi	SimpleName	Assignment
=
(
WifiManager	SimpleName	SimpleType
)
ctx	SimpleName	MethodInvocation
.
getSystemService	SimpleName	MethodInvocation
(
Context	SimpleName	QualifiedName
.
WIFI_SERVICE	SimpleName	QualifiedName
)
;
}
public	Modifier	MethodDeclaration
boolean
isOnline	SimpleName	MethodDeclaration
(
)
{
netInfo	SimpleName	Assignment
=
cm	SimpleName	MethodInvocation
.
getActiveNetworkInfo	SimpleName	MethodInvocation
(
)
;
if
(
netInfo	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
&
amp	SimpleName	InfixExpression
;
&
amp	SimpleName	ExpressionMethodReference
;
netInfo	SimpleName	ExpressionMethodReference
.
isConnectedOrConnecting	SimpleName	MethodInvocation
(
)
)
{
return
true	BooleanLiteral	ReturnStatement
;
}
else
{
return
false	BooleanLiteral	ReturnStatement
;
}
}
public	Modifier	MethodDeclaration
NetworkInfo	SimpleName	SimpleType
[
]
getName	SimpleName	MethodDeclaration
(
)
{
NetworkInfo	SimpleName	SimpleType
[
]
name	SimpleName	VariableDeclarationFragment
=
cm	SimpleName	MethodInvocation
.
getAllNetworkInfo	SimpleName	MethodInvocation
(
)
;
return
name	SimpleName	ReturnStatement
;
}
public	Modifier	MethodDeclaration
String	SimpleName	SimpleType
getInfo	SimpleName	MethodDeclaration
(
)
{
WifiInfo	SimpleName	SimpleType
info	SimpleName	VariableDeclarationFragment
=
wifi	SimpleName	MethodInvocation
.
getConnectionInfo	SimpleName	MethodInvocation
(
)
;
return
info	SimpleName	MethodInvocation
.
getSSID	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
;
}
}
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
view	SimpleName	QualifiedName
.
Window	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
TextView	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
MyApp	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
private	Modifier	FieldDeclaration
Net	SimpleName	SimpleType
wifi	SimpleName	VariableDeclarationFragment
;
TextView	SimpleName	SimpleType
textStatus	SimpleName	VariableDeclarationFragment
;
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
requestWindowFeature	SimpleName	MethodInvocation
(
Window	SimpleName	QualifiedName
.
FEATURE_NO_TITLE	SimpleName	QualifiedName
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
main	SimpleName	QualifiedName
)
;
wifi	SimpleName	Assignment
=
new
Net	SimpleName	SimpleType
(
this
)
;
textStatus	SimpleName	Assignment
=
(
TextView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
text	SimpleName	QualifiedName
)
;
textStatus	SimpleName	MethodInvocation
.
append	SimpleName	MethodInvocation
(
"Your online status is "	StringLiteral	MethodInvocation
)
;
if
(
wifi	SimpleName	MethodInvocation
.
isOnline	SimpleName	MethodInvocation
(
)
)
{
textStatus	SimpleName	MethodInvocation
.
append	SimpleName	MethodInvocation
(
"online "	StringLiteral	InfixExpression
+
wifi	SimpleName	MethodInvocation
.
getInfo	SimpleName	MethodInvocation
(
)
)
;
}
else
{
textStatus	SimpleName	MethodInvocation
.
append	SimpleName	MethodInvocation
(
"offline "	StringLiteral	InfixExpression
+
wifi	SimpleName	MethodInvocation
.
getInfo	SimpleName	MethodInvocation
(
)
)
;
}
}
}
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Service	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
Context	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
Intent	SimpleName	QualifiedName
;
@
Override	SimpleName	MarkerAnnotation
public	Modifier	VariableDeclarationStatement
boolean
onCreateOptionsMenu	SimpleName	VariableDeclarationFragment
(
Menu	SimpleName	SimpleType
menu	SimpleName	VariableDeclarationFragment
)
{
getMenuInflater	SimpleName	MethodInvocation
(
)
.
inflate	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
menu	SimpleName	QualifiedName
.
detailsmenu	SimpleName	QualifiedName
,
menu	SimpleName	MethodInvocation
)
;
return
super
.
onCreateOptionsMenu	SimpleName	SuperMethodInvocation
(
menu	SimpleName	SuperMethodInvocation
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
boolean
onOptionsItemSelected	SimpleName	MethodDeclaration
(
MenuItem	SimpleName	SimpleType
item	SimpleName	SingleVariableDeclaration
)
{
switch
(
item	SimpleName	MethodInvocation
.
getItemId	SimpleName	MethodInvocation
(
)
)
{
case
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
rename	SimpleName	QualifiedName
:
openRenameDialog	SimpleName	MethodInvocation
(
)
;
return
true	BooleanLiteral	ReturnStatement
;
case
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
delete	SimpleName	QualifiedName
:
openDeleteDialog	SimpleName	MethodInvocation
(
)
;
return
true	BooleanLiteral	ReturnStatement
;
default
:
return
super
.
onOptionsItemSelected	SimpleName	SuperMethodInvocation
(
item	SimpleName	SuperMethodInvocation
)
;
}
}
private	Modifier	MethodDeclaration
void
openDeleteDialog	SimpleName	MethodDeclaration
(
)
{
AlertDialog	SimpleName	QualifiedName
.
Builder	SimpleName	QualifiedName
alert	SimpleName	VariableDeclarationFragment
=
new
AlertDialog	SimpleName	QualifiedName
.
Builder	SimpleName	QualifiedName
(
this
)
;
alert	SimpleName	MethodInvocation
.
setTitle	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
string	SimpleName	QualifiedName
.
deleteTitle	SimpleName	QualifiedName
)
;
alert	SimpleName	MethodInvocation
.
setMessage	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
string	SimpleName	QualifiedName
.
deleteMessage	SimpleName	QualifiedName
)
;
alert	SimpleName	MethodInvocation
.
setPositiveButton	SimpleName	MethodInvocation
(
"Yes"	StringLiteral	MethodInvocation
,
new
DialogInterface	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
DialogInterface	SimpleName	SimpleType
dialog	SimpleName	SingleVariableDeclaration
,
int
whichButton	SimpleName	SingleVariableDeclaration
)
{
}
}
)
;
alert	SimpleName	MethodInvocation
.
setNegativeButton	SimpleName	MethodInvocation
(
"No"	StringLiteral	MethodInvocation
,
new
DialogInterface	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
DialogInterface	SimpleName	SimpleType
dialog	SimpleName	SingleVariableDeclaration
,
int
whichButton	SimpleName	SingleVariableDeclaration
)
{
dialog	SimpleName	MethodInvocation
.
cancel	SimpleName	MethodInvocation
(
)
;
}
}
)
;
alert	SimpleName	MethodInvocation
.
show	SimpleName	MethodInvocation
(
)
;
}
public	Modifier	TypeDeclaration
class
irdesApplication	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
public	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
String	SimpleName	SimpleType
LOG_TAG	SimpleName	VariableDeclarationFragment
=
"Droidnova"	StringLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
Context	SimpleName	SimpleType
context	SimpleName	VariableDeclarationFragment
=
this
;
CheckUpdate	SimpleName	SimpleType
chUp	SimpleName	VariableDeclarationFragment
;
ProgressBar	SimpleName	SimpleType
bar	SimpleName	VariableDeclarationFragment
;
TextView	SimpleName	SimpleType
txtLoading	SimpleName	VariableDeclarationFragment
;
Data	SimpleName	SimpleType
d	SimpleName	VariableDeclarationFragment
=
new
Data	SimpleName	SimpleType
(
)
;
Singleton	SimpleName	SimpleType
s	SimpleName	VariableDeclarationFragment
;
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
requestWindowFeature	SimpleName	MethodInvocation
(
Window	SimpleName	QualifiedName
.
FEATURE_NO_TITLE	SimpleName	QualifiedName
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
page_loading	SimpleName	QualifiedName
)
;
bar	SimpleName	Assignment
=
(
ProgressBar	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
ProgressBarLoad	SimpleName	QualifiedName
)
;
txtLoading	SimpleName	Assignment
=
(
TextView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
txtLoading	SimpleName	QualifiedName
)
;
new
Thread	SimpleName	SimpleType
(
myThread	SimpleName	ClassInstanceCreation
)
.
start	SimpleName	MethodInvocation
(
)
;
bar	SimpleName	MethodInvocation
.
setProgress	SimpleName	MethodInvocation
(
0	NumberLiteral	MethodInvocation
)
;
s	SimpleName	MethodInvocation
.
getInstance	SimpleName	MethodInvocation
(
context	SimpleName	MethodInvocation
)
;
int
logParam	SimpleName	VariableDeclarationFragment
=
0	NumberLiteral	VariableDeclarationFragment
;
Log	SimpleName	MethodInvocation
.
v	SimpleName	MethodInvocation
(
LOG_TAG	SimpleName	MethodInvocation
,
"logParam value"	StringLiteral	InfixExpression
+
logParam	SimpleName	InfixExpression
)
;
[
]
}
}
public	Modifier	MethodDeclaration
DataBaseHelper	SimpleName	MethodDeclaration
(
Context	SimpleName	SimpleType
context	SimpleName	SingleVariableDeclaration
,
String	SimpleName	SimpleType
name	SimpleName	SingleVariableDeclaration
,
CursorFactory	SimpleName	SimpleType
factory	SimpleName	SingleVariableDeclaration
,
int
version	SimpleName	SingleVariableDeclaration
)
{
super
(
context	SimpleName	SuperConstructorInvocation
,
name	SimpleName	SuperConstructorInvocation
,
factory	SimpleName	SuperConstructorInvocation
,
version	SimpleName	SuperConstructorInvocation
)
;
System	SimpleName	QualifiedName
.
out	SimpleName	QualifiedName
.
println	SimpleName	MethodInvocation
(
"Test"	StringLiteral	MethodInvocation
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
SQLiteDatabase	SimpleName	SimpleType
db	SimpleName	SingleVariableDeclaration
)
{
d	SimpleName	QualifiedName
.
updateDataBase	SimpleName	QualifiedName
=
true	BooleanLiteral	Assignment
;
db	SimpleName	MethodInvocation
.
execSQL	SimpleName	MethodInvocation
(
"PRAGMA foreign_keys = ON;"	StringLiteral	MethodInvocation
)
;
[
]
db	SimpleName	MethodInvocation
.
execSQL	SimpleName	MethodInvocation
(
"CREATE TABLE "	StringLiteral	InfixExpression
+
d	SimpleName	QualifiedName
.
actualiteTable	SimpleName	QualifiedName
+
" ("	StringLiteral	InfixExpression
+
d	SimpleName	QualifiedName
.
colActualiteNum	SimpleName	QualifiedName
+
" INTEGER PRIMARY KEY , "	StringLiteral	InfixExpression
+
d	SimpleName	QualifiedName
.
colActualiteTitre	SimpleName	QualifiedName
+
" TEXT, "	StringLiteral	InfixExpression
+
d	SimpleName	QualifiedName
.
colActualiteDate	SimpleName	QualifiedName
+
" TEXT, "	StringLiteral	InfixExpression
+
d	SimpleName	QualifiedName
.
colActualiteLien	SimpleName	QualifiedName
+
" TEXT, "	StringLiteral	InfixExpression
+
d	SimpleName	QualifiedName
.
colActualiteTypeActu	SimpleName	QualifiedName
+
" INTEGER, "	StringLiteral	InfixExpression
+
"FOREIGN KEY ("	StringLiteral	InfixExpression
+
d	SimpleName	QualifiedName
.
colActualiteTypeActu	SimpleName	QualifiedName
+
") REFERENCES "	StringLiteral	InfixExpression
+
d	SimpleName	QualifiedName
.
typeActuTable	SimpleName	QualifiedName
+
" ("	StringLiteral	InfixExpression
+
d	SimpleName	QualifiedName
.
colTypeActuNum	SimpleName	QualifiedName
+
"))"	StringLiteral	InfixExpression
)
;
[
]
System	SimpleName	QualifiedName
.
out	SimpleName	QualifiedName
.
println	SimpleName	MethodInvocation
(
"Create table Complete"	StringLiteral	MethodInvocation
)
;
InsertRows	SimpleName	MethodInvocation
(
db	SimpleName	MethodInvocation
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onUpgrade	SimpleName	MethodDeclaration
(
SQLiteDatabase	SimpleName	SimpleType
db	SimpleName	SingleVariableDeclaration
,
int
oldVersion	SimpleName	SingleVariableDeclaration
,
int
newVersion	SimpleName	SingleVariableDeclaration
)
{
[
...
]
db	SimpleName	MethodInvocation
.
execSQL	SimpleName	MethodInvocation
(
"DROP TABLE IF EXISTS "	StringLiteral	InfixExpression
+
d	SimpleName	QualifiedName
.
actualiteTable	SimpleName	QualifiedName
)
;
[
]
onCreate	SimpleName	MethodInvocation
(
db	SimpleName	MethodInvocation
)
;
}
public	Modifier	MethodDeclaration
void
InsertRows	SimpleName	MethodDeclaration
(
SQLiteDatabase	SimpleName	SimpleType
bdd	SimpleName	SingleVariableDeclaration
)
{
System	SimpleName	QualifiedName
.
out	SimpleName	QualifiedName
.
println	SimpleName	MethodInvocation
(
"Chargement des données"	StringLiteral	MethodInvocation
)
;
bdd	SimpleName	Assignment
=
this
.
getWritableDatabase	SimpleName	MethodInvocation
(
)
;
ContentValues	SimpleName	SimpleType
cv	SimpleName	VariableDeclarationFragment
=
new
ContentValues	SimpleName	SimpleType
(
)
;
cv	SimpleName	MethodInvocation
.
put	SimpleName	MethodInvocation
(
d	SimpleName	QualifiedName
.
colTypeActuNum	SimpleName	QualifiedName
,
1	NumberLiteral	MethodInvocation
)
;
cv	SimpleName	MethodInvocation
.
put	SimpleName	MethodInvocation
(
d	SimpleName	QualifiedName
.
coltypeActuLibelle	SimpleName	QualifiedName
,
"Gen"	StringLiteral	MethodInvocation
)
;
bdd	SimpleName	MethodInvocation
.
insert	SimpleName	MethodInvocation
(
d	SimpleName	QualifiedName
.
typeActuTable	SimpleName	QualifiedName
,
d	SimpleName	QualifiedName
.
colTypeActuNum	SimpleName	QualifiedName
,
cv	SimpleName	MethodInvocation
)
;
[
]
bdd	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
System	SimpleName	QualifiedName
.
out	SimpleName	QualifiedName
.
println	SimpleName	MethodInvocation
(
"Données inserées"	StringLiteral	MethodInvocation
)
;
}
public	Modifier	VariableDeclarationStatement
static	Modifier	VariableDeclarationStatement
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
dbName	SimpleName	VariableDeclarationFragment
=
"irdesDB"	StringLiteral	VariableDeclarationFragment
;
public	Modifier	VariableDeclarationStatement
static	Modifier	VariableDeclarationStatement
final	Modifier	VariableDeclarationStatement
int
dbVersion	SimpleName	VariableDeclarationFragment
=
46	NumberLiteral	VariableDeclarationFragment
;
public	Modifier	VariableDeclarationStatement
static	Modifier	VariableDeclarationStatement
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
actualiteTable	SimpleName	VariableDeclarationFragment
=
"Actualite"	StringLiteral	VariableDeclarationFragment
;
public	Modifier	VariableDeclarationStatement
static	Modifier	VariableDeclarationStatement
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
colActualiteNum	SimpleName	VariableDeclarationFragment
=
"numActu"	StringLiteral	VariableDeclarationFragment
;
public	Modifier	VariableDeclarationStatement
static	Modifier	VariableDeclarationStatement
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
colActualiteTitre	SimpleName	VariableDeclarationFragment
=
"titre"	StringLiteral	VariableDeclarationFragment
;
public	Modifier	VariableDeclarationStatement
static	Modifier	VariableDeclarationStatement
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
colActualiteDate	SimpleName	VariableDeclarationFragment
=
"date"	StringLiteral	VariableDeclarationFragment
;
public	Modifier	VariableDeclarationStatement
static	Modifier	VariableDeclarationStatement
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
colActualiteLien	SimpleName	VariableDeclarationFragment
=
"lien"	StringLiteral	VariableDeclarationFragment
;
public	Modifier	VariableDeclarationStatement
static	Modifier	VariableDeclarationStatement
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
colActualiteTypeActu	SimpleName	VariableDeclarationFragment
=
"numTypeActu"	StringLiteral	VariableDeclarationFragment
;
[
]
package
com	SimpleName	QualifiedName
.
irdes	SimpleName	QualifiedName
.
db	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
Context	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
database	SimpleName	QualifiedName
.
sqlite	SimpleName	QualifiedName
.
SQLiteDatabase	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
Singleton	SimpleName	TypeDeclaration
{
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
Singleton	SimpleName	SimpleType
instance	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
DataBaseHelper	SimpleName	SimpleType
baseIrdes	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
SQLiteDatabase	SimpleName	SimpleType
db	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
Data	SimpleName	SimpleType
d	SimpleName	VariableDeclarationFragment
=
new
Data	SimpleName	SimpleType
(
)
;
private	Modifier	MethodDeclaration
Singleton	SimpleName	MethodDeclaration
(
Context	SimpleName	SimpleType
context	SimpleName	SingleVariableDeclaration
)
{
System	SimpleName	QualifiedName
.
out	SimpleName	QualifiedName
.
println	SimpleName	MethodInvocation
(
"Construction du Singleton"	StringLiteral	MethodInvocation
)
;
d	SimpleName	QualifiedName
.
loadPercent	SimpleName	QualifiedName
=
10	NumberLiteral	Assignment
;
d	SimpleName	QualifiedName
.
loadTxt	SimpleName	QualifiedName
=
"Initialisation"	StringLiteral	Assignment
;
baseIrdes	SimpleName	Assignment
=
new
DataBaseHelper	SimpleName	SimpleType
(
context	SimpleName	ClassInstanceCreation
,
d	SimpleName	QualifiedName
.
dbName	SimpleName	QualifiedName
,
null	NullLiteral	ClassInstanceCreation
,
d	SimpleName	QualifiedName
.
dbVersion	SimpleName	QualifiedName
)
;
}
public	Modifier	MethodDeclaration
static	Modifier	MethodDeclaration
synchronized	Modifier	MethodDeclaration
Singleton	SimpleName	SimpleType
getInstance	SimpleName	MethodDeclaration
(
Context	SimpleName	SimpleType
context	SimpleName	SingleVariableDeclaration
)
{
if
(
instance	SimpleName	InfixExpression
==
null	NullLiteral	InfixExpression
)
instance	SimpleName	Assignment
=
new
Singleton	SimpleName	SimpleType
(
context	SimpleName	ClassInstanceCreation
)
;
return
instance	SimpleName	ReturnStatement
;
}
public	Modifier	MethodDeclaration
void
setValue	SimpleName	MethodDeclaration
(
SQLiteDatabase	SimpleName	SimpleType
value	SimpleName	SingleVariableDeclaration
)
{
db	SimpleName	Assignment
=
value	SimpleName	Assignment
;
}
public	Modifier	MethodDeclaration
SQLiteDatabase	SimpleName	SimpleType
getValue	SimpleName	MethodDeclaration
(
)
{
return
db	SimpleName	ReturnStatement
;
}
protected	Modifier	MethodDeclaration
void
open	SimpleName	MethodDeclaration
(
)
{
db	SimpleName	Assignment
=
baseIrdes	SimpleName	MethodInvocation
.
getWritableDatabase	SimpleName	MethodInvocation
(
)
;
}
protected	Modifier	MethodDeclaration
void
close	SimpleName	MethodDeclaration
(
)
{
db	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
}
}
public	Modifier	TypeDeclaration
class
DataBaseHelper	SimpleName	TypeDeclaration
extends
SQLiteOpenHelper	SimpleName	SimpleType
{
private	Modifier	VariableDeclarationStatement
Data	SimpleName	SimpleType
d	SimpleName	VariableDeclarationFragment
=
new
Data	SimpleName	SimpleType
(
)
;
public	Modifier	MethodDeclaration
void
play	SimpleName	MethodDeclaration
(
Context	SimpleName	SimpleType
context	SimpleName	SingleVariableDeclaration
)
{
if
(
soundPlayer	SimpleName	InfixExpression
!=
null	NullLiteral	InfixExpression
)
{
soundPlayer	SimpleName	MethodInvocation
.
release	SimpleName	MethodInvocation
(
)
;
}
int
rId	SimpleName	VariableDeclarationFragment
=
0	NumberLiteral	VariableDeclarationFragment
;
switch
(
aIndex	SimpleName	SwitchStatement
)
{
case
0	NumberLiteral	SwitchCase
:
rId	SimpleName	Assignment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
c0	SimpleName	QualifiedName
;
break
;
case
1	NumberLiteral	SwitchCase
:
rId	SimpleName	Assignment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
c1	SimpleName	QualifiedName
;
break
;
case
2	NumberLiteral	SwitchCase
:
rId	SimpleName	Assignment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
c2	SimpleName	QualifiedName
;
break
;
case
3	NumberLiteral	SwitchCase
:
rId	SimpleName	Assignment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
c3	SimpleName	QualifiedName
;
break
;
case
4	NumberLiteral	SwitchCase
:
rId	SimpleName	Assignment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
c4	SimpleName	QualifiedName
;
break
;
case
5	NumberLiteral	SwitchCase
:
rId	SimpleName	Assignment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
c5	SimpleName	QualifiedName
;
break
;
case
6	NumberLiteral	SwitchCase
:
rId	SimpleName	Assignment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
c6	SimpleName	QualifiedName
;
break
;
case
7	NumberLiteral	SwitchCase
:
rId	SimpleName	Assignment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
c7	SimpleName	QualifiedName
;
break
;
case
8	NumberLiteral	SwitchCase
:
rId	SimpleName	Assignment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
c8	SimpleName	QualifiedName
;
break
;
case
9	NumberLiteral	SwitchCase
:
rId	SimpleName	Assignment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
c9	SimpleName	QualifiedName
;
break
;
case
10	NumberLiteral	SwitchCase
:
rId	SimpleName	Assignment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
c10	SimpleName	QualifiedName
;
break
;
case
11	NumberLiteral	SwitchCase
:
rId	SimpleName	Assignment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
c11	SimpleName	QualifiedName
;
break
;
case
12	NumberLiteral	SwitchCase
:
rId	SimpleName	Assignment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
c12	SimpleName	QualifiedName
;
break
;
case
13	NumberLiteral	SwitchCase
:
rId	SimpleName	Assignment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
c13	SimpleName	QualifiedName
;
break
;
case
14	NumberLiteral	SwitchCase
:
rId	SimpleName	Assignment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
v14	SimpleName	QualifiedName
;
break
;
case
15	NumberLiteral	SwitchCase
:
rId	SimpleName	Assignment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
v15	SimpleName	QualifiedName
;
break
;
case
16	NumberLiteral	SwitchCase
:
rId	SimpleName	Assignment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
v16	SimpleName	QualifiedName
;
break
;
case
17	NumberLiteral	SwitchCase
:
rId	SimpleName	Assignment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
v17	SimpleName	QualifiedName
;
break
;
case
18	NumberLiteral	SwitchCase
:
rId	SimpleName	Assignment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
v18	SimpleName	QualifiedName
;
break
;
case
19	NumberLiteral	SwitchCase
:
rId	SimpleName	Assignment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
v19	SimpleName	QualifiedName
;
break
;
case
20	NumberLiteral	SwitchCase
:
rId	SimpleName	Assignment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
v20	SimpleName	QualifiedName
;
break
;
case
21	NumberLiteral	SwitchCase
:
rId	SimpleName	Assignment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
v21	SimpleName	QualifiedName
;
break
;
case
22	NumberLiteral	SwitchCase
:
rId	SimpleName	Assignment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
v22	SimpleName	QualifiedName
;
break
;
case
23	NumberLiteral	SwitchCase
:
rId	SimpleName	Assignment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
v23	SimpleName	QualifiedName
;
break
;
default
:
rId	SimpleName	Assignment
=
R	SimpleName	QualifiedName
.
raw	SimpleName	QualifiedName
.
error	SimpleName	QualifiedName
;
break
;
}
soundPlayer	SimpleName	Assignment
=
MediaPlayer	SimpleName	MethodInvocation
.
create	SimpleName	MethodInvocation
(
context	SimpleName	MethodInvocation
,
rId	SimpleName	MethodInvocation
)
;
soundPlayer	SimpleName	MethodInvocation
.
start	SimpleName	MethodInvocation
(
)
;
}
}
soundPlayer	SimpleName	Assignment
=
MediaPlayer	SimpleName	MethodInvocation
.
create	SimpleName	MethodInvocation
(
context	SimpleName	MethodInvocation
,
rId	SimpleName	MethodInvocation
)
;
soundPlayer	SimpleName	MethodInvocation
.
start	SimpleName	MethodInvocation
(
)
;
try
{
InputStream	SimpleName	SimpleType
is	SimpleName	VariableDeclarationFragment
=
new
FileInputStream	SimpleName	SimpleType
(
"errorlog2.txt"	StringLiteral	ClassInstanceCreation
)
;
long
length	SimpleName	VariableDeclarationFragment
=
file	SimpleName	MethodInvocation
.
length	SimpleName	MethodInvocation
(
)
;
is	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
return
length	SimpleName	ReturnStatement
;
}
catch
(
IOException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
Log	SimpleName	MethodInvocation
.
w	SimpleName	MethodInvocation
(
BaseHelper	SimpleName	QualifiedName
.
TAG_MAIN_ACTIVITY	SimpleName	QualifiedName
,
"bad stuff: "	StringLiteral	MethodInvocation
,
e	SimpleName	MethodInvocation
)
;
return
0	NumberLiteral	ReturnStatement
;
String	SimpleName	SimpleType
someFileName	SimpleName	VariableDeclarationFragment
=
"errlogtest.log"	StringLiteral	VariableDeclarationFragment
;
try
{
FileOutputStream	SimpleName	SimpleType
fOut	SimpleName	VariableDeclarationFragment
=
openFileOutput	SimpleName	MethodInvocation
(
someFileName	SimpleName	MethodInvocation
,
Context	SimpleName	QualifiedName
.
MODE_APPEND	SimpleName	QualifiedName
)
;
OutputStreamWriter	SimpleName	SimpleType
osw	SimpleName	VariableDeclarationFragment
=
new
OutputStreamWriter	SimpleName	SimpleType
(
fOut	SimpleName	ClassInstanceCreation
)
;
osw	SimpleName	MethodInvocation
.
write	SimpleName	MethodInvocation
(
"dsgaadfg0df9g0sdf90sg9058349 sdf"	StringLiteral	MethodInvocation
)
;
osw	SimpleName	MethodInvocation
.
flush	SimpleName	MethodInvocation
(
)
;
osw	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
}
catch
(
IOException	SimpleName	SimpleType
ioe	SimpleName	SingleVariableDeclaration
)
{
ioe	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
try
{
FileInputStream	SimpleName	SimpleType
fileToOpen	SimpleName	VariableDeclarationFragment
=
openFileInput	SimpleName	MethodInvocation
(
someFileName	SimpleName	MethodInvocation
)
;
byte
[
]
readerByte	SimpleName	VariableDeclarationFragment
=
new
byte
[
fileToOpen	SimpleName	MethodInvocation
.
available	SimpleName	MethodInvocation
(
)
]
;
while
(
fileToOpen	SimpleName	MethodInvocation
.
read	SimpleName	MethodInvocation
(
readerByte	SimpleName	MethodInvocation
)
!=
-
1	NumberLiteral	PrefixExpression
)
{
}
String	SimpleName	SimpleType
fileContents	SimpleName	VariableDeclarationFragment
=
new
String	SimpleName	SimpleType
(
readerByte	SimpleName	ClassInstanceCreation
)
;
fileContents	SimpleName	MethodInvocation
.
toString	SimpleName	MethodInvocation
(
)
;
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
getApplicationContext	SimpleName	MethodInvocation
(
)
,
"FILE CONTENTS: "	StringLiteral	InfixExpression
+
fileContents	SimpleName	InfixExpression
,
Toast	SimpleName	QualifiedName
.
LENGTH_LONG	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
}
catch
(
FileNotFoundException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
Log	SimpleName	MethodInvocation
.
w	SimpleName	MethodInvocation
(
"Reading file"	StringLiteral	MethodInvocation
,
"Unable to open file"	StringLiteral	MethodInvocation
)
;
}
catch
(
IOException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
Log	SimpleName	MethodInvocation
.
w	SimpleName	MethodInvocation
(
"Reading file"	StringLiteral	MethodInvocation
,
"Error reading file"	StringLiteral	MethodInvocation
)
;
}
File	SimpleName	SimpleType
file	SimpleName	VariableDeclarationFragment
=
new
File	SimpleName	SimpleType
(
someFileName	SimpleName	ClassInstanceCreation
)
;
long
length2	SimpleName	VariableDeclarationFragment
=
file	SimpleName	MethodInvocation
.
length	SimpleName	MethodInvocation
(
)
;
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
getApplicationContext	SimpleName	MethodInvocation
(
)
,
"FILE LENGTH:"	StringLiteral	InfixExpression
+
length2	SimpleName	InfixExpression
,
Toast	SimpleName	QualifiedName
.
LENGTH_LONG	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
try
{
RandomAccessFile	SimpleName	SimpleType
raffile	SimpleName	VariableDeclarationFragment
=
new
RandomAccessFile	SimpleName	SimpleType
(
new
File	SimpleName	SimpleType
(
someFileName	SimpleName	ClassInstanceCreation
)
,
"r"	StringLiteral	ClassInstanceCreation
)
;
long
length	SimpleName	VariableDeclarationFragment
=
raffile	SimpleName	MethodInvocation
.
length	SimpleName	MethodInvocation
(
)
;
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
getApplicationContext	SimpleName	MethodInvocation
(
)
,
"FILE LENGTH:"	StringLiteral	InfixExpression
+
length	SimpleName	InfixExpression
,
Toast	SimpleName	QualifiedName
.
LENGTH_LONG	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
catch
(
IOException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
Log	SimpleName	MethodInvocation
.
w	SimpleName	MethodInvocation
(
"Reading file"	StringLiteral	MethodInvocation
,
"Error reading file"	StringLiteral	MethodInvocation
,
e	SimpleName	MethodInvocation
)
;
}
import
com	SimpleName	QualifiedName
.
tweet	SimpleName	QualifiedName
.
t	SimpleName	QualifiedName
.
TweetToTwitterActivity	SimpleName	QualifiedName
;
TweetToTwitterActivity	SimpleName	SimpleType
twitter	SimpleName	VariableDeclarationFragment
=
new
TweetToTwitterActivity	SimpleName	SimpleType
(
)
;
twitter	SimpleName	MethodInvocation
.
buttonLogin	SimpleName	MethodInvocation
(
v	SimpleName	MethodInvocation
)
;
public	Modifier	TypeDeclaration
class
TweetToTwitterActivity	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
private	Modifier	VariableDeclarationStatement
SharedPreferences	SimpleName	SimpleType
mPrefs	SimpleName	VariableDeclarationFragment
;
private	Modifier	VariableDeclarationStatement
Twitter	SimpleName	SimpleType
mTwitter	SimpleName	VariableDeclarationFragment
;
private	Modifier	VariableDeclarationStatement
RequestToken	SimpleName	SimpleType
mReqToken	SimpleName	VariableDeclarationFragment
;
public	Modifier	MethodDeclaration
void
buttonLogin	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
)
{
mPrefs	SimpleName	Assignment
=
getSharedPreferences	SimpleName	MethodInvocation
(
"twitterPrefs"	StringLiteral	MethodInvocation
,
MODE_PRIVATE	SimpleName	MethodInvocation
)
;
mTwitter	SimpleName	Assignment
=
new
TwitterFactory	SimpleName	SimpleType
(
)
.
getInstance	SimpleName	MethodInvocation
(
)
;
mTwitter	SimpleName	MethodInvocation
.
setOAuthConsumer	SimpleName	MethodInvocation
(
CONSUMER_KEY	SimpleName	MethodInvocation
,
CONSUMER_SECRET	SimpleName	MethodInvocation
)
;
if
(
mPrefs	SimpleName	MethodInvocation
.
contains	SimpleName	MethodInvocation
(
PREF_ACCESS_TOKEN	SimpleName	MethodInvocation
)
)
{
Log	SimpleName	MethodInvocation
.
i	SimpleName	MethodInvocation
(
TAG	SimpleName	MethodInvocation
,
"Repeat User"	StringLiteral	MethodInvocation
)
;
loginAuthorisedUser	SimpleName	MethodInvocation
(
)
;
}
else
{
Log	SimpleName	MethodInvocation
.
i	SimpleName	MethodInvocation
(
TAG	SimpleName	MethodInvocation
,
"New User"	StringLiteral	MethodInvocation
)
;
loginNewUser	SimpleName	MethodInvocation
(
)
;
}
}
setContentView	SimpleName	MethodInvocation
(
twitterSite	SimpleName	MethodInvocation
)
;
TweetToTwitterActivity	SimpleName	SimpleType
twitter	SimpleName	VariableDeclarationFragment
=
new
TweetToTwitterActivity	SimpleName	SimpleType
(
)
;
twitter	SimpleName	MethodInvocation
.
loginNewUser	SimpleName	MethodInvocation
(
v	SimpleName	MethodInvocation
,
context	SimpleName	MethodInvocation
)
;
public	Modifier	MethodDeclaration
void
loginNewUser	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
,
Context	SimpleName	SimpleType
context	SimpleName	SingleVariableDeclaration
)
{
mPrefs	SimpleName	Assignment
=
context	SimpleName	MethodInvocation
.
getSharedPreferences	SimpleName	MethodInvocation
(
"twitterPrefs"	StringLiteral	MethodInvocation
,
MODE_PRIVATE	SimpleName	MethodInvocation
)
;
Log	SimpleName	MethodInvocation
.
i	SimpleName	MethodInvocation
(
TAG	SimpleName	MethodInvocation
,
"Got Preferences"	StringLiteral	MethodInvocation
)
;
mTwitter	SimpleName	Assignment
=
new
TwitterFactory	SimpleName	SimpleType
(
)
.
getInstance	SimpleName	MethodInvocation
(
)
;
Log	SimpleName	MethodInvocation
.
i	SimpleName	MethodInvocation
(
TAG	SimpleName	MethodInvocation
,
"Got Twitter4j"	StringLiteral	MethodInvocation
)
;
mTwitter	SimpleName	MethodInvocation
.
setOAuthConsumer	SimpleName	MethodInvocation
(
CONSUMER_KEY	SimpleName	MethodInvocation
,
CONSUMER_SECRET	SimpleName	MethodInvocation
)
;
try
{
Log	SimpleName	MethodInvocation
.
i	SimpleName	MethodInvocation
(
TAG	SimpleName	MethodInvocation
,
"Request App Authentication"	StringLiteral	MethodInvocation
)
;
mReqToken	SimpleName	Assignment
=
mTwitter	SimpleName	MethodInvocation
.
getOAuthRequestToken	SimpleName	MethodInvocation
(
CALLBACK_URL	SimpleName	MethodInvocation
)
;
Log	SimpleName	MethodInvocation
.
i	SimpleName	MethodInvocation
(
TAG	SimpleName	MethodInvocation
,
"Starting Webview to login to twitter"	StringLiteral	MethodInvocation
)
;
WebView	SimpleName	SimpleType
twitterSite	SimpleName	VariableDeclarationFragment
=
new
WebView	SimpleName	SimpleType
(
context	SimpleName	ClassInstanceCreation
)
;
twitterSite	SimpleName	MethodInvocation
.
requestFocus	SimpleName	MethodInvocation
(
View	SimpleName	QualifiedName
.
FOCUS_DOWN	SimpleName	QualifiedName
)
;
twitterSite	SimpleName	MethodInvocation
.
setOnTouchListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnTouchListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
boolean
onTouch	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
v	SimpleName	SingleVariableDeclaration
,
MotionEvent	SimpleName	SimpleType
event	SimpleName	SingleVariableDeclaration
)
{
switch
(
event	SimpleName	MethodInvocation
.
getAction	SimpleName	MethodInvocation
(
)
)
{
case
MotionEvent	SimpleName	QualifiedName
.
ACTION_DOWN	SimpleName	QualifiedName
:
case
MotionEvent	SimpleName	QualifiedName
.
ACTION_UP	SimpleName	QualifiedName
:
if
(
!
v	SimpleName	MethodInvocation
.
hasFocus	SimpleName	MethodInvocation
(
)
)
{
v	SimpleName	MethodInvocation
.
requestFocus	SimpleName	MethodInvocation
(
)
;
}
break
;
}
return
false	BooleanLiteral	ReturnStatement
;
}
}
)
;
twitterSite	SimpleName	MethodInvocation
.
loadUrl	SimpleName	MethodInvocation
(
mReqToken	SimpleName	MethodInvocation
.
getAuthenticationURL	SimpleName	MethodInvocation
(
)
)
;
setContentView	SimpleName	MethodInvocation
(
twitterSite	SimpleName	MethodInvocation
)
;
}
catch
(
TwitterException	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
Log	SimpleName	MethodInvocation
.
e	SimpleName	MethodInvocation
(
"HelloWorld"	StringLiteral	MethodInvocation
,
"Error in activity"	StringLiteral	MethodInvocation
,
e	SimpleName	MethodInvocation
)
;
Toast	SimpleName	MethodInvocation
.
makeText	SimpleName	MethodInvocation
(
this
,
"Twitter Login error, try again later"	StringLiteral	MethodInvocation
,
Toast	SimpleName	QualifiedName
.
LENGTH_SHORT	SimpleName	QualifiedName
)
.
show	SimpleName	MethodInvocation
(
)
;
}
}
package
com	SimpleName	QualifiedName
.
mysite	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
Intent	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
net	SimpleName	QualifiedName
.
Uri	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
webkit	SimpleName	QualifiedName
.
WebSettings	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
webkit	SimpleName	QualifiedName
.
WebView	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
MyApp	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
WebView	SimpleName	SimpleType
DCWebView	SimpleName	VariableDeclarationFragment
=
(
WebView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
webview	SimpleName	QualifiedName
)
;
WebSettings	SimpleName	SimpleType
webViewSettings	SimpleName	VariableDeclarationFragment
=
DCWebView	SimpleName	MethodInvocation
.
getSettings	SimpleName	MethodInvocation
(
)
;
DCWebView	SimpleName	MethodInvocation
.
setWebViewClient	SimpleName	MethodInvocation
(
new
MyWebViewClient	SimpleName	SimpleType
(
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
launchExternalBrowser	SimpleName	MethodDeclaration
(
String	SimpleName	SimpleType
url	SimpleName	SingleVariableDeclaration
)
{
Intent	SimpleName	SimpleType
intent	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
Intent	SimpleName	QualifiedName
.
ACTION_VIEW	SimpleName	QualifiedName
,
Uri	SimpleName	MethodInvocation
.
parse	SimpleName	MethodInvocation
(
url	SimpleName	MethodInvocation
)
)
;
startActivity	SimpleName	MethodInvocation
(
intent	SimpleName	MethodInvocation
)
;
}
}
)
;
webViewSettings	SimpleName	MethodInvocation
.
setJavaScriptEnabled	SimpleName	MethodInvocation
(
true	BooleanLiteral	MethodInvocation
)
;
}
}
import
android	SimpleName	QualifiedName
.
net	SimpleName	QualifiedName
.
Uri	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
webkit	SimpleName	QualifiedName
.
WebView	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
webkit	SimpleName	QualifiedName
.
WebViewClient	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
MyWebViewClient	SimpleName	TypeDeclaration
extends
WebViewClient	SimpleName	SimpleType
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
boolean
shouldOverrideUrlLoading	SimpleName	MethodDeclaration
(
WebView	SimpleName	SimpleType
view	SimpleName	SingleVariableDeclaration
,
String	SimpleName	SimpleType
url	SimpleName	SingleVariableDeclaration
)
{
if
(
Uri	SimpleName	MethodInvocation
.
parse	SimpleName	MethodInvocation
(
url	SimpleName	MethodInvocation
)
.
getHost	SimpleName	MethodInvocation
(
)
.
equals	SimpleName	MethodInvocation
(
"www.mysite.com"	StringLiteral	MethodInvocation
)
)
{
return
false	BooleanLiteral	ReturnStatement
;
}
Intent	SimpleName	SimpleType
intent	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
Intent	SimpleName	QualifiedName
.
ACTION_VIEW	SimpleName	QualifiedName
,
Uri	SimpleName	MethodInvocation
.
parse	SimpleName	MethodInvocation
(
url	SimpleName	MethodInvocation
)
)
;
startActivity	SimpleName	MethodInvocation
(
intent	SimpleName	MethodInvocation
)
;
return
true	BooleanLiteral	ReturnStatement
;
}
}
package
com	SimpleName	QualifiedName
.
myapp	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Activity	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
Intent	SimpleName	QualifiedName
;
package
com	SimpleName	QualifiedName
.
dc	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Activity	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
Intent	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
net	SimpleName	QualifiedName
.
Uri	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
util	SimpleName	QualifiedName
.
Log	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
webkit	SimpleName	QualifiedName
.
WebSettings	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
webkit	SimpleName	QualifiedName
.
WebView	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
DC	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
try
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
WebView	SimpleName	SimpleType
DCWebView	SimpleName	VariableDeclarationFragment
=
(
WebView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
webview	SimpleName	QualifiedName
)
;
DCWebView	SimpleName	MethodInvocation
.
setWebViewClient	SimpleName	MethodInvocation
(
new
MyWebViewClient	SimpleName	SimpleType
(
)
{
public	Modifier	MethodDeclaration
void
launchExternalBrowser	SimpleName	MethodDeclaration
(
String	SimpleName	SimpleType
url	SimpleName	SingleVariableDeclaration
)
{
Intent	SimpleName	SimpleType
intent	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
Intent	SimpleName	QualifiedName
.
ACTION_VIEW	SimpleName	QualifiedName
,
Uri	SimpleName	MethodInvocation
.
parse	SimpleName	MethodInvocation
(
url	SimpleName	MethodInvocation
)
)
;
startActivity	SimpleName	MethodInvocation
(
intent	SimpleName	MethodInvocation
)
;
}
}
)
;
WebSettings	SimpleName	SimpleType
webViewSettings	SimpleName	VariableDeclarationFragment
=
DCWebView	SimpleName	MethodInvocation
.
getSettings	SimpleName	MethodInvocation
(
)
;
webViewSettings	SimpleName	MethodInvocation
.
setJavaScriptEnabled	SimpleName	MethodInvocation
(
true	BooleanLiteral	MethodInvocation
)
;
}
catch
(
Exception	SimpleName	SimpleType
e	SimpleName	SingleVariableDeclaration
)
{
Log	SimpleName	MethodInvocation
.
e	SimpleName	MethodInvocation
(
"ERROR"	StringLiteral	MethodInvocation
,
"ERROR IN CODE: "	StringLiteral	InfixExpression
+
e	SimpleName	MethodInvocation
.
toString	SimpleName	MethodInvocation
(
)
)
;
e	SimpleName	MethodInvocation
.
printStackTrace	SimpleName	MethodInvocation
(
)
;
}
}
}
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
menu	SimpleName	QualifiedName
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
l2class	SimpleName	QualifiedName
)
;
package
com	SimpleName	QualifiedName
.
lineage	SimpleName	QualifiedName
.
goddess	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
l2class	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
int
SHOW_1	SimpleName	VariableDeclarationFragment
=
1	NumberLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
int
SHOW_2	SimpleName	VariableDeclarationFragment
=
2	NumberLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
int
SHOW_3	SimpleName	VariableDeclarationFragment
=
3	NumberLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
int
SHOW_4	SimpleName	VariableDeclarationFragment
=
4	NumberLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
int
SHOW_5	SimpleName	VariableDeclarationFragment
=
5	NumberLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
int
SHOW_6	SimpleName	VariableDeclarationFragment
=
6	NumberLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
int
SHOW_7	SimpleName	VariableDeclarationFragment
=
7	NumberLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
int
SHOW_8	SimpleName	VariableDeclarationFragment
=
8	NumberLiteral	VariableDeclarationFragment
;
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
icicle	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
icicle	SimpleName	SuperMethodInvocation
)
;
requestWindowFeature	SimpleName	MethodInvocation
(
Window	SimpleName	QualifiedName
.
FEATURE_NO_TITLE	SimpleName	QualifiedName
)
;
getWindow	SimpleName	MethodInvocation
(
)
.
setFlags	SimpleName	MethodInvocation
(
WindowManager	SimpleName	QualifiedName
.
LayoutParams	SimpleName	QualifiedName
.
FLAG_FULLSCREEN	SimpleName	QualifiedName
,
WindowManager	SimpleName	QualifiedName
.
LayoutParams	SimpleName	QualifiedName
.
FLAG_FULLSCREEN	SimpleName	QualifiedName
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
menu	SimpleName	QualifiedName
)
;
Button	SimpleName	SimpleType
act8	SimpleName	VariableDeclarationFragment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button8	SimpleName	QualifiedName
)
;
act8	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
view	SimpleName	SingleVariableDeclaration
)
{
Intent	SimpleName	SimpleType
i	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
l2class	SimpleName	ThisExpression
.
this
,
wynnsummoner	SimpleName	SimpleType
.
class
)
;
startActivityForResult	SimpleName	MethodInvocation
(
i	SimpleName	MethodInvocation
,
SHOW_8	SimpleName	MethodInvocation
)
;
}
}
)
;
Button	SimpleName	SimpleType
act7	SimpleName	VariableDeclarationFragment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button7	SimpleName	QualifiedName
)
;
act7	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
view	SimpleName	SingleVariableDeclaration
)
{
Intent	SimpleName	SimpleType
i	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
l2class	SimpleName	ThisExpression
.
this
,
eolhhealer	SimpleName	SimpleType
.
class
)
;
startActivityForResult	SimpleName	MethodInvocation
(
i	SimpleName	MethodInvocation
,
SHOW_7	SimpleName	MethodInvocation
)
;
}
}
)
;
Button	SimpleName	SimpleType
act6	SimpleName	VariableDeclarationFragment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button6	SimpleName	QualifiedName
)
;
act6	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
view	SimpleName	SingleVariableDeclaration
)
{
Intent	SimpleName	SimpleType
i	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
l2class	SimpleName	ThisExpression
.
this
,
sigelknight	SimpleName	SimpleType
.
class
)
;
startActivityForResult	SimpleName	MethodInvocation
(
i	SimpleName	MethodInvocation
,
SHOW_6	SimpleName	MethodInvocation
)
;
}
}
)
;
Button	SimpleName	SimpleType
act5	SimpleName	VariableDeclarationFragment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button5	SimpleName	QualifiedName
)
;
act5	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
view	SimpleName	SingleVariableDeclaration
)
{
Intent	SimpleName	SimpleType
i	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
l2class	SimpleName	ThisExpression
.
this
,
isenchanter	SimpleName	SimpleType
.
class
)
;
startActivityForResult	SimpleName	MethodInvocation
(
i	SimpleName	MethodInvocation
,
SHOW_5	SimpleName	MethodInvocation
)
;
}
}
)
;
Button	SimpleName	SimpleType
act4	SimpleName	VariableDeclarationFragment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button4	SimpleName	QualifiedName
)
;
act4	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
view	SimpleName	SingleVariableDeclaration
)
{
Intent	SimpleName	SimpleType
i	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
l2class	SimpleName	ThisExpression
.
this
,
othelrogue	SimpleName	SimpleType
.
class
)
;
startActivityForResult	SimpleName	MethodInvocation
(
i	SimpleName	MethodInvocation
,
SHOW_4	SimpleName	MethodInvocation
)
;
}
}
)
;
Button	SimpleName	SimpleType
act3	SimpleName	VariableDeclarationFragment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button3	SimpleName	QualifiedName
)
;
act3	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
view	SimpleName	SingleVariableDeclaration
)
{
Intent	SimpleName	SimpleType
i	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
l2class	SimpleName	ThisExpression
.
this
,
tirwarrior	SimpleName	SimpleType
.
class
)
;
startActivityForResult	SimpleName	MethodInvocation
(
i	SimpleName	MethodInvocation
,
SHOW_3	SimpleName	MethodInvocation
)
;
}
}
)
;
Button	SimpleName	SimpleType
act2	SimpleName	VariableDeclarationFragment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button2	SimpleName	QualifiedName
)
;
act2	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
view	SimpleName	SingleVariableDeclaration
)
{
Intent	SimpleName	SimpleType
i	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
l2class	SimpleName	ThisExpression
.
this
,
yrarcher	SimpleName	SimpleType
.
class
)
;
startActivityForResult	SimpleName	MethodInvocation
(
i	SimpleName	MethodInvocation
,
SHOW_2	SimpleName	MethodInvocation
)
;
}
}
)
;
Button	SimpleName	SimpleType
act1	SimpleName	VariableDeclarationFragment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button1	SimpleName	QualifiedName
)
;
act1	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
view	SimpleName	SingleVariableDeclaration
)
{
Intent	SimpleName	SimpleType
i	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
l2class	SimpleName	ThisExpression
.
this
,
feohwizard	SimpleName	SimpleType
.
class
)
;
startActivityForResult	SimpleName	MethodInvocation
(
i	SimpleName	MethodInvocation
,
SHOW_1	SimpleName	MethodInvocation
)
;
}
}
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onActivityResult	SimpleName	MethodDeclaration
(
int
requestCode	SimpleName	SingleVariableDeclaration
,
int
resultCode	SimpleName	SingleVariableDeclaration
,
Intent	SimpleName	SimpleType
data	SimpleName	SingleVariableDeclaration
)
{
super
.
onActivityResult	SimpleName	SuperMethodInvocation
(
requestCode	SimpleName	SuperMethodInvocation
,
resultCode	SimpleName	SuperMethodInvocation
,
data	SimpleName	SuperMethodInvocation
)
;
if
(
resultCode	SimpleName	InfixExpression
==
Activity	SimpleName	QualifiedName
.
RESULT_OK	SimpleName	QualifiedName
)
{
switch
(
requestCode	SimpleName	SwitchStatement
)
{
case
SHOW_1	SimpleName	SwitchCase
:
break
;
case
SHOW_2	SimpleName	SwitchCase
:
break
;
case
SHOW_3	SimpleName	SwitchCase
:
break
;
case
SHOW_4	SimpleName	SwitchCase
:
break
;
case
SHOW_5	SimpleName	SwitchCase
:
break
;
case
SHOW_6	SimpleName	SwitchCase
:
break
;
case
SHOW_7	SimpleName	SwitchCase
:
break
;
case
SHOW_8	SimpleName	SwitchCase
:
break
;
}
}
}
}
package
com	SimpleName	QualifiedName
.
lineage	SimpleName	QualifiedName
.
goddess	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
menu	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
int
SHOW_1	SimpleName	VariableDeclarationFragment
=
1	NumberLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
int
SHOW_2	SimpleName	VariableDeclarationFragment
=
2	NumberLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
int
SHOW_3	SimpleName	VariableDeclarationFragment
=
3	NumberLiteral	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
static	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
int
SHOW_4	SimpleName	VariableDeclarationFragment
=
4	NumberLiteral	VariableDeclarationFragment
;
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
icicle	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
icicle	SimpleName	SuperMethodInvocation
)
;
requestWindowFeature	SimpleName	MethodInvocation
(
Window	SimpleName	QualifiedName
.
FEATURE_NO_TITLE	SimpleName	QualifiedName
)
;
getWindow	SimpleName	MethodInvocation
(
)
.
setFlags	SimpleName	MethodInvocation
(
WindowManager	SimpleName	QualifiedName
.
LayoutParams	SimpleName	QualifiedName
.
FLAG_FULLSCREEN	SimpleName	QualifiedName
,
WindowManager	SimpleName	QualifiedName
.
LayoutParams	SimpleName	QualifiedName
.
FLAG_FULLSCREEN	SimpleName	QualifiedName
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
menu	SimpleName	QualifiedName
)
;
Button	SimpleName	SimpleType
act4	SimpleName	VariableDeclarationFragment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button2	SimpleName	QualifiedName
)
;
act4	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
view	SimpleName	SingleVariableDeclaration
)
{
Intent	SimpleName	SimpleType
i	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
menu	SimpleName	ThisExpression
.
this
,
l2class	SimpleName	SimpleType
.
class
)
;
startActivityForResult	SimpleName	MethodInvocation
(
i	SimpleName	MethodInvocation
,
SHOW_4	SimpleName	MethodInvocation
)
;
}
}
)
;
Button	SimpleName	SimpleType
act3	SimpleName	VariableDeclarationFragment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button3	SimpleName	QualifiedName
)
;
act3	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
view	SimpleName	SingleVariableDeclaration
)
{
Intent	SimpleName	SimpleType
i	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
menu	SimpleName	ThisExpression
.
this
,
location	SimpleName	SimpleType
.
class
)
;
startActivityForResult	SimpleName	MethodInvocation
(
i	SimpleName	MethodInvocation
,
SHOW_3	SimpleName	MethodInvocation
)
;
}
}
)
;
Button	SimpleName	SimpleType
act2	SimpleName	VariableDeclarationFragment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button4	SimpleName	QualifiedName
)
;
act2	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
view	SimpleName	SingleVariableDeclaration
)
{
Intent	SimpleName	SimpleType
i	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
menu	SimpleName	ThisExpression
.
this
,
help	SimpleName	SimpleType
.
class
)
;
startActivityForResult	SimpleName	MethodInvocation
(
i	SimpleName	MethodInvocation
,
SHOW_2	SimpleName	MethodInvocation
)
;
}
}
)
;
Button	SimpleName	SimpleType
act1	SimpleName	VariableDeclarationFragment
=
(
Button	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
button1	SimpleName	QualifiedName
)
;
act1	SimpleName	MethodInvocation
.
setOnClickListener	SimpleName	MethodInvocation
(
new
View	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
(
)
{
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
View	SimpleName	SimpleType
view	SimpleName	SingleVariableDeclaration
)
{
Intent	SimpleName	SimpleType
i	SimpleName	VariableDeclarationFragment
=
new
Intent	SimpleName	SimpleType
(
menu	SimpleName	ThisExpression
.
this
,
room	SimpleName	SimpleType
.
class
)
;
startActivityForResult	SimpleName	MethodInvocation
(
i	SimpleName	MethodInvocation
,
SHOW_1	SimpleName	MethodInvocation
)
;
}
}
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onActivityResult	SimpleName	MethodDeclaration
(
int
requestCode	SimpleName	SingleVariableDeclaration
,
int
resultCode	SimpleName	SingleVariableDeclaration
,
Intent	SimpleName	SimpleType
data	SimpleName	SingleVariableDeclaration
)
{
super
.
onActivityResult	SimpleName	SuperMethodInvocation
(
requestCode	SimpleName	SuperMethodInvocation
,
resultCode	SimpleName	SuperMethodInvocation
,
data	SimpleName	SuperMethodInvocation
)
;
if
(
resultCode	SimpleName	InfixExpression
==
Activity	SimpleName	QualifiedName
.
RESULT_OK	SimpleName	QualifiedName
)
{
switch
(
requestCode	SimpleName	SwitchStatement
)
{
case
SHOW_1	SimpleName	SwitchCase
:
break
;
case
SHOW_2	SimpleName	SwitchCase
:
break
;
case
SHOW_3	SimpleName	SwitchCase
:
break
;
case
SHOW_4	SimpleName	SwitchCase
:
break
;
}
}
}
}
package
com	SimpleName	QualifiedName
.
util	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
AlertDialog	SimpleName	QualifiedName
;
final	Modifier	VariableDeclarationStatement
PromptDialog	SimpleName	SimpleType
dlgName	SimpleName	VariableDeclarationFragment
=
new
PromptDialog	SimpleName	SimpleType
(
this
,
R	SimpleName	QualifiedName
.
string	SimpleName	QualifiedName
.
enterName	SimpleName	QualifiedName
,
R	SimpleName	QualifiedName
.
string	SimpleName	QualifiedName
.
enter_comment	SimpleName	QualifiedName
)
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
boolean
onOkClicked	SimpleName	MethodDeclaration
(
String	SimpleName	SimpleType
input	SimpleName	SingleVariableDeclaration
)
{
mName	SimpleName	Assignment
=
input	SimpleName	Assignment
;
save	SimpleName	MethodInvocation
(
)
;
return
true	BooleanLiteral	ReturnStatement
;
}
}
;
mTxtShiftName	SimpleName	Assignment
=
(
TextView	SimpleName	SimpleType
)
findViewById	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
id	SimpleName	QualifiedName
.
shiftname	SimpleName	QualifiedName
)
;
import
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
Context	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
DialogInterface	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
DialogInterface	SimpleName	QualifiedName
.
OnClickListener	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
widget	SimpleName	QualifiedName
.
EditText	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
abstract	Modifier	TypeDeclaration
class
PromptDialog	SimpleName	TypeDeclaration
extends
AlertDialog	SimpleName	QualifiedName
.
Builder	SimpleName	QualifiedName
implements
OnClickListener	SimpleName	SimpleType
{
private	Modifier	FieldDeclaration
final	Modifier	FieldDeclaration
EditText	SimpleName	SimpleType
input	SimpleName	VariableDeclarationFragment
;
public	Modifier	MethodDeclaration
PromptDialog	SimpleName	MethodDeclaration
(
Context	SimpleName	SimpleType
context	SimpleName	SingleVariableDeclaration
,
int
title	SimpleName	SingleVariableDeclaration
,
int
message	SimpleName	SingleVariableDeclaration
)
{
super
(
context	SimpleName	SuperConstructorInvocation
)
;
setTitle	SimpleName	MethodInvocation
(
title	SimpleName	MethodInvocation
)
;
input	SimpleName	Assignment
=
new
EditText	SimpleName	SimpleType
(
context	SimpleName	ClassInstanceCreation
)
;
setView	SimpleName	MethodInvocation
(
input	SimpleName	MethodInvocation
)
;
setPositiveButton	SimpleName	MethodInvocation
(
"ok"	StringLiteral	MethodInvocation
,
this
)
;
setNegativeButton	SimpleName	MethodInvocation
(
"cancel"	StringLiteral	MethodInvocation
,
this
)
;
}
public	Modifier	MethodDeclaration
void
onCancelClicked	SimpleName	MethodDeclaration
(
DialogInterface	SimpleName	SimpleType
dialog	SimpleName	SingleVariableDeclaration
)
{
dialog	SimpleName	MethodInvocation
.
dismiss	SimpleName	MethodInvocation
(
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onClick	SimpleName	MethodDeclaration
(
DialogInterface	SimpleName	SimpleType
dialog	SimpleName	SingleVariableDeclaration
,
int
which	SimpleName	SingleVariableDeclaration
)
{
if
(
which	SimpleName	InfixExpression
==
DialogInterface	SimpleName	QualifiedName
.
BUTTON_POSITIVE	SimpleName	QualifiedName
)
{
if
(
onOkClicked	SimpleName	MethodInvocation
(
input	SimpleName	MethodInvocation
.
getText	SimpleName	MethodInvocation
(
)
.
toString	SimpleName	MethodInvocation
(
)
)
)
{
dialog	SimpleName	MethodInvocation
.
dismiss	SimpleName	MethodInvocation
(
)
;
}
}
else
{
onCancelClicked	SimpleName	MethodInvocation
(
dialog	SimpleName	MethodInvocation
)
;
}
}
abstract	Modifier	MethodDeclaration
public	Modifier	MethodDeclaration
boolean
onOkClicked	SimpleName	MethodDeclaration
(
String	SimpleName	SimpleType
input	SimpleName	SingleVariableDeclaration
)
;
}
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
main	SimpleName	QualifiedName
)
;
package
com	SimpleName	QualifiedName
.
himanshu	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
Activity	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
content	SimpleName	QualifiedName
.
Context	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
FileWalker	SimpleName	TypeDeclaration
{
public	Modifier	FieldDeclaration
File	SimpleName	SimpleType
[
]
ListPDF	SimpleName	VariableDeclarationFragment
;
public	Modifier	FieldDeclaration
int
count	SimpleName	VariableDeclarationFragment
=
0	NumberLiteral	VariableDeclarationFragment
;
public	Modifier	FieldDeclaration
String	SimpleName	SimpleType
Path	SimpleName	VariableDeclarationFragment
;
public	Modifier	FieldDeclaration
Context	SimpleName	SimpleType
context	SimpleName	VariableDeclarationFragment
;
public	Modifier	MethodDeclaration
void
Walker	SimpleName	MethodDeclaration
(
String	SimpleName	SimpleType
Path	SimpleName	SingleVariableDeclaration
)
{
File	SimpleName	SimpleType
root	SimpleName	VariableDeclarationFragment
=
new
File	SimpleName	SimpleType
(
Path	SimpleName	ClassInstanceCreation
)
;
File	SimpleName	SimpleType
[
]
List	SimpleName	VariableDeclarationFragment
=
root	SimpleName	MethodInvocation
.
listFiles	SimpleName	MethodInvocation
(
)
;
for
(
File	SimpleName	SimpleType
f	SimpleName	SingleVariableDeclaration
:
List	SimpleName	EnhancedForStatement
)
{
if
(
f	SimpleName	MethodInvocation
.
isDirectory	SimpleName	MethodInvocation
(
)
)
{
Walker	SimpleName	MethodInvocation
(
f	SimpleName	MethodInvocation
.
getAbsolutePath	SimpleName	MethodInvocation
(
)
)
;
}
else
{
if
(
f	SimpleName	MethodInvocation
.
getName	SimpleName	MethodInvocation
(
)
.
endsWith	SimpleName	MethodInvocation
(
".pdf"	StringLiteral	MethodInvocation
)
)
{
ListPDF	SimpleName	ArrayAccess
[
count	SimpleName	ArrayAccess
]
=
f	SimpleName	Assignment
;
count	SimpleName	PostfixExpression
++
;
}
}
}
}
}
import
android	SimpleName	QualifiedName
.
os	SimpleName	QualifiedName
.
Bundle	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
util	SimpleName	QualifiedName
.
Log	SimpleName	QualifiedName
;
public	Modifier	TypeDeclaration
class
BookShelfDebugActivity	SimpleName	TypeDeclaration
extends
Activity	SimpleName	SimpleType
{
@
Override	SimpleName	MarkerAnnotation
public	Modifier	MethodDeclaration
void
onCreate	SimpleName	MethodDeclaration
(
Bundle	SimpleName	SimpleType
savedInstanceState	SimpleName	SingleVariableDeclaration
)
{
super
.
onCreate	SimpleName	SuperMethodInvocation
(
savedInstanceState	SimpleName	SuperMethodInvocation
)
;
setContentView	SimpleName	MethodInvocation
(
R	SimpleName	QualifiedName
.
layout	SimpleName	QualifiedName
.
main	SimpleName	QualifiedName
)
;
Log	SimpleName	MethodInvocation
.
i	SimpleName	MethodInvocation
(
"debug"	StringLiteral	MethodInvocation
,
"qwert111111"	StringLiteral	MethodInvocation
)
;
FileWalker	SimpleName	SimpleType
fw	SimpleName	VariableDeclarationFragment
=
new
FileWalker	SimpleName	SimpleType
(
)
;
fw	SimpleName	MethodInvocation
.
Walker	SimpleName	MethodInvocation
(
"/"	StringLiteral	MethodInvocation
)
;
String	SimpleName	SimpleType
a	SimpleName	VariableDeclarationFragment
=
fw	SimpleName	QualifiedName
.
ListPDF	SimpleName	QualifiedName
[
0	NumberLiteral	ArrayAccess
]
.
getName	SimpleName	MethodInvocation
(
)
;
String	SimpleName	SimpleType
b	SimpleName	VariableDeclarationFragment
=
fw	SimpleName	QualifiedName
.
ListPDF	SimpleName	QualifiedName
[
1	NumberLiteral	ArrayAccess
]
.
getName	SimpleName	MethodInvocation
(
)
;
Log	SimpleName	MethodInvocation
.
i	SimpleName	MethodInvocation
(
"debug"	StringLiteral	MethodInvocation
,
a	SimpleName	MethodInvocation
)
;
Log	SimpleName	MethodInvocation
.
i	SimpleName	MethodInvocation
(
"debug"	StringLiteral	MethodInvocation
,
b	SimpleName	MethodInvocation
)
;
}
}
package
com	SimpleName	QualifiedName
.
himanshu	SimpleName	QualifiedName
;
import
java	SimpleName	QualifiedName
.
lang	SimpleName	QualifiedName
.
String	SimpleName	QualifiedName
;
import
java	SimpleName	QualifiedName
.
io	SimpleName	QualifiedName
.
File	SimpleName	QualifiedName
;
import
android	SimpleName	QualifiedName
.
app	SimpleName	QualifiedName
.
ProgressDialog	SimpleName	QualifiedName
;
Thread	SimpleName	MethodInvocation
.
stop	SimpleName	MethodInvocation
(
)
public	Modifier	MethodDeclaration
Object	SimpleName	SimpleType
fetchIssue	SimpleName	MethodDeclaration
(
long
IssueNumber	SimpleName	SingleVariableDeclaration
,
int
type	SimpleName	SingleVariableDeclaration
)
{
Cursor	SimpleName	SimpleType
cursor	SimpleName	VariableDeclarationFragment
=
mDB	SimpleName	MethodInvocation
.
query	SimpleName	MethodInvocation
(
true	BooleanLiteral	MethodInvocation
,
ISSUES_TABLE	SimpleName	MethodInvocation
,
ISSUES_COLUMN_ARRAY	SimpleName	MethodInvocation
,
COL_ISSUE_ID	SimpleName	InfixExpression
+
"="	StringLiteral	InfixExpression
+
IssueNumber	SimpleName	InfixExpression
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
,
null	NullLiteral	MethodInvocation
)
;
int
iCount	SimpleName	VariableDeclarationFragment
=
cursor	SimpleName	MethodInvocation
.
getCount	SimpleName	MethodInvocation
(
)
;
if
(
cursor	SimpleName	InfixExpression
==
null	NullLiteral	InfixExpression
)
return
null	NullLiteral	ReturnStatement
;
Object	SimpleName	SimpleType
objOut	SimpleName	VariableDeclarationFragment
=
null	NullLiteral	VariableDeclarationFragment
;
if
(
type	SimpleName	InfixExpression
==
QUERY_TYPE_STRING_ARRAY	SimpleName	InfixExpression
)
{
String	SimpleName	SimpleType
[
]
IssueInfo	SimpleName	VariableDeclarationFragment
=
new
String	SimpleName	SimpleType
[
3	NumberLiteral	ArrayCreation
]
;
IssueInfo	SimpleName	ArrayAccess
[
0	NumberLiteral	ArrayAccess
]
=
String	SimpleName	MethodInvocation
.
valueOf	SimpleName	MethodInvocation
(
IssueNumber	SimpleName	MethodInvocation
)
;
IssueInfo	SimpleName	ArrayAccess
[
1	NumberLiteral	ArrayAccess
]
=
cursor	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
cursor	SimpleName	MethodInvocation
.
getColumnIndexOrThrow	SimpleName	MethodInvocation
(
COL_DATE_RECEIVED	SimpleName	MethodInvocation
)
)
;
IssueInfo	SimpleName	ArrayAccess
[
2	NumberLiteral	ArrayAccess
]
=
cursor	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
cursor	SimpleName	MethodInvocation
.
getColumnIndexOrThrow	SimpleName	MethodInvocation
(
COL_ISSUE_SUMMARY	SimpleName	MethodInvocation
)
)
;
IssueInfo	SimpleName	ArrayAccess
[
3	NumberLiteral	ArrayAccess
]
=
cursor	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
cursor	SimpleName	MethodInvocation
.
getColumnIndexOrThrow	SimpleName	MethodInvocation
(
COL_ISSUE_STATUS	SimpleName	MethodInvocation
)
)
;
IssueInfo	SimpleName	ArrayAccess
[
4	NumberLiteral	ArrayAccess
]
=
cursor	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
cursor	SimpleName	MethodInvocation
.
getColumnIndexOrThrow	SimpleName	MethodInvocation
(
COL_ISSUE_SUB_STATUS	SimpleName	MethodInvocation
)
)
;
IssueInfo	SimpleName	ArrayAccess
[
5	NumberLiteral	ArrayAccess
]
=
cursor	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
cursor	SimpleName	MethodInvocation
.
getColumnIndexOrThrow	SimpleName	MethodInvocation
(
COL_ISSUE_DESCRIPTION	SimpleName	MethodInvocation
)
)
;
objOut	SimpleName	Assignment
=
IssueInfo	SimpleName	Assignment
;
}
else
{
IssueInfo	SimpleName	SimpleType
IssueInfo	SimpleName	VariableDeclarationFragment
=
new
IssueInfo	SimpleName	SimpleType
(
IssueNumber	SimpleName	ClassInstanceCreation
,
"12/12/2000"	StringLiteral	ClassInstanceCreation
,
cursor	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
cursor	SimpleName	MethodInvocation
.
getColumnIndexOrThrow	SimpleName	MethodInvocation
(
COL_ISSUE_SUMMARY	SimpleName	MethodInvocation
)
)
,
cursor	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
cursor	SimpleName	MethodInvocation
.
getColumnIndexOrThrow	SimpleName	MethodInvocation
(
COL_ISSUE_STATUS	SimpleName	MethodInvocation
)
)
,
cursor	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
cursor	SimpleName	MethodInvocation
.
getColumnIndexOrThrow	SimpleName	MethodInvocation
(
COL_ISSUE_SUB_STATUS	SimpleName	MethodInvocation
)
)
,
cursor	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
cursor	SimpleName	MethodInvocation
.
getColumnIndexOrThrow	SimpleName	MethodInvocation
(
COL_ISSUE_DESCRIPTION	SimpleName	MethodInvocation
)
)
)
;
objOut	SimpleName	Assignment
=
IssueInfo	SimpleName	Assignment
;
}
cursor	SimpleName	MethodInvocation
.
close	SimpleName	MethodInvocation
(
)
;
return
objOut	SimpleName	ReturnStatement
;
}
IssueInfo	SimpleName	SimpleType
IssueInfo	SimpleName	VariableDeclarationFragment
=
new
IssueInfo	SimpleName	SimpleType
(
IssueNumber	SimpleName	ClassInstanceCreation
,
"12/12/2000"	StringLiteral	ClassInstanceCreation
,
cursor	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
cursor	SimpleName	MethodInvocation
.
getColumnIndexOrThrow	SimpleName	MethodInvocation
(
COL_ISSUE_SUMMARY	SimpleName	MethodInvocation
)
)
,
cursor	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
cursor	SimpleName	MethodInvocation
.
getColumnIndexOrThrow	SimpleName	MethodInvocation
(
COL_ISSUE_STATUS	SimpleName	MethodInvocation
)
)
,
cursor	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
cursor	SimpleName	MethodInvocation
.
getColumnIndexOrThrow	SimpleName	MethodInvocation
(
COL_ISSUE_SUB_STATUS	SimpleName	MethodInvocation
)
)
,
cursor	SimpleName	MethodInvocation
.
getString	SimpleName	MethodInvocation
(
cursor	SimpleName	MethodInvocation
.
getColumnIndexOrThrow	SimpleName	MethodInvocation
(
COL_ISSUE_DESCRIPTION	SimpleName	MethodInvocation
)
)
)
;
public	Modifier	VariableDeclarationStatement
static	Modifier	VariableDeclarationStatement
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
ISSUES_TABLE	SimpleName	VariableDeclarationFragment
=
"Issues"	StringLiteral	VariableDeclarationFragment
;
public	Modifier	VariableDeclarationStatement
static	Modifier	VariableDeclarationStatement
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
COL_ISSUE_ID	SimpleName	VariableDeclarationFragment
=
"_id"	StringLiteral	VariableDeclarationFragment
;
public	Modifier	VariableDeclarationStatement
static	Modifier	VariableDeclarationStatement
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
COL_DATE_RECEIVED	SimpleName	VariableDeclarationFragment
=
"DateReceived"	StringLiteral	VariableDeclarationFragment
;
public	Modifier	VariableDeclarationStatement
static	Modifier	VariableDeclarationStatement
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
COL_ISSUE_STATUS	SimpleName	VariableDeclarationFragment
=
"IssueStatus"	StringLiteral	VariableDeclarationFragment
;
public	Modifier	VariableDeclarationStatement
static	Modifier	VariableDeclarationStatement
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
COL_ISSUE_SUB_STATUS	SimpleName	VariableDeclarationFragment
=
"IssueSubStatus"	StringLiteral	VariableDeclarationFragment
;
public	Modifier	VariableDeclarationStatement
static	Modifier	VariableDeclarationStatement
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
COL_ISSUE_SUMMARY	SimpleName	VariableDeclarationFragment
=
"IssueSummary"	StringLiteral	VariableDeclarationFragment
;
public	Modifier	VariableDeclarationStatement
static	Modifier	VariableDeclarationStatement
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
COL_ISSUE_DESCRIPTION	SimpleName	VariableDeclarationFragment
=
"IssueDescription"	StringLiteral	VariableDeclarationFragment
;
private	Modifier	VariableDeclarationStatement
static	Modifier	VariableDeclarationStatement
final	Modifier	VariableDeclarationStatement
String	SimpleName	SimpleType
[
]
ISSUES_COLUMN_ARRAY	SimpleName	VariableDeclarationFragment
=
new
String	SimpleName	SimpleType
[
]
{
COL_ISSUE_ID	SimpleName	ArrayInitializer
,
COL_DATE_RECEIVED	SimpleName	ArrayInitializer
,
COL_ISSUE_SUMMARY	SimpleName	ArrayInitializer
,
COL_ISSUE_STATUS	SimpleName	ArrayInitializer
,
COL_ISSUE_SUB_STATUS	SimpleName	ArrayInitializer
,
COL_ISSUE_DESCRIPTION	SimpleName	ArrayInitializer
}
;
public	Modifier	TypeDeclaration
class
MyAdapter	SimpleName	TypeDeclaration
extends
BaseAdapter	SimpleName	SimpleType
{
private	Modifier	FieldDeclaration
Context	SimpleName	SimpleType
context	SimpleName	VariableDeclarationFragment
;
private	Modifier	FieldDeclaration
String	SimpleName	SimpleType
[
]
texts	SimpleName	VariableDeclarationFragment
=
{
"aaa"	StringLiteral	ArrayInitializer
,
"bbb"	StringLiteral	ArrayInitializer
,
"ccc"	StringLiteral	ArrayInitializer
,
"ddd"	StringLiteral	ArrayInitializer
,
"eee"	StringLiteral	ArrayInitializer
,
"fff"	StringLiteral	ArrayInitializer
,
"eee"	StringLiteral	ArrayInitializer
,
"hhh"	StringLiteral	ArrayInitializer
,
"iii"	StringLiteral	ArrayInitializer
}
;
public	Modifier	MethodDeclaration
MyAdapter	SimpleName	MethodDeclaration
(
Context	SimpleName	SimpleType
context	SimpleName	SingleVariableDeclaration
)
{
this
.
context	SimpleName	FieldAccess
=
context	SimpleName	Assignment
;
}
public	Modifier	MethodDeclaration
int
getCount	SimpleName	MethodDeclaration
(
)
{
return
9	NumberLiteral	ReturnStatement
;
}
public	Modifier	MethodDeclaration
Object	SimpleName	SimpleType
getItem	SimpleName	MethodDeclaration
(
int
position	SimpleName	SingleVariableDeclaration
)
{
return
null	NullLiteral	ReturnStatement
;
}
public	Modifier	MethodDeclaration
long
getItemId	SimpleName	MethodDeclaration
(
int
position	SimpleName	SingleVariableDeclaration
)
{
return
0	NumberLiteral	ReturnStatement
;
}
public	Modifier	MethodDeclaration
View	SimpleName	SimpleType
getView	SimpleName	MethodDeclaration
(
int
position	SimpleName	SingleVariableDeclaration
,
View	SimpleName	SimpleType
convertView	SimpleName	SingleVariableDeclaration
,
ViewGroup	SimpleName	SimpleType
parent	SimpleName	SingleVariableDeclaration
)
{
TextView	SimpleName	SimpleType
tv	SimpleName	VariableDeclarationFragment
;
if
(
convertView	SimpleName	InfixExpression
==
null	NullLiteral	InfixExpression
)
{
tv	SimpleName	Assignment
=
new
TextView	SimpleName	SimpleType
(
context	SimpleName	ClassInstanceCreation
)
;
tv	SimpleName	MethodInvocation
.
setLayoutParams	SimpleName	MethodInvocation
(
new
GridView	SimpleName	QualifiedName
.
LayoutParams	SimpleName	QualifiedName
(
85	NumberLiteral	ClassInstanceCreation
,
85	NumberLiteral	ClassInstanceCreation
)
)
;
}
else
{
tv	SimpleName	Assignment
=
(
TextView	SimpleName	SimpleType
)
convertView	SimpleName	CastExpression
;
}
tv	SimpleName	MethodInvocation
.
setText	SimpleName	MethodInvocation
(
texts	SimpleName	ArrayAccess
[
position	SimpleName	ArrayAccess
]
)
;
return
tv	SimpleName	ReturnStatement
;
}
}
public	Modifier	TypeDeclaration
class
DownloadFileTask	SimpleName	TypeDeclaration
extends
AsyncTask	SimpleName	SimpleType
@
Override	SimpleName	MarkerAnnotation
protected	Modifier	MethodDeclaration
void
onPreExecute	SimpleName	MethodDeclaration
(
)
{
progressDialog	SimpleName	Assignment
=
new
ProgressDialog	SimpleName	SimpleType
(
whatContext	SimpleName	ClassInstanceCreation
)
;
progressDialog	SimpleName	MethodInvocation
.
setProgressStyle	SimpleName	MethodInvocation
(
ProgressDialog	SimpleName	QualifiedName
.
STYLE_HORIZONTAL	SimpleName	QualifiedName
)
;
progressDialog	SimpleName	MethodInvocation
.
setMessage	SimpleName	MethodInvocation
(
"Loading..."	StringLiteral	MethodInvocation
)
;
progressDialog	SimpleName	MethodInvocation
.
setCancelable	SimpleName	MethodInvocation
(
false	BooleanLiteral	MethodInvocation
)
;
progressDialog	SimpleName	MethodInvocation
.
show	SimpleName	MethodInvocation
(
)
;
}
